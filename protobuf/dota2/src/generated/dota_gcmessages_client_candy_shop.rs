// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `dota_gcmessages_client_candy_shop.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::steam_vent_proto_common::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:CMsgCandyShopCandyCount)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgCandyShopCandyCount {
    // message fields
    // @@protoc_insertion_point(field:CMsgCandyShopCandyCount.candy_type)
    pub candy_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgCandyShopCandyCount.candy_count)
    pub candy_count: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgCandyShopCandyCount.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgCandyShopCandyCount {
    fn default() -> &'a CMsgCandyShopCandyCount {
        <CMsgCandyShopCandyCount as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgCandyShopCandyCount {
    pub fn new() -> CMsgCandyShopCandyCount {
        ::std::default::Default::default()
    }

    // optional uint32 candy_type = 1;

    pub fn candy_type(&self) -> u32 {
        self.candy_type.unwrap_or(0)
    }

    pub fn clear_candy_type(&mut self) {
        self.candy_type = ::std::option::Option::None;
    }

    pub fn has_candy_type(&self) -> bool {
        self.candy_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_candy_type(&mut self, v: u32) {
        self.candy_type = ::std::option::Option::Some(v);
    }

    // optional uint32 candy_count = 2;

    pub fn candy_count(&self) -> u32 {
        self.candy_count.unwrap_or(0)
    }

    pub fn clear_candy_count(&mut self) {
        self.candy_count = ::std::option::Option::None;
    }

    pub fn has_candy_count(&self) -> bool {
        self.candy_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_candy_count(&mut self, v: u32) {
        self.candy_count = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgCandyShopCandyCount {
    const NAME: &'static str = "CMsgCandyShopCandyCount";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.candy_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.candy_count = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.candy_type {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.candy_count {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.candy_type {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.candy_count {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgCandyShopCandyCount {
        CMsgCandyShopCandyCount::new()
    }

    fn clear(&mut self) {
        self.candy_type = ::std::option::Option::None;
        self.candy_count = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgCandyShopCandyCount {
        static instance: CMsgCandyShopCandyCount = CMsgCandyShopCandyCount {
            candy_type: ::std::option::Option::None,
            candy_count: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgCandyShopCandyQuantity)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgCandyShopCandyQuantity {
    // message fields
    // @@protoc_insertion_point(field:CMsgCandyShopCandyQuantity.candy_counts)
    pub candy_counts: ::std::vec::Vec<CMsgCandyShopCandyCount>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgCandyShopCandyQuantity.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgCandyShopCandyQuantity {
    fn default() -> &'a CMsgCandyShopCandyQuantity {
        <CMsgCandyShopCandyQuantity as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgCandyShopCandyQuantity {
    pub fn new() -> CMsgCandyShopCandyQuantity {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgCandyShopCandyQuantity {
    const NAME: &'static str = "CMsgCandyShopCandyQuantity";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.candy_counts.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.candy_counts {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.candy_counts {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgCandyShopCandyQuantity {
        CMsgCandyShopCandyQuantity::new()
    }

    fn clear(&mut self) {
        self.candy_counts.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgCandyShopCandyQuantity {
        static instance: CMsgCandyShopCandyQuantity = CMsgCandyShopCandyQuantity {
            candy_counts: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgCandyShopExchangeRecipe)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgCandyShopExchangeRecipe {
    // message fields
    // @@protoc_insertion_point(field:CMsgCandyShopExchangeRecipe.recipe_id)
    pub recipe_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgCandyShopExchangeRecipe.input)
    pub input: ::steam_vent_proto_common::protobuf::MessageField<CMsgCandyShopCandyQuantity>,
    // @@protoc_insertion_point(field:CMsgCandyShopExchangeRecipe.output)
    pub output: ::steam_vent_proto_common::protobuf::MessageField<CMsgCandyShopCandyQuantity>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgCandyShopExchangeRecipe.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgCandyShopExchangeRecipe {
    fn default() -> &'a CMsgCandyShopExchangeRecipe {
        <CMsgCandyShopExchangeRecipe as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgCandyShopExchangeRecipe {
    pub fn new() -> CMsgCandyShopExchangeRecipe {
        ::std::default::Default::default()
    }

    // optional uint32 recipe_id = 1;

    pub fn recipe_id(&self) -> u32 {
        self.recipe_id.unwrap_or(0)
    }

    pub fn clear_recipe_id(&mut self) {
        self.recipe_id = ::std::option::Option::None;
    }

    pub fn has_recipe_id(&self) -> bool {
        self.recipe_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recipe_id(&mut self, v: u32) {
        self.recipe_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgCandyShopExchangeRecipe {
    const NAME: &'static str = "CMsgCandyShopExchangeRecipe";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.recipe_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.input)?;
                },
                26 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.output)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.recipe_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.input.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.output.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.recipe_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.input.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.output.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgCandyShopExchangeRecipe {
        CMsgCandyShopExchangeRecipe::new()
    }

    fn clear(&mut self) {
        self.recipe_id = ::std::option::Option::None;
        self.input.clear();
        self.output.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgCandyShopExchangeRecipe {
        static instance: CMsgCandyShopExchangeRecipe = CMsgCandyShopExchangeRecipe {
            recipe_id: ::std::option::Option::None,
            input: ::steam_vent_proto_common::protobuf::MessageField::none(),
            output: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgCandyShopRewardData_Item)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgCandyShopRewardData_Item {
    // message fields
    // @@protoc_insertion_point(field:CMsgCandyShopRewardData_Item.item_def)
    pub item_def: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgCandyShopRewardData_Item.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgCandyShopRewardData_Item {
    fn default() -> &'a CMsgCandyShopRewardData_Item {
        <CMsgCandyShopRewardData_Item as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgCandyShopRewardData_Item {
    pub fn new() -> CMsgCandyShopRewardData_Item {
        ::std::default::Default::default()
    }

    // optional uint32 item_def = 1;

    pub fn item_def(&self) -> u32 {
        self.item_def.unwrap_or(0)
    }

    pub fn clear_item_def(&mut self) {
        self.item_def = ::std::option::Option::None;
    }

    pub fn has_item_def(&self) -> bool {
        self.item_def.is_some()
    }

    // Param is passed by value, moved
    pub fn set_item_def(&mut self, v: u32) {
        self.item_def = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgCandyShopRewardData_Item {
    const NAME: &'static str = "CMsgCandyShopRewardData_Item";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.item_def = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.item_def {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.item_def {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgCandyShopRewardData_Item {
        CMsgCandyShopRewardData_Item::new()
    }

    fn clear(&mut self) {
        self.item_def = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgCandyShopRewardData_Item {
        static instance: CMsgCandyShopRewardData_Item = CMsgCandyShopRewardData_Item {
            item_def: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgCandyShopRewardData_EventAction)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgCandyShopRewardData_EventAction {
    // message fields
    // @@protoc_insertion_point(field:CMsgCandyShopRewardData_EventAction.event_id)
    pub event_id: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<super::dota_shared_enums::EEvent>>,
    // @@protoc_insertion_point(field:CMsgCandyShopRewardData_EventAction.action_id)
    pub action_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgCandyShopRewardData_EventAction.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgCandyShopRewardData_EventAction {
    fn default() -> &'a CMsgCandyShopRewardData_EventAction {
        <CMsgCandyShopRewardData_EventAction as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgCandyShopRewardData_EventAction {
    pub fn new() -> CMsgCandyShopRewardData_EventAction {
        ::std::default::Default::default()
    }

    // optional .EEvent event_id = 1;

    pub fn event_id(&self) -> super::dota_shared_enums::EEvent {
        match self.event_id {
            Some(e) => e.enum_value_or(super::dota_shared_enums::EEvent::EVENT_ID_NONE),
            None => super::dota_shared_enums::EEvent::EVENT_ID_NONE,
        }
    }

    pub fn clear_event_id(&mut self) {
        self.event_id = ::std::option::Option::None;
    }

    pub fn has_event_id(&self) -> bool {
        self.event_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_event_id(&mut self, v: super::dota_shared_enums::EEvent) {
        self.event_id = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint32 action_id = 2;

    pub fn action_id(&self) -> u32 {
        self.action_id.unwrap_or(0)
    }

    pub fn clear_action_id(&mut self) {
        self.action_id = ::std::option::Option::None;
    }

    pub fn has_action_id(&self) -> bool {
        self.action_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_action_id(&mut self, v: u32) {
        self.action_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgCandyShopRewardData_EventAction {
    const NAME: &'static str = "CMsgCandyShopRewardData_EventAction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.event_id = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                16 => {
                    self.action_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.event_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.action_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.event_id {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.action_id {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgCandyShopRewardData_EventAction {
        CMsgCandyShopRewardData_EventAction::new()
    }

    fn clear(&mut self) {
        self.event_id = ::std::option::Option::None;
        self.action_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgCandyShopRewardData_EventAction {
        static instance: CMsgCandyShopRewardData_EventAction = CMsgCandyShopRewardData_EventAction {
            event_id: ::std::option::Option::None,
            action_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgCandyShopRewardData_EventPoints)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgCandyShopRewardData_EventPoints {
    // message fields
    // @@protoc_insertion_point(field:CMsgCandyShopRewardData_EventPoints.event_id)
    pub event_id: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<super::dota_shared_enums::EEvent>>,
    // @@protoc_insertion_point(field:CMsgCandyShopRewardData_EventPoints.points)
    pub points: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgCandyShopRewardData_EventPoints.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgCandyShopRewardData_EventPoints {
    fn default() -> &'a CMsgCandyShopRewardData_EventPoints {
        <CMsgCandyShopRewardData_EventPoints as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgCandyShopRewardData_EventPoints {
    pub fn new() -> CMsgCandyShopRewardData_EventPoints {
        ::std::default::Default::default()
    }

    // optional .EEvent event_id = 1;

    pub fn event_id(&self) -> super::dota_shared_enums::EEvent {
        match self.event_id {
            Some(e) => e.enum_value_or(super::dota_shared_enums::EEvent::EVENT_ID_NONE),
            None => super::dota_shared_enums::EEvent::EVENT_ID_NONE,
        }
    }

    pub fn clear_event_id(&mut self) {
        self.event_id = ::std::option::Option::None;
    }

    pub fn has_event_id(&self) -> bool {
        self.event_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_event_id(&mut self, v: super::dota_shared_enums::EEvent) {
        self.event_id = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint32 points = 2;

    pub fn points(&self) -> u32 {
        self.points.unwrap_or(0)
    }

    pub fn clear_points(&mut self) {
        self.points = ::std::option::Option::None;
    }

    pub fn has_points(&self) -> bool {
        self.points.is_some()
    }

    // Param is passed by value, moved
    pub fn set_points(&mut self, v: u32) {
        self.points = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgCandyShopRewardData_EventPoints {
    const NAME: &'static str = "CMsgCandyShopRewardData_EventPoints";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.event_id = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                16 => {
                    self.points = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.event_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.points {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.event_id {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.points {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgCandyShopRewardData_EventPoints {
        CMsgCandyShopRewardData_EventPoints::new()
    }

    fn clear(&mut self) {
        self.event_id = ::std::option::Option::None;
        self.points = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgCandyShopRewardData_EventPoints {
        static instance: CMsgCandyShopRewardData_EventPoints = CMsgCandyShopRewardData_EventPoints {
            event_id: ::std::option::Option::None,
            points: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgCandyShopReward)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgCandyShopReward {
    // message fields
    // @@protoc_insertion_point(field:CMsgCandyShopReward.reward_id)
    pub reward_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgCandyShopReward.reward_option_id)
    pub reward_option_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgCandyShopReward.price)
    pub price: ::steam_vent_proto_common::protobuf::MessageField<CMsgCandyShopCandyQuantity>,
    // @@protoc_insertion_point(field:CMsgCandyShopReward.reward_type)
    pub reward_type: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<ECandyShopRewardType>>,
    // @@protoc_insertion_point(field:CMsgCandyShopReward.item_data)
    pub item_data: ::steam_vent_proto_common::protobuf::MessageField<CMsgCandyShopRewardData_Item>,
    // @@protoc_insertion_point(field:CMsgCandyShopReward.event_action_data)
    pub event_action_data: ::steam_vent_proto_common::protobuf::MessageField<CMsgCandyShopRewardData_EventAction>,
    // @@protoc_insertion_point(field:CMsgCandyShopReward.event_points_data)
    pub event_points_data: ::steam_vent_proto_common::protobuf::MessageField<CMsgCandyShopRewardData_EventPoints>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgCandyShopReward.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgCandyShopReward {
    fn default() -> &'a CMsgCandyShopReward {
        <CMsgCandyShopReward as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgCandyShopReward {
    pub fn new() -> CMsgCandyShopReward {
        ::std::default::Default::default()
    }

    // optional uint32 reward_id = 1;

    pub fn reward_id(&self) -> u32 {
        self.reward_id.unwrap_or(0)
    }

    pub fn clear_reward_id(&mut self) {
        self.reward_id = ::std::option::Option::None;
    }

    pub fn has_reward_id(&self) -> bool {
        self.reward_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reward_id(&mut self, v: u32) {
        self.reward_id = ::std::option::Option::Some(v);
    }

    // optional uint32 reward_option_id = 2;

    pub fn reward_option_id(&self) -> u32 {
        self.reward_option_id.unwrap_or(0)
    }

    pub fn clear_reward_option_id(&mut self) {
        self.reward_option_id = ::std::option::Option::None;
    }

    pub fn has_reward_option_id(&self) -> bool {
        self.reward_option_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reward_option_id(&mut self, v: u32) {
        self.reward_option_id = ::std::option::Option::Some(v);
    }

    // optional .ECandyShopRewardType reward_type = 4;

    pub fn reward_type(&self) -> ECandyShopRewardType {
        match self.reward_type {
            Some(e) => e.enum_value_or(ECandyShopRewardType::k_eCandyShopRewardType_None),
            None => ECandyShopRewardType::k_eCandyShopRewardType_None,
        }
    }

    pub fn clear_reward_type(&mut self) {
        self.reward_type = ::std::option::Option::None;
    }

    pub fn has_reward_type(&self) -> bool {
        self.reward_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reward_type(&mut self, v: ECandyShopRewardType) {
        self.reward_type = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgCandyShopReward {
    const NAME: &'static str = "CMsgCandyShopReward";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.reward_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.reward_option_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.price)?;
                },
                32 => {
                    self.reward_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                42 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.item_data)?;
                },
                50 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.event_action_data)?;
                },
                58 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.event_points_data)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.reward_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.reward_option_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.price.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.reward_type {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(4, v.value());
        }
        if let Some(v) = self.item_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.event_action_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.event_points_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.reward_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.reward_option_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.price.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.reward_type {
            os.write_enum(4, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.item_data.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.event_action_data.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.event_points_data.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgCandyShopReward {
        CMsgCandyShopReward::new()
    }

    fn clear(&mut self) {
        self.reward_id = ::std::option::Option::None;
        self.reward_option_id = ::std::option::Option::None;
        self.price.clear();
        self.reward_type = ::std::option::Option::None;
        self.item_data.clear();
        self.event_action_data.clear();
        self.event_points_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgCandyShopReward {
        static instance: CMsgCandyShopReward = CMsgCandyShopReward {
            reward_id: ::std::option::Option::None,
            reward_option_id: ::std::option::Option::None,
            price: ::steam_vent_proto_common::protobuf::MessageField::none(),
            reward_type: ::std::option::Option::None,
            item_data: ::steam_vent_proto_common::protobuf::MessageField::none(),
            event_action_data: ::steam_vent_proto_common::protobuf::MessageField::none(),
            event_points_data: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgCandyShopUserData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgCandyShopUserData {
    // message fields
    // @@protoc_insertion_point(field:CMsgCandyShopUserData.inventory_max)
    pub inventory_max: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgCandyShopUserData.inventory)
    pub inventory: ::steam_vent_proto_common::protobuf::MessageField<CMsgCandyShopCandyQuantity>,
    // @@protoc_insertion_point(field:CMsgCandyShopUserData.exchange_recipe_max)
    pub exchange_recipe_max: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgCandyShopUserData.exchange_reset_timestamp)
    pub exchange_reset_timestamp: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgCandyShopUserData.exchange_recipes)
    pub exchange_recipes: ::std::vec::Vec<CMsgCandyShopExchangeRecipe>,
    // @@protoc_insertion_point(field:CMsgCandyShopUserData.active_reward_max)
    pub active_reward_max: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgCandyShopUserData.active_rewards)
    pub active_rewards: ::std::vec::Vec<CMsgCandyShopReward>,
    // @@protoc_insertion_point(field:CMsgCandyShopUserData.reroll_charges_max)
    pub reroll_charges_max: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgCandyShopUserData.reroll_charges)
    pub reroll_charges: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgCandyShopUserData.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgCandyShopUserData {
    fn default() -> &'a CMsgCandyShopUserData {
        <CMsgCandyShopUserData as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgCandyShopUserData {
    pub fn new() -> CMsgCandyShopUserData {
        ::std::default::Default::default()
    }

    // optional uint32 inventory_max = 1;

    pub fn inventory_max(&self) -> u32 {
        self.inventory_max.unwrap_or(0)
    }

    pub fn clear_inventory_max(&mut self) {
        self.inventory_max = ::std::option::Option::None;
    }

    pub fn has_inventory_max(&self) -> bool {
        self.inventory_max.is_some()
    }

    // Param is passed by value, moved
    pub fn set_inventory_max(&mut self, v: u32) {
        self.inventory_max = ::std::option::Option::Some(v);
    }

    // optional uint32 exchange_recipe_max = 3;

    pub fn exchange_recipe_max(&self) -> u32 {
        self.exchange_recipe_max.unwrap_or(0)
    }

    pub fn clear_exchange_recipe_max(&mut self) {
        self.exchange_recipe_max = ::std::option::Option::None;
    }

    pub fn has_exchange_recipe_max(&self) -> bool {
        self.exchange_recipe_max.is_some()
    }

    // Param is passed by value, moved
    pub fn set_exchange_recipe_max(&mut self, v: u32) {
        self.exchange_recipe_max = ::std::option::Option::Some(v);
    }

    // optional fixed32 exchange_reset_timestamp = 4;

    pub fn exchange_reset_timestamp(&self) -> u32 {
        self.exchange_reset_timestamp.unwrap_or(0)
    }

    pub fn clear_exchange_reset_timestamp(&mut self) {
        self.exchange_reset_timestamp = ::std::option::Option::None;
    }

    pub fn has_exchange_reset_timestamp(&self) -> bool {
        self.exchange_reset_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_exchange_reset_timestamp(&mut self, v: u32) {
        self.exchange_reset_timestamp = ::std::option::Option::Some(v);
    }

    // optional uint32 active_reward_max = 6;

    pub fn active_reward_max(&self) -> u32 {
        self.active_reward_max.unwrap_or(0)
    }

    pub fn clear_active_reward_max(&mut self) {
        self.active_reward_max = ::std::option::Option::None;
    }

    pub fn has_active_reward_max(&self) -> bool {
        self.active_reward_max.is_some()
    }

    // Param is passed by value, moved
    pub fn set_active_reward_max(&mut self, v: u32) {
        self.active_reward_max = ::std::option::Option::Some(v);
    }

    // optional uint32 reroll_charges_max = 8;

    pub fn reroll_charges_max(&self) -> u32 {
        self.reroll_charges_max.unwrap_or(0)
    }

    pub fn clear_reroll_charges_max(&mut self) {
        self.reroll_charges_max = ::std::option::Option::None;
    }

    pub fn has_reroll_charges_max(&self) -> bool {
        self.reroll_charges_max.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reroll_charges_max(&mut self, v: u32) {
        self.reroll_charges_max = ::std::option::Option::Some(v);
    }

    // optional uint32 reroll_charges = 9;

    pub fn reroll_charges(&self) -> u32 {
        self.reroll_charges.unwrap_or(0)
    }

    pub fn clear_reroll_charges(&mut self) {
        self.reroll_charges = ::std::option::Option::None;
    }

    pub fn has_reroll_charges(&self) -> bool {
        self.reroll_charges.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reroll_charges(&mut self, v: u32) {
        self.reroll_charges = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgCandyShopUserData {
    const NAME: &'static str = "CMsgCandyShopUserData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.inventory_max = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.inventory)?;
                },
                24 => {
                    self.exchange_recipe_max = ::std::option::Option::Some(is.read_uint32()?);
                },
                37 => {
                    self.exchange_reset_timestamp = ::std::option::Option::Some(is.read_fixed32()?);
                },
                42 => {
                    self.exchange_recipes.push(is.read_message()?);
                },
                48 => {
                    self.active_reward_max = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    self.active_rewards.push(is.read_message()?);
                },
                64 => {
                    self.reroll_charges_max = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.reroll_charges = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.inventory_max {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.inventory.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.exchange_recipe_max {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.exchange_reset_timestamp {
            my_size += 1 + 4;
        }
        for value in &self.exchange_recipes {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.active_reward_max {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(6, v);
        }
        for value in &self.active_rewards {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.reroll_charges_max {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.reroll_charges {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(9, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.inventory_max {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.inventory.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.exchange_recipe_max {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.exchange_reset_timestamp {
            os.write_fixed32(4, v)?;
        }
        for v in &self.exchange_recipes {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if let Some(v) = self.active_reward_max {
            os.write_uint32(6, v)?;
        }
        for v in &self.active_rewards {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        if let Some(v) = self.reroll_charges_max {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.reroll_charges {
            os.write_uint32(9, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgCandyShopUserData {
        CMsgCandyShopUserData::new()
    }

    fn clear(&mut self) {
        self.inventory_max = ::std::option::Option::None;
        self.inventory.clear();
        self.exchange_recipe_max = ::std::option::Option::None;
        self.exchange_reset_timestamp = ::std::option::Option::None;
        self.exchange_recipes.clear();
        self.active_reward_max = ::std::option::Option::None;
        self.active_rewards.clear();
        self.reroll_charges_max = ::std::option::Option::None;
        self.reroll_charges = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgCandyShopUserData {
        static instance: CMsgCandyShopUserData = CMsgCandyShopUserData {
            inventory_max: ::std::option::Option::None,
            inventory: ::steam_vent_proto_common::protobuf::MessageField::none(),
            exchange_recipe_max: ::std::option::Option::None,
            exchange_reset_timestamp: ::std::option::Option::None,
            exchange_recipes: ::std::vec::Vec::new(),
            active_reward_max: ::std::option::Option::None,
            active_rewards: ::std::vec::Vec::new(),
            reroll_charges_max: ::std::option::Option::None,
            reroll_charges: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCCandyShopGetUserData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCCandyShopGetUserData {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCCandyShopGetUserData.candy_shop_id)
    pub candy_shop_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCCandyShopGetUserData.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCCandyShopGetUserData {
    fn default() -> &'a CMsgClientToGCCandyShopGetUserData {
        <CMsgClientToGCCandyShopGetUserData as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCCandyShopGetUserData {
    pub fn new() -> CMsgClientToGCCandyShopGetUserData {
        ::std::default::Default::default()
    }

    // optional uint32 candy_shop_id = 1;

    pub fn candy_shop_id(&self) -> u32 {
        self.candy_shop_id.unwrap_or(0)
    }

    pub fn clear_candy_shop_id(&mut self) {
        self.candy_shop_id = ::std::option::Option::None;
    }

    pub fn has_candy_shop_id(&self) -> bool {
        self.candy_shop_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_candy_shop_id(&mut self, v: u32) {
        self.candy_shop_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCCandyShopGetUserData {
    const NAME: &'static str = "CMsgClientToGCCandyShopGetUserData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.candy_shop_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.candy_shop_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.candy_shop_id {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCCandyShopGetUserData {
        CMsgClientToGCCandyShopGetUserData::new()
    }

    fn clear(&mut self) {
        self.candy_shop_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCCandyShopGetUserData {
        static instance: CMsgClientToGCCandyShopGetUserData = CMsgClientToGCCandyShopGetUserData {
            candy_shop_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCCandyShopGetUserDataResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCCandyShopGetUserDataResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCCandyShopGetUserDataResponse.response)
    pub response: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_client_to_gccandy_shop_get_user_data_response::EResponse>>,
    // @@protoc_insertion_point(field:CMsgClientToGCCandyShopGetUserDataResponse.user_data)
    pub user_data: ::steam_vent_proto_common::protobuf::MessageField<CMsgCandyShopUserData>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCCandyShopGetUserDataResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCCandyShopGetUserDataResponse {
    fn default() -> &'a CMsgClientToGCCandyShopGetUserDataResponse {
        <CMsgClientToGCCandyShopGetUserDataResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCCandyShopGetUserDataResponse {
    pub fn new() -> CMsgClientToGCCandyShopGetUserDataResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgClientToGCCandyShopGetUserDataResponse.EResponse response = 1;

    pub fn response(&self) -> cmsg_client_to_gccandy_shop_get_user_data_response::EResponse {
        match self.response {
            Some(e) => e.enum_value_or(cmsg_client_to_gccandy_shop_get_user_data_response::EResponse::k_eInternalError),
            None => cmsg_client_to_gccandy_shop_get_user_data_response::EResponse::k_eInternalError,
        }
    }

    pub fn clear_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: cmsg_client_to_gccandy_shop_get_user_data_response::EResponse) {
        self.response = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCCandyShopGetUserDataResponse {
    const NAME: &'static str = "CMsgClientToGCCandyShopGetUserDataResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.response = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.user_data)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.response {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.user_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.response {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.user_data.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCCandyShopGetUserDataResponse {
        CMsgClientToGCCandyShopGetUserDataResponse::new()
    }

    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.user_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCCandyShopGetUserDataResponse {
        static instance: CMsgClientToGCCandyShopGetUserDataResponse = CMsgClientToGCCandyShopGetUserDataResponse {
            response: ::std::option::Option::None,
            user_data: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientToGCCandyShopGetUserDataResponse`
pub mod cmsg_client_to_gccandy_shop_get_user_data_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgClientToGCCandyShopGetUserDataResponse.EResponse)
    pub enum EResponse {
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopGetUserDataResponse.EResponse.k_eInternalError)
        k_eInternalError = 0,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopGetUserDataResponse.EResponse.k_eSuccess)
        k_eSuccess = 1,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopGetUserDataResponse.EResponse.k_eTooBusy)
        k_eTooBusy = 2,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopGetUserDataResponse.EResponse.k_eDisabled)
        k_eDisabled = 3,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopGetUserDataResponse.EResponse.k_eTimeout)
        k_eTimeout = 4,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopGetUserDataResponse.EResponse.k_eInvalidShop)
        k_eInvalidShop = 5,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopGetUserDataResponse.EResponse.k_eExpiredShop)
        k_eExpiredShop = 6,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for EResponse {
        const NAME: &'static str = "EResponse";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EResponse> {
            match value {
                0 => ::std::option::Option::Some(EResponse::k_eInternalError),
                1 => ::std::option::Option::Some(EResponse::k_eSuccess),
                2 => ::std::option::Option::Some(EResponse::k_eTooBusy),
                3 => ::std::option::Option::Some(EResponse::k_eDisabled),
                4 => ::std::option::Option::Some(EResponse::k_eTimeout),
                5 => ::std::option::Option::Some(EResponse::k_eInvalidShop),
                6 => ::std::option::Option::Some(EResponse::k_eExpiredShop),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EResponse> {
            match str {
                "k_eInternalError" => ::std::option::Option::Some(EResponse::k_eInternalError),
                "k_eSuccess" => ::std::option::Option::Some(EResponse::k_eSuccess),
                "k_eTooBusy" => ::std::option::Option::Some(EResponse::k_eTooBusy),
                "k_eDisabled" => ::std::option::Option::Some(EResponse::k_eDisabled),
                "k_eTimeout" => ::std::option::Option::Some(EResponse::k_eTimeout),
                "k_eInvalidShop" => ::std::option::Option::Some(EResponse::k_eInvalidShop),
                "k_eExpiredShop" => ::std::option::Option::Some(EResponse::k_eExpiredShop),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EResponse] = &[
            EResponse::k_eInternalError,
            EResponse::k_eSuccess,
            EResponse::k_eTooBusy,
            EResponse::k_eDisabled,
            EResponse::k_eTimeout,
            EResponse::k_eInvalidShop,
            EResponse::k_eExpiredShop,
        ];
    }

    impl ::std::default::Default for EResponse {
        fn default() -> Self {
            EResponse::k_eInternalError
        }
    }

}

// @@protoc_insertion_point(message:CMsgGCToClientCandyShopUserDataUpdated)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCToClientCandyShopUserDataUpdated {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCToClientCandyShopUserDataUpdated.candy_shop_id)
    pub candy_shop_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCToClientCandyShopUserDataUpdated.user_data)
    pub user_data: ::steam_vent_proto_common::protobuf::MessageField<CMsgCandyShopUserData>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCToClientCandyShopUserDataUpdated.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCToClientCandyShopUserDataUpdated {
    fn default() -> &'a CMsgGCToClientCandyShopUserDataUpdated {
        <CMsgGCToClientCandyShopUserDataUpdated as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCToClientCandyShopUserDataUpdated {
    pub fn new() -> CMsgGCToClientCandyShopUserDataUpdated {
        ::std::default::Default::default()
    }

    // optional uint32 candy_shop_id = 1;

    pub fn candy_shop_id(&self) -> u32 {
        self.candy_shop_id.unwrap_or(0)
    }

    pub fn clear_candy_shop_id(&mut self) {
        self.candy_shop_id = ::std::option::Option::None;
    }

    pub fn has_candy_shop_id(&self) -> bool {
        self.candy_shop_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_candy_shop_id(&mut self, v: u32) {
        self.candy_shop_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCToClientCandyShopUserDataUpdated {
    const NAME: &'static str = "CMsgGCToClientCandyShopUserDataUpdated";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.candy_shop_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.user_data)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.candy_shop_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.user_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.candy_shop_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.user_data.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCToClientCandyShopUserDataUpdated {
        CMsgGCToClientCandyShopUserDataUpdated::new()
    }

    fn clear(&mut self) {
        self.candy_shop_id = ::std::option::Option::None;
        self.user_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCToClientCandyShopUserDataUpdated {
        static instance: CMsgGCToClientCandyShopUserDataUpdated = CMsgGCToClientCandyShopUserDataUpdated {
            candy_shop_id: ::std::option::Option::None,
            user_data: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCCandyShopPurchaseReward)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCCandyShopPurchaseReward {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCCandyShopPurchaseReward.candy_shop_id)
    pub candy_shop_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientToGCCandyShopPurchaseReward.reward_id)
    pub reward_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCCandyShopPurchaseReward.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCCandyShopPurchaseReward {
    fn default() -> &'a CMsgClientToGCCandyShopPurchaseReward {
        <CMsgClientToGCCandyShopPurchaseReward as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCCandyShopPurchaseReward {
    pub fn new() -> CMsgClientToGCCandyShopPurchaseReward {
        ::std::default::Default::default()
    }

    // optional uint32 candy_shop_id = 1;

    pub fn candy_shop_id(&self) -> u32 {
        self.candy_shop_id.unwrap_or(0)
    }

    pub fn clear_candy_shop_id(&mut self) {
        self.candy_shop_id = ::std::option::Option::None;
    }

    pub fn has_candy_shop_id(&self) -> bool {
        self.candy_shop_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_candy_shop_id(&mut self, v: u32) {
        self.candy_shop_id = ::std::option::Option::Some(v);
    }

    // optional uint64 reward_id = 2;

    pub fn reward_id(&self) -> u64 {
        self.reward_id.unwrap_or(0)
    }

    pub fn clear_reward_id(&mut self) {
        self.reward_id = ::std::option::Option::None;
    }

    pub fn has_reward_id(&self) -> bool {
        self.reward_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reward_id(&mut self, v: u64) {
        self.reward_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCCandyShopPurchaseReward {
    const NAME: &'static str = "CMsgClientToGCCandyShopPurchaseReward";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.candy_shop_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.reward_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.candy_shop_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.reward_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.candy_shop_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.reward_id {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCCandyShopPurchaseReward {
        CMsgClientToGCCandyShopPurchaseReward::new()
    }

    fn clear(&mut self) {
        self.candy_shop_id = ::std::option::Option::None;
        self.reward_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCCandyShopPurchaseReward {
        static instance: CMsgClientToGCCandyShopPurchaseReward = CMsgClientToGCCandyShopPurchaseReward {
            candy_shop_id: ::std::option::Option::None,
            reward_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCCandyShopPurchaseRewardResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCCandyShopPurchaseRewardResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCCandyShopPurchaseRewardResponse.response)
    pub response: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_client_to_gccandy_shop_purchase_reward_response::EResponse>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCCandyShopPurchaseRewardResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCCandyShopPurchaseRewardResponse {
    fn default() -> &'a CMsgClientToGCCandyShopPurchaseRewardResponse {
        <CMsgClientToGCCandyShopPurchaseRewardResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCCandyShopPurchaseRewardResponse {
    pub fn new() -> CMsgClientToGCCandyShopPurchaseRewardResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgClientToGCCandyShopPurchaseRewardResponse.EResponse response = 1;

    pub fn response(&self) -> cmsg_client_to_gccandy_shop_purchase_reward_response::EResponse {
        match self.response {
            Some(e) => e.enum_value_or(cmsg_client_to_gccandy_shop_purchase_reward_response::EResponse::k_eInternalError),
            None => cmsg_client_to_gccandy_shop_purchase_reward_response::EResponse::k_eInternalError,
        }
    }

    pub fn clear_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: cmsg_client_to_gccandy_shop_purchase_reward_response::EResponse) {
        self.response = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCCandyShopPurchaseRewardResponse {
    const NAME: &'static str = "CMsgClientToGCCandyShopPurchaseRewardResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.response = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.response {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.response {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCCandyShopPurchaseRewardResponse {
        CMsgClientToGCCandyShopPurchaseRewardResponse::new()
    }

    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCCandyShopPurchaseRewardResponse {
        static instance: CMsgClientToGCCandyShopPurchaseRewardResponse = CMsgClientToGCCandyShopPurchaseRewardResponse {
            response: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientToGCCandyShopPurchaseRewardResponse`
pub mod cmsg_client_to_gccandy_shop_purchase_reward_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgClientToGCCandyShopPurchaseRewardResponse.EResponse)
    pub enum EResponse {
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopPurchaseRewardResponse.EResponse.k_eInternalError)
        k_eInternalError = 0,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopPurchaseRewardResponse.EResponse.k_eSuccess)
        k_eSuccess = 1,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopPurchaseRewardResponse.EResponse.k_eTooBusy)
        k_eTooBusy = 2,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopPurchaseRewardResponse.EResponse.k_eDisabled)
        k_eDisabled = 3,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopPurchaseRewardResponse.EResponse.k_eTimeout)
        k_eTimeout = 4,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopPurchaseRewardResponse.EResponse.k_eInvalidShop)
        k_eInvalidShop = 5,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopPurchaseRewardResponse.EResponse.k_eInvalidReward)
        k_eInvalidReward = 6,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopPurchaseRewardResponse.EResponse.k_eNotEnoughCandy)
        k_eNotEnoughCandy = 7,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopPurchaseRewardResponse.EResponse.k_eExpiredShop)
        k_eExpiredShop = 8,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for EResponse {
        const NAME: &'static str = "EResponse";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EResponse> {
            match value {
                0 => ::std::option::Option::Some(EResponse::k_eInternalError),
                1 => ::std::option::Option::Some(EResponse::k_eSuccess),
                2 => ::std::option::Option::Some(EResponse::k_eTooBusy),
                3 => ::std::option::Option::Some(EResponse::k_eDisabled),
                4 => ::std::option::Option::Some(EResponse::k_eTimeout),
                5 => ::std::option::Option::Some(EResponse::k_eInvalidShop),
                6 => ::std::option::Option::Some(EResponse::k_eInvalidReward),
                7 => ::std::option::Option::Some(EResponse::k_eNotEnoughCandy),
                8 => ::std::option::Option::Some(EResponse::k_eExpiredShop),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EResponse> {
            match str {
                "k_eInternalError" => ::std::option::Option::Some(EResponse::k_eInternalError),
                "k_eSuccess" => ::std::option::Option::Some(EResponse::k_eSuccess),
                "k_eTooBusy" => ::std::option::Option::Some(EResponse::k_eTooBusy),
                "k_eDisabled" => ::std::option::Option::Some(EResponse::k_eDisabled),
                "k_eTimeout" => ::std::option::Option::Some(EResponse::k_eTimeout),
                "k_eInvalidShop" => ::std::option::Option::Some(EResponse::k_eInvalidShop),
                "k_eInvalidReward" => ::std::option::Option::Some(EResponse::k_eInvalidReward),
                "k_eNotEnoughCandy" => ::std::option::Option::Some(EResponse::k_eNotEnoughCandy),
                "k_eExpiredShop" => ::std::option::Option::Some(EResponse::k_eExpiredShop),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EResponse] = &[
            EResponse::k_eInternalError,
            EResponse::k_eSuccess,
            EResponse::k_eTooBusy,
            EResponse::k_eDisabled,
            EResponse::k_eTimeout,
            EResponse::k_eInvalidShop,
            EResponse::k_eInvalidReward,
            EResponse::k_eNotEnoughCandy,
            EResponse::k_eExpiredShop,
        ];
    }

    impl ::std::default::Default for EResponse {
        fn default() -> Self {
            EResponse::k_eInternalError
        }
    }

}

// @@protoc_insertion_point(message:CMsgClientToGCCandyShopOpenBags)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCCandyShopOpenBags {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCCandyShopOpenBags.candy_shop_id)
    pub candy_shop_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientToGCCandyShopOpenBags.bag_count)
    pub bag_count: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCCandyShopOpenBags.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCCandyShopOpenBags {
    fn default() -> &'a CMsgClientToGCCandyShopOpenBags {
        <CMsgClientToGCCandyShopOpenBags as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCCandyShopOpenBags {
    pub fn new() -> CMsgClientToGCCandyShopOpenBags {
        ::std::default::Default::default()
    }

    // optional uint32 candy_shop_id = 1;

    pub fn candy_shop_id(&self) -> u32 {
        self.candy_shop_id.unwrap_or(0)
    }

    pub fn clear_candy_shop_id(&mut self) {
        self.candy_shop_id = ::std::option::Option::None;
    }

    pub fn has_candy_shop_id(&self) -> bool {
        self.candy_shop_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_candy_shop_id(&mut self, v: u32) {
        self.candy_shop_id = ::std::option::Option::Some(v);
    }

    // optional uint32 bag_count = 2;

    pub fn bag_count(&self) -> u32 {
        self.bag_count.unwrap_or(0)
    }

    pub fn clear_bag_count(&mut self) {
        self.bag_count = ::std::option::Option::None;
    }

    pub fn has_bag_count(&self) -> bool {
        self.bag_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bag_count(&mut self, v: u32) {
        self.bag_count = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCCandyShopOpenBags {
    const NAME: &'static str = "CMsgClientToGCCandyShopOpenBags";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.candy_shop_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.bag_count = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.candy_shop_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.bag_count {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.candy_shop_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.bag_count {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCCandyShopOpenBags {
        CMsgClientToGCCandyShopOpenBags::new()
    }

    fn clear(&mut self) {
        self.candy_shop_id = ::std::option::Option::None;
        self.bag_count = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCCandyShopOpenBags {
        static instance: CMsgClientToGCCandyShopOpenBags = CMsgClientToGCCandyShopOpenBags {
            candy_shop_id: ::std::option::Option::None,
            bag_count: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCCandyShopOpenBagsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCCandyShopOpenBagsResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCCandyShopOpenBagsResponse.response)
    pub response: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_client_to_gccandy_shop_open_bags_response::EResponse>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCCandyShopOpenBagsResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCCandyShopOpenBagsResponse {
    fn default() -> &'a CMsgClientToGCCandyShopOpenBagsResponse {
        <CMsgClientToGCCandyShopOpenBagsResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCCandyShopOpenBagsResponse {
    pub fn new() -> CMsgClientToGCCandyShopOpenBagsResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgClientToGCCandyShopOpenBagsResponse.EResponse response = 1;

    pub fn response(&self) -> cmsg_client_to_gccandy_shop_open_bags_response::EResponse {
        match self.response {
            Some(e) => e.enum_value_or(cmsg_client_to_gccandy_shop_open_bags_response::EResponse::k_eInternalError),
            None => cmsg_client_to_gccandy_shop_open_bags_response::EResponse::k_eInternalError,
        }
    }

    pub fn clear_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: cmsg_client_to_gccandy_shop_open_bags_response::EResponse) {
        self.response = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCCandyShopOpenBagsResponse {
    const NAME: &'static str = "CMsgClientToGCCandyShopOpenBagsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.response = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.response {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.response {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCCandyShopOpenBagsResponse {
        CMsgClientToGCCandyShopOpenBagsResponse::new()
    }

    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCCandyShopOpenBagsResponse {
        static instance: CMsgClientToGCCandyShopOpenBagsResponse = CMsgClientToGCCandyShopOpenBagsResponse {
            response: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientToGCCandyShopOpenBagsResponse`
pub mod cmsg_client_to_gccandy_shop_open_bags_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgClientToGCCandyShopOpenBagsResponse.EResponse)
    pub enum EResponse {
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopOpenBagsResponse.EResponse.k_eInternalError)
        k_eInternalError = 0,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopOpenBagsResponse.EResponse.k_eSuccess)
        k_eSuccess = 1,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopOpenBagsResponse.EResponse.k_eTooBusy)
        k_eTooBusy = 2,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopOpenBagsResponse.EResponse.k_eDisabled)
        k_eDisabled = 3,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopOpenBagsResponse.EResponse.k_eTimeout)
        k_eTimeout = 4,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopOpenBagsResponse.EResponse.k_eInvalidShop)
        k_eInvalidShop = 5,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopOpenBagsResponse.EResponse.k_eInvalidItem)
        k_eInvalidItem = 6,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopOpenBagsResponse.EResponse.k_eNotEnoughBags)
        k_eNotEnoughBags = 7,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopOpenBagsResponse.EResponse.k_eNotEnoughSpace)
        k_eNotEnoughSpace = 8,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopOpenBagsResponse.EResponse.k_eExpiredShop)
        k_eExpiredShop = 9,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for EResponse {
        const NAME: &'static str = "EResponse";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EResponse> {
            match value {
                0 => ::std::option::Option::Some(EResponse::k_eInternalError),
                1 => ::std::option::Option::Some(EResponse::k_eSuccess),
                2 => ::std::option::Option::Some(EResponse::k_eTooBusy),
                3 => ::std::option::Option::Some(EResponse::k_eDisabled),
                4 => ::std::option::Option::Some(EResponse::k_eTimeout),
                5 => ::std::option::Option::Some(EResponse::k_eInvalidShop),
                6 => ::std::option::Option::Some(EResponse::k_eInvalidItem),
                7 => ::std::option::Option::Some(EResponse::k_eNotEnoughBags),
                8 => ::std::option::Option::Some(EResponse::k_eNotEnoughSpace),
                9 => ::std::option::Option::Some(EResponse::k_eExpiredShop),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EResponse> {
            match str {
                "k_eInternalError" => ::std::option::Option::Some(EResponse::k_eInternalError),
                "k_eSuccess" => ::std::option::Option::Some(EResponse::k_eSuccess),
                "k_eTooBusy" => ::std::option::Option::Some(EResponse::k_eTooBusy),
                "k_eDisabled" => ::std::option::Option::Some(EResponse::k_eDisabled),
                "k_eTimeout" => ::std::option::Option::Some(EResponse::k_eTimeout),
                "k_eInvalidShop" => ::std::option::Option::Some(EResponse::k_eInvalidShop),
                "k_eInvalidItem" => ::std::option::Option::Some(EResponse::k_eInvalidItem),
                "k_eNotEnoughBags" => ::std::option::Option::Some(EResponse::k_eNotEnoughBags),
                "k_eNotEnoughSpace" => ::std::option::Option::Some(EResponse::k_eNotEnoughSpace),
                "k_eExpiredShop" => ::std::option::Option::Some(EResponse::k_eExpiredShop),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EResponse] = &[
            EResponse::k_eInternalError,
            EResponse::k_eSuccess,
            EResponse::k_eTooBusy,
            EResponse::k_eDisabled,
            EResponse::k_eTimeout,
            EResponse::k_eInvalidShop,
            EResponse::k_eInvalidItem,
            EResponse::k_eNotEnoughBags,
            EResponse::k_eNotEnoughSpace,
            EResponse::k_eExpiredShop,
        ];
    }

    impl ::std::default::Default for EResponse {
        fn default() -> Self {
            EResponse::k_eInternalError
        }
    }

}

// @@protoc_insertion_point(message:CMsgClientToGCCandyShopDoExchange)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCCandyShopDoExchange {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCCandyShopDoExchange.candy_shop_id)
    pub candy_shop_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientToGCCandyShopDoExchange.recipe_id)
    pub recipe_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCCandyShopDoExchange.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCCandyShopDoExchange {
    fn default() -> &'a CMsgClientToGCCandyShopDoExchange {
        <CMsgClientToGCCandyShopDoExchange as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCCandyShopDoExchange {
    pub fn new() -> CMsgClientToGCCandyShopDoExchange {
        ::std::default::Default::default()
    }

    // optional uint32 candy_shop_id = 1;

    pub fn candy_shop_id(&self) -> u32 {
        self.candy_shop_id.unwrap_or(0)
    }

    pub fn clear_candy_shop_id(&mut self) {
        self.candy_shop_id = ::std::option::Option::None;
    }

    pub fn has_candy_shop_id(&self) -> bool {
        self.candy_shop_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_candy_shop_id(&mut self, v: u32) {
        self.candy_shop_id = ::std::option::Option::Some(v);
    }

    // optional uint32 recipe_id = 2;

    pub fn recipe_id(&self) -> u32 {
        self.recipe_id.unwrap_or(0)
    }

    pub fn clear_recipe_id(&mut self) {
        self.recipe_id = ::std::option::Option::None;
    }

    pub fn has_recipe_id(&self) -> bool {
        self.recipe_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recipe_id(&mut self, v: u32) {
        self.recipe_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCCandyShopDoExchange {
    const NAME: &'static str = "CMsgClientToGCCandyShopDoExchange";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.candy_shop_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.recipe_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.candy_shop_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.recipe_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.candy_shop_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.recipe_id {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCCandyShopDoExchange {
        CMsgClientToGCCandyShopDoExchange::new()
    }

    fn clear(&mut self) {
        self.candy_shop_id = ::std::option::Option::None;
        self.recipe_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCCandyShopDoExchange {
        static instance: CMsgClientToGCCandyShopDoExchange = CMsgClientToGCCandyShopDoExchange {
            candy_shop_id: ::std::option::Option::None,
            recipe_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCCandyShopDoExchangeResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCCandyShopDoExchangeResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCCandyShopDoExchangeResponse.response)
    pub response: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_client_to_gccandy_shop_do_exchange_response::EResponse>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCCandyShopDoExchangeResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCCandyShopDoExchangeResponse {
    fn default() -> &'a CMsgClientToGCCandyShopDoExchangeResponse {
        <CMsgClientToGCCandyShopDoExchangeResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCCandyShopDoExchangeResponse {
    pub fn new() -> CMsgClientToGCCandyShopDoExchangeResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgClientToGCCandyShopDoExchangeResponse.EResponse response = 1;

    pub fn response(&self) -> cmsg_client_to_gccandy_shop_do_exchange_response::EResponse {
        match self.response {
            Some(e) => e.enum_value_or(cmsg_client_to_gccandy_shop_do_exchange_response::EResponse::k_eInternalError),
            None => cmsg_client_to_gccandy_shop_do_exchange_response::EResponse::k_eInternalError,
        }
    }

    pub fn clear_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: cmsg_client_to_gccandy_shop_do_exchange_response::EResponse) {
        self.response = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCCandyShopDoExchangeResponse {
    const NAME: &'static str = "CMsgClientToGCCandyShopDoExchangeResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.response = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.response {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.response {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCCandyShopDoExchangeResponse {
        CMsgClientToGCCandyShopDoExchangeResponse::new()
    }

    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCCandyShopDoExchangeResponse {
        static instance: CMsgClientToGCCandyShopDoExchangeResponse = CMsgClientToGCCandyShopDoExchangeResponse {
            response: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientToGCCandyShopDoExchangeResponse`
pub mod cmsg_client_to_gccandy_shop_do_exchange_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgClientToGCCandyShopDoExchangeResponse.EResponse)
    pub enum EResponse {
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopDoExchangeResponse.EResponse.k_eInternalError)
        k_eInternalError = 0,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopDoExchangeResponse.EResponse.k_eSuccess)
        k_eSuccess = 1,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopDoExchangeResponse.EResponse.k_eTooBusy)
        k_eTooBusy = 2,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopDoExchangeResponse.EResponse.k_eDisabled)
        k_eDisabled = 3,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopDoExchangeResponse.EResponse.k_eTimeout)
        k_eTimeout = 4,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopDoExchangeResponse.EResponse.k_eInvalidShop)
        k_eInvalidShop = 5,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopDoExchangeResponse.EResponse.k_eNotEnoughCandy)
        k_eNotEnoughCandy = 6,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopDoExchangeResponse.EResponse.k_eInvalidRecipe)
        k_eInvalidRecipe = 7,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopDoExchangeResponse.EResponse.k_eNotEnoughSpace)
        k_eNotEnoughSpace = 8,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopDoExchangeResponse.EResponse.k_eExpiredShop)
        k_eExpiredShop = 9,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for EResponse {
        const NAME: &'static str = "EResponse";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EResponse> {
            match value {
                0 => ::std::option::Option::Some(EResponse::k_eInternalError),
                1 => ::std::option::Option::Some(EResponse::k_eSuccess),
                2 => ::std::option::Option::Some(EResponse::k_eTooBusy),
                3 => ::std::option::Option::Some(EResponse::k_eDisabled),
                4 => ::std::option::Option::Some(EResponse::k_eTimeout),
                5 => ::std::option::Option::Some(EResponse::k_eInvalidShop),
                6 => ::std::option::Option::Some(EResponse::k_eNotEnoughCandy),
                7 => ::std::option::Option::Some(EResponse::k_eInvalidRecipe),
                8 => ::std::option::Option::Some(EResponse::k_eNotEnoughSpace),
                9 => ::std::option::Option::Some(EResponse::k_eExpiredShop),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EResponse> {
            match str {
                "k_eInternalError" => ::std::option::Option::Some(EResponse::k_eInternalError),
                "k_eSuccess" => ::std::option::Option::Some(EResponse::k_eSuccess),
                "k_eTooBusy" => ::std::option::Option::Some(EResponse::k_eTooBusy),
                "k_eDisabled" => ::std::option::Option::Some(EResponse::k_eDisabled),
                "k_eTimeout" => ::std::option::Option::Some(EResponse::k_eTimeout),
                "k_eInvalidShop" => ::std::option::Option::Some(EResponse::k_eInvalidShop),
                "k_eNotEnoughCandy" => ::std::option::Option::Some(EResponse::k_eNotEnoughCandy),
                "k_eInvalidRecipe" => ::std::option::Option::Some(EResponse::k_eInvalidRecipe),
                "k_eNotEnoughSpace" => ::std::option::Option::Some(EResponse::k_eNotEnoughSpace),
                "k_eExpiredShop" => ::std::option::Option::Some(EResponse::k_eExpiredShop),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EResponse] = &[
            EResponse::k_eInternalError,
            EResponse::k_eSuccess,
            EResponse::k_eTooBusy,
            EResponse::k_eDisabled,
            EResponse::k_eTimeout,
            EResponse::k_eInvalidShop,
            EResponse::k_eNotEnoughCandy,
            EResponse::k_eInvalidRecipe,
            EResponse::k_eNotEnoughSpace,
            EResponse::k_eExpiredShop,
        ];
    }

    impl ::std::default::Default for EResponse {
        fn default() -> Self {
            EResponse::k_eInternalError
        }
    }

}

// @@protoc_insertion_point(message:CMsgClientToGCCandyShopDoVariableExchange)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCCandyShopDoVariableExchange {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCCandyShopDoVariableExchange.candy_shop_id)
    pub candy_shop_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientToGCCandyShopDoVariableExchange.input)
    pub input: ::steam_vent_proto_common::protobuf::MessageField<CMsgCandyShopCandyQuantity>,
    // @@protoc_insertion_point(field:CMsgClientToGCCandyShopDoVariableExchange.output)
    pub output: ::steam_vent_proto_common::protobuf::MessageField<CMsgCandyShopCandyQuantity>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCCandyShopDoVariableExchange.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCCandyShopDoVariableExchange {
    fn default() -> &'a CMsgClientToGCCandyShopDoVariableExchange {
        <CMsgClientToGCCandyShopDoVariableExchange as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCCandyShopDoVariableExchange {
    pub fn new() -> CMsgClientToGCCandyShopDoVariableExchange {
        ::std::default::Default::default()
    }

    // optional uint32 candy_shop_id = 1;

    pub fn candy_shop_id(&self) -> u32 {
        self.candy_shop_id.unwrap_or(0)
    }

    pub fn clear_candy_shop_id(&mut self) {
        self.candy_shop_id = ::std::option::Option::None;
    }

    pub fn has_candy_shop_id(&self) -> bool {
        self.candy_shop_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_candy_shop_id(&mut self, v: u32) {
        self.candy_shop_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCCandyShopDoVariableExchange {
    const NAME: &'static str = "CMsgClientToGCCandyShopDoVariableExchange";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.candy_shop_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.input)?;
                },
                26 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.output)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.candy_shop_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.input.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.output.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.candy_shop_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.input.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.output.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCCandyShopDoVariableExchange {
        CMsgClientToGCCandyShopDoVariableExchange::new()
    }

    fn clear(&mut self) {
        self.candy_shop_id = ::std::option::Option::None;
        self.input.clear();
        self.output.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCCandyShopDoVariableExchange {
        static instance: CMsgClientToGCCandyShopDoVariableExchange = CMsgClientToGCCandyShopDoVariableExchange {
            candy_shop_id: ::std::option::Option::None,
            input: ::steam_vent_proto_common::protobuf::MessageField::none(),
            output: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCCandyShopDoVariableExchangeResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCCandyShopDoVariableExchangeResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCCandyShopDoVariableExchangeResponse.response)
    pub response: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_client_to_gccandy_shop_do_variable_exchange_response::EResponse>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCCandyShopDoVariableExchangeResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCCandyShopDoVariableExchangeResponse {
    fn default() -> &'a CMsgClientToGCCandyShopDoVariableExchangeResponse {
        <CMsgClientToGCCandyShopDoVariableExchangeResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCCandyShopDoVariableExchangeResponse {
    pub fn new() -> CMsgClientToGCCandyShopDoVariableExchangeResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgClientToGCCandyShopDoVariableExchangeResponse.EResponse response = 1;

    pub fn response(&self) -> cmsg_client_to_gccandy_shop_do_variable_exchange_response::EResponse {
        match self.response {
            Some(e) => e.enum_value_or(cmsg_client_to_gccandy_shop_do_variable_exchange_response::EResponse::k_eInternalError),
            None => cmsg_client_to_gccandy_shop_do_variable_exchange_response::EResponse::k_eInternalError,
        }
    }

    pub fn clear_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: cmsg_client_to_gccandy_shop_do_variable_exchange_response::EResponse) {
        self.response = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCCandyShopDoVariableExchangeResponse {
    const NAME: &'static str = "CMsgClientToGCCandyShopDoVariableExchangeResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.response = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.response {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.response {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCCandyShopDoVariableExchangeResponse {
        CMsgClientToGCCandyShopDoVariableExchangeResponse::new()
    }

    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCCandyShopDoVariableExchangeResponse {
        static instance: CMsgClientToGCCandyShopDoVariableExchangeResponse = CMsgClientToGCCandyShopDoVariableExchangeResponse {
            response: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientToGCCandyShopDoVariableExchangeResponse`
pub mod cmsg_client_to_gccandy_shop_do_variable_exchange_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgClientToGCCandyShopDoVariableExchangeResponse.EResponse)
    pub enum EResponse {
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopDoVariableExchangeResponse.EResponse.k_eInternalError)
        k_eInternalError = 0,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopDoVariableExchangeResponse.EResponse.k_eSuccess)
        k_eSuccess = 1,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopDoVariableExchangeResponse.EResponse.k_eTooBusy)
        k_eTooBusy = 2,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopDoVariableExchangeResponse.EResponse.k_eDisabled)
        k_eDisabled = 3,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopDoVariableExchangeResponse.EResponse.k_eTimeout)
        k_eTimeout = 4,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopDoVariableExchangeResponse.EResponse.k_eInvalidShop)
        k_eInvalidShop = 5,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopDoVariableExchangeResponse.EResponse.k_eNotEnoughCandy)
        k_eNotEnoughCandy = 6,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopDoVariableExchangeResponse.EResponse.k_eInvalidRecipe)
        k_eInvalidRecipe = 7,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopDoVariableExchangeResponse.EResponse.k_eNotEnoughSpace)
        k_eNotEnoughSpace = 8,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopDoVariableExchangeResponse.EResponse.k_eExpiredShop)
        k_eExpiredShop = 9,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for EResponse {
        const NAME: &'static str = "EResponse";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EResponse> {
            match value {
                0 => ::std::option::Option::Some(EResponse::k_eInternalError),
                1 => ::std::option::Option::Some(EResponse::k_eSuccess),
                2 => ::std::option::Option::Some(EResponse::k_eTooBusy),
                3 => ::std::option::Option::Some(EResponse::k_eDisabled),
                4 => ::std::option::Option::Some(EResponse::k_eTimeout),
                5 => ::std::option::Option::Some(EResponse::k_eInvalidShop),
                6 => ::std::option::Option::Some(EResponse::k_eNotEnoughCandy),
                7 => ::std::option::Option::Some(EResponse::k_eInvalidRecipe),
                8 => ::std::option::Option::Some(EResponse::k_eNotEnoughSpace),
                9 => ::std::option::Option::Some(EResponse::k_eExpiredShop),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EResponse> {
            match str {
                "k_eInternalError" => ::std::option::Option::Some(EResponse::k_eInternalError),
                "k_eSuccess" => ::std::option::Option::Some(EResponse::k_eSuccess),
                "k_eTooBusy" => ::std::option::Option::Some(EResponse::k_eTooBusy),
                "k_eDisabled" => ::std::option::Option::Some(EResponse::k_eDisabled),
                "k_eTimeout" => ::std::option::Option::Some(EResponse::k_eTimeout),
                "k_eInvalidShop" => ::std::option::Option::Some(EResponse::k_eInvalidShop),
                "k_eNotEnoughCandy" => ::std::option::Option::Some(EResponse::k_eNotEnoughCandy),
                "k_eInvalidRecipe" => ::std::option::Option::Some(EResponse::k_eInvalidRecipe),
                "k_eNotEnoughSpace" => ::std::option::Option::Some(EResponse::k_eNotEnoughSpace),
                "k_eExpiredShop" => ::std::option::Option::Some(EResponse::k_eExpiredShop),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EResponse] = &[
            EResponse::k_eInternalError,
            EResponse::k_eSuccess,
            EResponse::k_eTooBusy,
            EResponse::k_eDisabled,
            EResponse::k_eTimeout,
            EResponse::k_eInvalidShop,
            EResponse::k_eNotEnoughCandy,
            EResponse::k_eInvalidRecipe,
            EResponse::k_eNotEnoughSpace,
            EResponse::k_eExpiredShop,
        ];
    }

    impl ::std::default::Default for EResponse {
        fn default() -> Self {
            EResponse::k_eInternalError
        }
    }

}

// @@protoc_insertion_point(message:CMsgClientToGCCandyShopRerollRewards)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCCandyShopRerollRewards {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCCandyShopRerollRewards.candy_shop_id)
    pub candy_shop_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCCandyShopRerollRewards.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCCandyShopRerollRewards {
    fn default() -> &'a CMsgClientToGCCandyShopRerollRewards {
        <CMsgClientToGCCandyShopRerollRewards as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCCandyShopRerollRewards {
    pub fn new() -> CMsgClientToGCCandyShopRerollRewards {
        ::std::default::Default::default()
    }

    // optional uint32 candy_shop_id = 1;

    pub fn candy_shop_id(&self) -> u32 {
        self.candy_shop_id.unwrap_or(0)
    }

    pub fn clear_candy_shop_id(&mut self) {
        self.candy_shop_id = ::std::option::Option::None;
    }

    pub fn has_candy_shop_id(&self) -> bool {
        self.candy_shop_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_candy_shop_id(&mut self, v: u32) {
        self.candy_shop_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCCandyShopRerollRewards {
    const NAME: &'static str = "CMsgClientToGCCandyShopRerollRewards";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.candy_shop_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.candy_shop_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.candy_shop_id {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCCandyShopRerollRewards {
        CMsgClientToGCCandyShopRerollRewards::new()
    }

    fn clear(&mut self) {
        self.candy_shop_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCCandyShopRerollRewards {
        static instance: CMsgClientToGCCandyShopRerollRewards = CMsgClientToGCCandyShopRerollRewards {
            candy_shop_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCCandyShopRerollRewardsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCCandyShopRerollRewardsResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCCandyShopRerollRewardsResponse.response)
    pub response: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_client_to_gccandy_shop_reroll_rewards_response::EResponse>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCCandyShopRerollRewardsResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCCandyShopRerollRewardsResponse {
    fn default() -> &'a CMsgClientToGCCandyShopRerollRewardsResponse {
        <CMsgClientToGCCandyShopRerollRewardsResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCCandyShopRerollRewardsResponse {
    pub fn new() -> CMsgClientToGCCandyShopRerollRewardsResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgClientToGCCandyShopRerollRewardsResponse.EResponse response = 1;

    pub fn response(&self) -> cmsg_client_to_gccandy_shop_reroll_rewards_response::EResponse {
        match self.response {
            Some(e) => e.enum_value_or(cmsg_client_to_gccandy_shop_reroll_rewards_response::EResponse::k_eInternalError),
            None => cmsg_client_to_gccandy_shop_reroll_rewards_response::EResponse::k_eInternalError,
        }
    }

    pub fn clear_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: cmsg_client_to_gccandy_shop_reroll_rewards_response::EResponse) {
        self.response = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCCandyShopRerollRewardsResponse {
    const NAME: &'static str = "CMsgClientToGCCandyShopRerollRewardsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.response = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.response {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.response {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCCandyShopRerollRewardsResponse {
        CMsgClientToGCCandyShopRerollRewardsResponse::new()
    }

    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCCandyShopRerollRewardsResponse {
        static instance: CMsgClientToGCCandyShopRerollRewardsResponse = CMsgClientToGCCandyShopRerollRewardsResponse {
            response: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientToGCCandyShopRerollRewardsResponse`
pub mod cmsg_client_to_gccandy_shop_reroll_rewards_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgClientToGCCandyShopRerollRewardsResponse.EResponse)
    pub enum EResponse {
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopRerollRewardsResponse.EResponse.k_eInternalError)
        k_eInternalError = 0,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopRerollRewardsResponse.EResponse.k_eSuccess)
        k_eSuccess = 1,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopRerollRewardsResponse.EResponse.k_eTooBusy)
        k_eTooBusy = 2,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopRerollRewardsResponse.EResponse.k_eDisabled)
        k_eDisabled = 3,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopRerollRewardsResponse.EResponse.k_eTimeout)
        k_eTimeout = 4,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopRerollRewardsResponse.EResponse.k_eInvalidShop)
        k_eInvalidShop = 5,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopRerollRewardsResponse.EResponse.k_eNoRerollCharges)
        k_eNoRerollCharges = 6,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopRerollRewardsResponse.EResponse.k_eExpiredShop)
        k_eExpiredShop = 7,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCandyShopRerollRewardsResponse.EResponse.k_eShopNotOpen)
        k_eShopNotOpen = 8,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for EResponse {
        const NAME: &'static str = "EResponse";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EResponse> {
            match value {
                0 => ::std::option::Option::Some(EResponse::k_eInternalError),
                1 => ::std::option::Option::Some(EResponse::k_eSuccess),
                2 => ::std::option::Option::Some(EResponse::k_eTooBusy),
                3 => ::std::option::Option::Some(EResponse::k_eDisabled),
                4 => ::std::option::Option::Some(EResponse::k_eTimeout),
                5 => ::std::option::Option::Some(EResponse::k_eInvalidShop),
                6 => ::std::option::Option::Some(EResponse::k_eNoRerollCharges),
                7 => ::std::option::Option::Some(EResponse::k_eExpiredShop),
                8 => ::std::option::Option::Some(EResponse::k_eShopNotOpen),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EResponse> {
            match str {
                "k_eInternalError" => ::std::option::Option::Some(EResponse::k_eInternalError),
                "k_eSuccess" => ::std::option::Option::Some(EResponse::k_eSuccess),
                "k_eTooBusy" => ::std::option::Option::Some(EResponse::k_eTooBusy),
                "k_eDisabled" => ::std::option::Option::Some(EResponse::k_eDisabled),
                "k_eTimeout" => ::std::option::Option::Some(EResponse::k_eTimeout),
                "k_eInvalidShop" => ::std::option::Option::Some(EResponse::k_eInvalidShop),
                "k_eNoRerollCharges" => ::std::option::Option::Some(EResponse::k_eNoRerollCharges),
                "k_eExpiredShop" => ::std::option::Option::Some(EResponse::k_eExpiredShop),
                "k_eShopNotOpen" => ::std::option::Option::Some(EResponse::k_eShopNotOpen),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EResponse] = &[
            EResponse::k_eInternalError,
            EResponse::k_eSuccess,
            EResponse::k_eTooBusy,
            EResponse::k_eDisabled,
            EResponse::k_eTimeout,
            EResponse::k_eInvalidShop,
            EResponse::k_eNoRerollCharges,
            EResponse::k_eExpiredShop,
            EResponse::k_eShopNotOpen,
        ];
    }

    impl ::std::default::Default for EResponse {
        fn default() -> Self {
            EResponse::k_eInternalError
        }
    }

}

// @@protoc_insertion_point(message:CCandyShopDev)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCandyShopDev {
    // special fields
    // @@protoc_insertion_point(special_field:CCandyShopDev.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCandyShopDev {
    fn default() -> &'a CCandyShopDev {
        <CCandyShopDev as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CCandyShopDev {
    pub fn new() -> CCandyShopDev {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CCandyShopDev {
    const NAME: &'static str = "CCandyShopDev";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCandyShopDev {
        CCandyShopDev::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCandyShopDev {
        static instance: CCandyShopDev = CCandyShopDev {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CCandyShopDev`
pub mod ccandy_shop_dev {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CCandyShopDev.EResponse)
    pub enum EResponse {
        // @@protoc_insertion_point(enum_value:CCandyShopDev.EResponse.k_eInternalError)
        k_eInternalError = 0,
        // @@protoc_insertion_point(enum_value:CCandyShopDev.EResponse.k_eSuccess)
        k_eSuccess = 1,
        // @@protoc_insertion_point(enum_value:CCandyShopDev.EResponse.k_eTooBusy)
        k_eTooBusy = 2,
        // @@protoc_insertion_point(enum_value:CCandyShopDev.EResponse.k_eDisabled)
        k_eDisabled = 3,
        // @@protoc_insertion_point(enum_value:CCandyShopDev.EResponse.k_eTimeout)
        k_eTimeout = 4,
        // @@protoc_insertion_point(enum_value:CCandyShopDev.EResponse.k_eNotAllowed)
        k_eNotAllowed = 5,
        // @@protoc_insertion_point(enum_value:CCandyShopDev.EResponse.k_eInvalidShop)
        k_eInvalidShop = 6,
        // @@protoc_insertion_point(enum_value:CCandyShopDev.EResponse.k_eNotEnoughSpace)
        k_eNotEnoughSpace = 7,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for EResponse {
        const NAME: &'static str = "EResponse";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EResponse> {
            match value {
                0 => ::std::option::Option::Some(EResponse::k_eInternalError),
                1 => ::std::option::Option::Some(EResponse::k_eSuccess),
                2 => ::std::option::Option::Some(EResponse::k_eTooBusy),
                3 => ::std::option::Option::Some(EResponse::k_eDisabled),
                4 => ::std::option::Option::Some(EResponse::k_eTimeout),
                5 => ::std::option::Option::Some(EResponse::k_eNotAllowed),
                6 => ::std::option::Option::Some(EResponse::k_eInvalidShop),
                7 => ::std::option::Option::Some(EResponse::k_eNotEnoughSpace),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EResponse> {
            match str {
                "k_eInternalError" => ::std::option::Option::Some(EResponse::k_eInternalError),
                "k_eSuccess" => ::std::option::Option::Some(EResponse::k_eSuccess),
                "k_eTooBusy" => ::std::option::Option::Some(EResponse::k_eTooBusy),
                "k_eDisabled" => ::std::option::Option::Some(EResponse::k_eDisabled),
                "k_eTimeout" => ::std::option::Option::Some(EResponse::k_eTimeout),
                "k_eNotAllowed" => ::std::option::Option::Some(EResponse::k_eNotAllowed),
                "k_eInvalidShop" => ::std::option::Option::Some(EResponse::k_eInvalidShop),
                "k_eNotEnoughSpace" => ::std::option::Option::Some(EResponse::k_eNotEnoughSpace),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EResponse] = &[
            EResponse::k_eInternalError,
            EResponse::k_eSuccess,
            EResponse::k_eTooBusy,
            EResponse::k_eDisabled,
            EResponse::k_eTimeout,
            EResponse::k_eNotAllowed,
            EResponse::k_eInvalidShop,
            EResponse::k_eNotEnoughSpace,
        ];
    }

    impl ::std::default::Default for EResponse {
        fn default() -> Self {
            EResponse::k_eInternalError
        }
    }

}

// @@protoc_insertion_point(message:CMsgClientToGCCandyShopDevGrantCandy)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCCandyShopDevGrantCandy {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCCandyShopDevGrantCandy.candy_shop_id)
    pub candy_shop_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientToGCCandyShopDevGrantCandy.candy_quantity)
    pub candy_quantity: ::steam_vent_proto_common::protobuf::MessageField<CMsgCandyShopCandyQuantity>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCCandyShopDevGrantCandy.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCCandyShopDevGrantCandy {
    fn default() -> &'a CMsgClientToGCCandyShopDevGrantCandy {
        <CMsgClientToGCCandyShopDevGrantCandy as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCCandyShopDevGrantCandy {
    pub fn new() -> CMsgClientToGCCandyShopDevGrantCandy {
        ::std::default::Default::default()
    }

    // optional uint32 candy_shop_id = 1;

    pub fn candy_shop_id(&self) -> u32 {
        self.candy_shop_id.unwrap_or(0)
    }

    pub fn clear_candy_shop_id(&mut self) {
        self.candy_shop_id = ::std::option::Option::None;
    }

    pub fn has_candy_shop_id(&self) -> bool {
        self.candy_shop_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_candy_shop_id(&mut self, v: u32) {
        self.candy_shop_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCCandyShopDevGrantCandy {
    const NAME: &'static str = "CMsgClientToGCCandyShopDevGrantCandy";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.candy_shop_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.candy_quantity)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.candy_shop_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.candy_quantity.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.candy_shop_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.candy_quantity.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCCandyShopDevGrantCandy {
        CMsgClientToGCCandyShopDevGrantCandy::new()
    }

    fn clear(&mut self) {
        self.candy_shop_id = ::std::option::Option::None;
        self.candy_quantity.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCCandyShopDevGrantCandy {
        static instance: CMsgClientToGCCandyShopDevGrantCandy = CMsgClientToGCCandyShopDevGrantCandy {
            candy_shop_id: ::std::option::Option::None,
            candy_quantity: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCCandyShopDevGrantCandyResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCCandyShopDevGrantCandyResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCCandyShopDevGrantCandyResponse.response)
    pub response: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<ccandy_shop_dev::EResponse>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCCandyShopDevGrantCandyResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCCandyShopDevGrantCandyResponse {
    fn default() -> &'a CMsgClientToGCCandyShopDevGrantCandyResponse {
        <CMsgClientToGCCandyShopDevGrantCandyResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCCandyShopDevGrantCandyResponse {
    pub fn new() -> CMsgClientToGCCandyShopDevGrantCandyResponse {
        ::std::default::Default::default()
    }

    // optional .CCandyShopDev.EResponse response = 1;

    pub fn response(&self) -> ccandy_shop_dev::EResponse {
        match self.response {
            Some(e) => e.enum_value_or(ccandy_shop_dev::EResponse::k_eInternalError),
            None => ccandy_shop_dev::EResponse::k_eInternalError,
        }
    }

    pub fn clear_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: ccandy_shop_dev::EResponse) {
        self.response = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCCandyShopDevGrantCandyResponse {
    const NAME: &'static str = "CMsgClientToGCCandyShopDevGrantCandyResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.response = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.response {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.response {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCCandyShopDevGrantCandyResponse {
        CMsgClientToGCCandyShopDevGrantCandyResponse::new()
    }

    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCCandyShopDevGrantCandyResponse {
        static instance: CMsgClientToGCCandyShopDevGrantCandyResponse = CMsgClientToGCCandyShopDevGrantCandyResponse {
            response: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCCandyShopDevClearInventory)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCCandyShopDevClearInventory {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCCandyShopDevClearInventory.candy_shop_id)
    pub candy_shop_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCCandyShopDevClearInventory.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCCandyShopDevClearInventory {
    fn default() -> &'a CMsgClientToGCCandyShopDevClearInventory {
        <CMsgClientToGCCandyShopDevClearInventory as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCCandyShopDevClearInventory {
    pub fn new() -> CMsgClientToGCCandyShopDevClearInventory {
        ::std::default::Default::default()
    }

    // optional uint32 candy_shop_id = 1;

    pub fn candy_shop_id(&self) -> u32 {
        self.candy_shop_id.unwrap_or(0)
    }

    pub fn clear_candy_shop_id(&mut self) {
        self.candy_shop_id = ::std::option::Option::None;
    }

    pub fn has_candy_shop_id(&self) -> bool {
        self.candy_shop_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_candy_shop_id(&mut self, v: u32) {
        self.candy_shop_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCCandyShopDevClearInventory {
    const NAME: &'static str = "CMsgClientToGCCandyShopDevClearInventory";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.candy_shop_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.candy_shop_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.candy_shop_id {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCCandyShopDevClearInventory {
        CMsgClientToGCCandyShopDevClearInventory::new()
    }

    fn clear(&mut self) {
        self.candy_shop_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCCandyShopDevClearInventory {
        static instance: CMsgClientToGCCandyShopDevClearInventory = CMsgClientToGCCandyShopDevClearInventory {
            candy_shop_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCCandyShopDevClearInventoryResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCCandyShopDevClearInventoryResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCCandyShopDevClearInventoryResponse.response)
    pub response: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<ccandy_shop_dev::EResponse>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCCandyShopDevClearInventoryResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCCandyShopDevClearInventoryResponse {
    fn default() -> &'a CMsgClientToGCCandyShopDevClearInventoryResponse {
        <CMsgClientToGCCandyShopDevClearInventoryResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCCandyShopDevClearInventoryResponse {
    pub fn new() -> CMsgClientToGCCandyShopDevClearInventoryResponse {
        ::std::default::Default::default()
    }

    // optional .CCandyShopDev.EResponse response = 1;

    pub fn response(&self) -> ccandy_shop_dev::EResponse {
        match self.response {
            Some(e) => e.enum_value_or(ccandy_shop_dev::EResponse::k_eInternalError),
            None => ccandy_shop_dev::EResponse::k_eInternalError,
        }
    }

    pub fn clear_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: ccandy_shop_dev::EResponse) {
        self.response = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCCandyShopDevClearInventoryResponse {
    const NAME: &'static str = "CMsgClientToGCCandyShopDevClearInventoryResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.response = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.response {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.response {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCCandyShopDevClearInventoryResponse {
        CMsgClientToGCCandyShopDevClearInventoryResponse::new()
    }

    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCCandyShopDevClearInventoryResponse {
        static instance: CMsgClientToGCCandyShopDevClearInventoryResponse = CMsgClientToGCCandyShopDevClearInventoryResponse {
            response: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCCandyShopDevGrantCandyBags)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCCandyShopDevGrantCandyBags {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCCandyShopDevGrantCandyBags.candy_shop_id)
    pub candy_shop_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientToGCCandyShopDevGrantCandyBags.quantity)
    pub quantity: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCCandyShopDevGrantCandyBags.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCCandyShopDevGrantCandyBags {
    fn default() -> &'a CMsgClientToGCCandyShopDevGrantCandyBags {
        <CMsgClientToGCCandyShopDevGrantCandyBags as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCCandyShopDevGrantCandyBags {
    pub fn new() -> CMsgClientToGCCandyShopDevGrantCandyBags {
        ::std::default::Default::default()
    }

    // optional uint32 candy_shop_id = 1;

    pub fn candy_shop_id(&self) -> u32 {
        self.candy_shop_id.unwrap_or(0)
    }

    pub fn clear_candy_shop_id(&mut self) {
        self.candy_shop_id = ::std::option::Option::None;
    }

    pub fn has_candy_shop_id(&self) -> bool {
        self.candy_shop_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_candy_shop_id(&mut self, v: u32) {
        self.candy_shop_id = ::std::option::Option::Some(v);
    }

    // optional uint32 quantity = 2;

    pub fn quantity(&self) -> u32 {
        self.quantity.unwrap_or(0)
    }

    pub fn clear_quantity(&mut self) {
        self.quantity = ::std::option::Option::None;
    }

    pub fn has_quantity(&self) -> bool {
        self.quantity.is_some()
    }

    // Param is passed by value, moved
    pub fn set_quantity(&mut self, v: u32) {
        self.quantity = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCCandyShopDevGrantCandyBags {
    const NAME: &'static str = "CMsgClientToGCCandyShopDevGrantCandyBags";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.candy_shop_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.quantity = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.candy_shop_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.quantity {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.candy_shop_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.quantity {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCCandyShopDevGrantCandyBags {
        CMsgClientToGCCandyShopDevGrantCandyBags::new()
    }

    fn clear(&mut self) {
        self.candy_shop_id = ::std::option::Option::None;
        self.quantity = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCCandyShopDevGrantCandyBags {
        static instance: CMsgClientToGCCandyShopDevGrantCandyBags = CMsgClientToGCCandyShopDevGrantCandyBags {
            candy_shop_id: ::std::option::Option::None,
            quantity: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCCandyShopDevGrantCandyBagsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCCandyShopDevGrantCandyBagsResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCCandyShopDevGrantCandyBagsResponse.response)
    pub response: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<ccandy_shop_dev::EResponse>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCCandyShopDevGrantCandyBagsResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCCandyShopDevGrantCandyBagsResponse {
    fn default() -> &'a CMsgClientToGCCandyShopDevGrantCandyBagsResponse {
        <CMsgClientToGCCandyShopDevGrantCandyBagsResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCCandyShopDevGrantCandyBagsResponse {
    pub fn new() -> CMsgClientToGCCandyShopDevGrantCandyBagsResponse {
        ::std::default::Default::default()
    }

    // optional .CCandyShopDev.EResponse response = 1;

    pub fn response(&self) -> ccandy_shop_dev::EResponse {
        match self.response {
            Some(e) => e.enum_value_or(ccandy_shop_dev::EResponse::k_eInternalError),
            None => ccandy_shop_dev::EResponse::k_eInternalError,
        }
    }

    pub fn clear_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: ccandy_shop_dev::EResponse) {
        self.response = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCCandyShopDevGrantCandyBagsResponse {
    const NAME: &'static str = "CMsgClientToGCCandyShopDevGrantCandyBagsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.response = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.response {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.response {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCCandyShopDevGrantCandyBagsResponse {
        CMsgClientToGCCandyShopDevGrantCandyBagsResponse::new()
    }

    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCCandyShopDevGrantCandyBagsResponse {
        static instance: CMsgClientToGCCandyShopDevGrantCandyBagsResponse = CMsgClientToGCCandyShopDevGrantCandyBagsResponse {
            response: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCCandyShopDevShuffleExchange)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCCandyShopDevShuffleExchange {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCCandyShopDevShuffleExchange.candy_shop_id)
    pub candy_shop_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCCandyShopDevShuffleExchange.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCCandyShopDevShuffleExchange {
    fn default() -> &'a CMsgClientToGCCandyShopDevShuffleExchange {
        <CMsgClientToGCCandyShopDevShuffleExchange as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCCandyShopDevShuffleExchange {
    pub fn new() -> CMsgClientToGCCandyShopDevShuffleExchange {
        ::std::default::Default::default()
    }

    // optional uint32 candy_shop_id = 1;

    pub fn candy_shop_id(&self) -> u32 {
        self.candy_shop_id.unwrap_or(0)
    }

    pub fn clear_candy_shop_id(&mut self) {
        self.candy_shop_id = ::std::option::Option::None;
    }

    pub fn has_candy_shop_id(&self) -> bool {
        self.candy_shop_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_candy_shop_id(&mut self, v: u32) {
        self.candy_shop_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCCandyShopDevShuffleExchange {
    const NAME: &'static str = "CMsgClientToGCCandyShopDevShuffleExchange";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.candy_shop_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.candy_shop_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.candy_shop_id {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCCandyShopDevShuffleExchange {
        CMsgClientToGCCandyShopDevShuffleExchange::new()
    }

    fn clear(&mut self) {
        self.candy_shop_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCCandyShopDevShuffleExchange {
        static instance: CMsgClientToGCCandyShopDevShuffleExchange = CMsgClientToGCCandyShopDevShuffleExchange {
            candy_shop_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCCandyShopDevShuffleExchangeResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCCandyShopDevShuffleExchangeResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCCandyShopDevShuffleExchangeResponse.response)
    pub response: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<ccandy_shop_dev::EResponse>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCCandyShopDevShuffleExchangeResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCCandyShopDevShuffleExchangeResponse {
    fn default() -> &'a CMsgClientToGCCandyShopDevShuffleExchangeResponse {
        <CMsgClientToGCCandyShopDevShuffleExchangeResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCCandyShopDevShuffleExchangeResponse {
    pub fn new() -> CMsgClientToGCCandyShopDevShuffleExchangeResponse {
        ::std::default::Default::default()
    }

    // optional .CCandyShopDev.EResponse response = 1;

    pub fn response(&self) -> ccandy_shop_dev::EResponse {
        match self.response {
            Some(e) => e.enum_value_or(ccandy_shop_dev::EResponse::k_eInternalError),
            None => ccandy_shop_dev::EResponse::k_eInternalError,
        }
    }

    pub fn clear_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: ccandy_shop_dev::EResponse) {
        self.response = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCCandyShopDevShuffleExchangeResponse {
    const NAME: &'static str = "CMsgClientToGCCandyShopDevShuffleExchangeResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.response = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.response {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.response {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCCandyShopDevShuffleExchangeResponse {
        CMsgClientToGCCandyShopDevShuffleExchangeResponse::new()
    }

    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCCandyShopDevShuffleExchangeResponse {
        static instance: CMsgClientToGCCandyShopDevShuffleExchangeResponse = CMsgClientToGCCandyShopDevShuffleExchangeResponse {
            response: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCCandyShopDevGrantRerollCharges)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCCandyShopDevGrantRerollCharges {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCCandyShopDevGrantRerollCharges.candy_shop_id)
    pub candy_shop_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientToGCCandyShopDevGrantRerollCharges.reroll_charges)
    pub reroll_charges: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCCandyShopDevGrantRerollCharges.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCCandyShopDevGrantRerollCharges {
    fn default() -> &'a CMsgClientToGCCandyShopDevGrantRerollCharges {
        <CMsgClientToGCCandyShopDevGrantRerollCharges as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCCandyShopDevGrantRerollCharges {
    pub fn new() -> CMsgClientToGCCandyShopDevGrantRerollCharges {
        ::std::default::Default::default()
    }

    // optional uint32 candy_shop_id = 1;

    pub fn candy_shop_id(&self) -> u32 {
        self.candy_shop_id.unwrap_or(0)
    }

    pub fn clear_candy_shop_id(&mut self) {
        self.candy_shop_id = ::std::option::Option::None;
    }

    pub fn has_candy_shop_id(&self) -> bool {
        self.candy_shop_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_candy_shop_id(&mut self, v: u32) {
        self.candy_shop_id = ::std::option::Option::Some(v);
    }

    // optional uint32 reroll_charges = 2;

    pub fn reroll_charges(&self) -> u32 {
        self.reroll_charges.unwrap_or(0)
    }

    pub fn clear_reroll_charges(&mut self) {
        self.reroll_charges = ::std::option::Option::None;
    }

    pub fn has_reroll_charges(&self) -> bool {
        self.reroll_charges.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reroll_charges(&mut self, v: u32) {
        self.reroll_charges = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCCandyShopDevGrantRerollCharges {
    const NAME: &'static str = "CMsgClientToGCCandyShopDevGrantRerollCharges";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.candy_shop_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.reroll_charges = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.candy_shop_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.reroll_charges {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.candy_shop_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.reroll_charges {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCCandyShopDevGrantRerollCharges {
        CMsgClientToGCCandyShopDevGrantRerollCharges::new()
    }

    fn clear(&mut self) {
        self.candy_shop_id = ::std::option::Option::None;
        self.reroll_charges = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCCandyShopDevGrantRerollCharges {
        static instance: CMsgClientToGCCandyShopDevGrantRerollCharges = CMsgClientToGCCandyShopDevGrantRerollCharges {
            candy_shop_id: ::std::option::Option::None,
            reroll_charges: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCCandyShopDevGrantRerollChargesResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCCandyShopDevGrantRerollChargesResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCCandyShopDevGrantRerollChargesResponse.response)
    pub response: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<ccandy_shop_dev::EResponse>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCCandyShopDevGrantRerollChargesResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCCandyShopDevGrantRerollChargesResponse {
    fn default() -> &'a CMsgClientToGCCandyShopDevGrantRerollChargesResponse {
        <CMsgClientToGCCandyShopDevGrantRerollChargesResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCCandyShopDevGrantRerollChargesResponse {
    pub fn new() -> CMsgClientToGCCandyShopDevGrantRerollChargesResponse {
        ::std::default::Default::default()
    }

    // optional .CCandyShopDev.EResponse response = 1;

    pub fn response(&self) -> ccandy_shop_dev::EResponse {
        match self.response {
            Some(e) => e.enum_value_or(ccandy_shop_dev::EResponse::k_eInternalError),
            None => ccandy_shop_dev::EResponse::k_eInternalError,
        }
    }

    pub fn clear_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: ccandy_shop_dev::EResponse) {
        self.response = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCCandyShopDevGrantRerollChargesResponse {
    const NAME: &'static str = "CMsgClientToGCCandyShopDevGrantRerollChargesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.response = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.response {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.response {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCCandyShopDevGrantRerollChargesResponse {
        CMsgClientToGCCandyShopDevGrantRerollChargesResponse::new()
    }

    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCCandyShopDevGrantRerollChargesResponse {
        static instance: CMsgClientToGCCandyShopDevGrantRerollChargesResponse = CMsgClientToGCCandyShopDevGrantRerollChargesResponse {
            response: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCCandyShopDevResetShop)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCCandyShopDevResetShop {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCCandyShopDevResetShop.candy_shop_id)
    pub candy_shop_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCCandyShopDevResetShop.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCCandyShopDevResetShop {
    fn default() -> &'a CMsgClientToGCCandyShopDevResetShop {
        <CMsgClientToGCCandyShopDevResetShop as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCCandyShopDevResetShop {
    pub fn new() -> CMsgClientToGCCandyShopDevResetShop {
        ::std::default::Default::default()
    }

    // optional uint32 candy_shop_id = 1;

    pub fn candy_shop_id(&self) -> u32 {
        self.candy_shop_id.unwrap_or(0)
    }

    pub fn clear_candy_shop_id(&mut self) {
        self.candy_shop_id = ::std::option::Option::None;
    }

    pub fn has_candy_shop_id(&self) -> bool {
        self.candy_shop_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_candy_shop_id(&mut self, v: u32) {
        self.candy_shop_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCCandyShopDevResetShop {
    const NAME: &'static str = "CMsgClientToGCCandyShopDevResetShop";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.candy_shop_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.candy_shop_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.candy_shop_id {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCCandyShopDevResetShop {
        CMsgClientToGCCandyShopDevResetShop::new()
    }

    fn clear(&mut self) {
        self.candy_shop_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCCandyShopDevResetShop {
        static instance: CMsgClientToGCCandyShopDevResetShop = CMsgClientToGCCandyShopDevResetShop {
            candy_shop_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCCandyShopDevResetShopResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCCandyShopDevResetShopResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCCandyShopDevResetShopResponse.response)
    pub response: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<ccandy_shop_dev::EResponse>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCCandyShopDevResetShopResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCCandyShopDevResetShopResponse {
    fn default() -> &'a CMsgClientToGCCandyShopDevResetShopResponse {
        <CMsgClientToGCCandyShopDevResetShopResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCCandyShopDevResetShopResponse {
    pub fn new() -> CMsgClientToGCCandyShopDevResetShopResponse {
        ::std::default::Default::default()
    }

    // optional .CCandyShopDev.EResponse response = 1;

    pub fn response(&self) -> ccandy_shop_dev::EResponse {
        match self.response {
            Some(e) => e.enum_value_or(ccandy_shop_dev::EResponse::k_eInternalError),
            None => ccandy_shop_dev::EResponse::k_eInternalError,
        }
    }

    pub fn clear_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: ccandy_shop_dev::EResponse) {
        self.response = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCCandyShopDevResetShopResponse {
    const NAME: &'static str = "CMsgClientToGCCandyShopDevResetShopResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.response = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.response {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.response {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCCandyShopDevResetShopResponse {
        CMsgClientToGCCandyShopDevResetShopResponse::new()
    }

    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCCandyShopDevResetShopResponse {
        static instance: CMsgClientToGCCandyShopDevResetShopResponse = CMsgClientToGCCandyShopDevResetShopResponse {
            response: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ECandyShopAuditAction)
pub enum ECandyShopAuditAction {
    // @@protoc_insertion_point(enum_value:ECandyShopAuditAction.k_ECandyShopAuditAction_Invalid)
    k_ECandyShopAuditAction_Invalid = 0,
    // @@protoc_insertion_point(enum_value:ECandyShopAuditAction.k_ECandyShopAuditAction_SupportModify)
    k_ECandyShopAuditAction_SupportModify = 1,
    // @@protoc_insertion_point(enum_value:ECandyShopAuditAction.k_ECandyShopAuditAction_PurchaseReward)
    k_ECandyShopAuditAction_PurchaseReward = 2,
    // @@protoc_insertion_point(enum_value:ECandyShopAuditAction.k_ECandyShopAuditAction_OpenBags)
    k_ECandyShopAuditAction_OpenBags = 3,
    // @@protoc_insertion_point(enum_value:ECandyShopAuditAction.k_ECandyShopAuditAction_RerollRewards)
    k_ECandyShopAuditAction_RerollRewards = 4,
    // @@protoc_insertion_point(enum_value:ECandyShopAuditAction.k_ECandyShopAuditAction_DoVariableExchange)
    k_ECandyShopAuditAction_DoVariableExchange = 5,
    // @@protoc_insertion_point(enum_value:ECandyShopAuditAction.k_ECandyShopAuditAction_DoExchange)
    k_ECandyShopAuditAction_DoExchange = 6,
    // @@protoc_insertion_point(enum_value:ECandyShopAuditAction.k_ECandyShopAuditAction_DEPRECATED_EventActionGrantInventorySizeIncrease)
    k_ECandyShopAuditAction_DEPRECATED_EventActionGrantInventorySizeIncrease = 7,
    // @@protoc_insertion_point(enum_value:ECandyShopAuditAction.k_ECandyShopAuditAction_EventActionGrantRerollChargesIncrease)
    k_ECandyShopAuditAction_EventActionGrantRerollChargesIncrease = 8,
    // @@protoc_insertion_point(enum_value:ECandyShopAuditAction.k_ECandyShopAuditAction_EventActionGrantUpgrade_InventorySize)
    k_ECandyShopAuditAction_EventActionGrantUpgrade_InventorySize = 100,
    // @@protoc_insertion_point(enum_value:ECandyShopAuditAction.k_ECandyShopAuditAction_EventActionGrantUpgrade_RewardShelf)
    k_ECandyShopAuditAction_EventActionGrantUpgrade_RewardShelf = 101,
    // @@protoc_insertion_point(enum_value:ECandyShopAuditAction.k_ECandyShopAuditAction_EventActionGrantUpgrade_ExtraExchangeRecipe)
    k_ECandyShopAuditAction_EventActionGrantUpgrade_ExtraExchangeRecipe = 102,
}

impl ::steam_vent_proto_common::protobuf::Enum for ECandyShopAuditAction {
    const NAME: &'static str = "ECandyShopAuditAction";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ECandyShopAuditAction> {
        match value {
            0 => ::std::option::Option::Some(ECandyShopAuditAction::k_ECandyShopAuditAction_Invalid),
            1 => ::std::option::Option::Some(ECandyShopAuditAction::k_ECandyShopAuditAction_SupportModify),
            2 => ::std::option::Option::Some(ECandyShopAuditAction::k_ECandyShopAuditAction_PurchaseReward),
            3 => ::std::option::Option::Some(ECandyShopAuditAction::k_ECandyShopAuditAction_OpenBags),
            4 => ::std::option::Option::Some(ECandyShopAuditAction::k_ECandyShopAuditAction_RerollRewards),
            5 => ::std::option::Option::Some(ECandyShopAuditAction::k_ECandyShopAuditAction_DoVariableExchange),
            6 => ::std::option::Option::Some(ECandyShopAuditAction::k_ECandyShopAuditAction_DoExchange),
            7 => ::std::option::Option::Some(ECandyShopAuditAction::k_ECandyShopAuditAction_DEPRECATED_EventActionGrantInventorySizeIncrease),
            8 => ::std::option::Option::Some(ECandyShopAuditAction::k_ECandyShopAuditAction_EventActionGrantRerollChargesIncrease),
            100 => ::std::option::Option::Some(ECandyShopAuditAction::k_ECandyShopAuditAction_EventActionGrantUpgrade_InventorySize),
            101 => ::std::option::Option::Some(ECandyShopAuditAction::k_ECandyShopAuditAction_EventActionGrantUpgrade_RewardShelf),
            102 => ::std::option::Option::Some(ECandyShopAuditAction::k_ECandyShopAuditAction_EventActionGrantUpgrade_ExtraExchangeRecipe),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ECandyShopAuditAction> {
        match str {
            "k_ECandyShopAuditAction_Invalid" => ::std::option::Option::Some(ECandyShopAuditAction::k_ECandyShopAuditAction_Invalid),
            "k_ECandyShopAuditAction_SupportModify" => ::std::option::Option::Some(ECandyShopAuditAction::k_ECandyShopAuditAction_SupportModify),
            "k_ECandyShopAuditAction_PurchaseReward" => ::std::option::Option::Some(ECandyShopAuditAction::k_ECandyShopAuditAction_PurchaseReward),
            "k_ECandyShopAuditAction_OpenBags" => ::std::option::Option::Some(ECandyShopAuditAction::k_ECandyShopAuditAction_OpenBags),
            "k_ECandyShopAuditAction_RerollRewards" => ::std::option::Option::Some(ECandyShopAuditAction::k_ECandyShopAuditAction_RerollRewards),
            "k_ECandyShopAuditAction_DoVariableExchange" => ::std::option::Option::Some(ECandyShopAuditAction::k_ECandyShopAuditAction_DoVariableExchange),
            "k_ECandyShopAuditAction_DoExchange" => ::std::option::Option::Some(ECandyShopAuditAction::k_ECandyShopAuditAction_DoExchange),
            "k_ECandyShopAuditAction_DEPRECATED_EventActionGrantInventorySizeIncrease" => ::std::option::Option::Some(ECandyShopAuditAction::k_ECandyShopAuditAction_DEPRECATED_EventActionGrantInventorySizeIncrease),
            "k_ECandyShopAuditAction_EventActionGrantRerollChargesIncrease" => ::std::option::Option::Some(ECandyShopAuditAction::k_ECandyShopAuditAction_EventActionGrantRerollChargesIncrease),
            "k_ECandyShopAuditAction_EventActionGrantUpgrade_InventorySize" => ::std::option::Option::Some(ECandyShopAuditAction::k_ECandyShopAuditAction_EventActionGrantUpgrade_InventorySize),
            "k_ECandyShopAuditAction_EventActionGrantUpgrade_RewardShelf" => ::std::option::Option::Some(ECandyShopAuditAction::k_ECandyShopAuditAction_EventActionGrantUpgrade_RewardShelf),
            "k_ECandyShopAuditAction_EventActionGrantUpgrade_ExtraExchangeRecipe" => ::std::option::Option::Some(ECandyShopAuditAction::k_ECandyShopAuditAction_EventActionGrantUpgrade_ExtraExchangeRecipe),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ECandyShopAuditAction] = &[
        ECandyShopAuditAction::k_ECandyShopAuditAction_Invalid,
        ECandyShopAuditAction::k_ECandyShopAuditAction_SupportModify,
        ECandyShopAuditAction::k_ECandyShopAuditAction_PurchaseReward,
        ECandyShopAuditAction::k_ECandyShopAuditAction_OpenBags,
        ECandyShopAuditAction::k_ECandyShopAuditAction_RerollRewards,
        ECandyShopAuditAction::k_ECandyShopAuditAction_DoVariableExchange,
        ECandyShopAuditAction::k_ECandyShopAuditAction_DoExchange,
        ECandyShopAuditAction::k_ECandyShopAuditAction_DEPRECATED_EventActionGrantInventorySizeIncrease,
        ECandyShopAuditAction::k_ECandyShopAuditAction_EventActionGrantRerollChargesIncrease,
        ECandyShopAuditAction::k_ECandyShopAuditAction_EventActionGrantUpgrade_InventorySize,
        ECandyShopAuditAction::k_ECandyShopAuditAction_EventActionGrantUpgrade_RewardShelf,
        ECandyShopAuditAction::k_ECandyShopAuditAction_EventActionGrantUpgrade_ExtraExchangeRecipe,
    ];
}

impl ::std::default::Default for ECandyShopAuditAction {
    fn default() -> Self {
        ECandyShopAuditAction::k_ECandyShopAuditAction_Invalid
    }
}


#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ECandyShopRewardType)
pub enum ECandyShopRewardType {
    // @@protoc_insertion_point(enum_value:ECandyShopRewardType.k_eCandyShopRewardType_None)
    k_eCandyShopRewardType_None = 0,
    // @@protoc_insertion_point(enum_value:ECandyShopRewardType.k_eCandyShopRewardType_Item)
    k_eCandyShopRewardType_Item = 1,
    // @@protoc_insertion_point(enum_value:ECandyShopRewardType.k_eCandyShopRewardType_EventAction)
    k_eCandyShopRewardType_EventAction = 2,
    // @@protoc_insertion_point(enum_value:ECandyShopRewardType.k_eCandyShopRewardType_EventPoints)
    k_eCandyShopRewardType_EventPoints = 3,
}

impl ::steam_vent_proto_common::protobuf::Enum for ECandyShopRewardType {
    const NAME: &'static str = "ECandyShopRewardType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ECandyShopRewardType> {
        match value {
            0 => ::std::option::Option::Some(ECandyShopRewardType::k_eCandyShopRewardType_None),
            1 => ::std::option::Option::Some(ECandyShopRewardType::k_eCandyShopRewardType_Item),
            2 => ::std::option::Option::Some(ECandyShopRewardType::k_eCandyShopRewardType_EventAction),
            3 => ::std::option::Option::Some(ECandyShopRewardType::k_eCandyShopRewardType_EventPoints),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ECandyShopRewardType> {
        match str {
            "k_eCandyShopRewardType_None" => ::std::option::Option::Some(ECandyShopRewardType::k_eCandyShopRewardType_None),
            "k_eCandyShopRewardType_Item" => ::std::option::Option::Some(ECandyShopRewardType::k_eCandyShopRewardType_Item),
            "k_eCandyShopRewardType_EventAction" => ::std::option::Option::Some(ECandyShopRewardType::k_eCandyShopRewardType_EventAction),
            "k_eCandyShopRewardType_EventPoints" => ::std::option::Option::Some(ECandyShopRewardType::k_eCandyShopRewardType_EventPoints),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ECandyShopRewardType] = &[
        ECandyShopRewardType::k_eCandyShopRewardType_None,
        ECandyShopRewardType::k_eCandyShopRewardType_Item,
        ECandyShopRewardType::k_eCandyShopRewardType_EventAction,
        ECandyShopRewardType::k_eCandyShopRewardType_EventPoints,
    ];
}

impl ::std::default::Default for ECandyShopRewardType {
    fn default() -> Self {
        ECandyShopRewardType::k_eCandyShopRewardType_None
    }
}



const _VENT_PROTO_VERSION_CHECK: () = ::steam_vent_proto_common::VERSION_0_5_0;

#[allow(unused_imports)]
use crate::steammessages::*;
#[allow(unused_imports)]
use crate::dota_shared_enums::*;
#[allow(unused_imports)]
use crate::dota_gcmessages_common::*;
#[allow(unused_imports)]
use crate::dota_gcmessages_webapi::*;
#[allow(unused_imports)]
use crate::gcsdk_gcmessages::*;
#[allow(unused_imports)]
use crate::base_gcmessages::*;
#[allow(unused_imports)]
use crate::econ_gcmessages::*;
#[allow(unused_imports)]
use crate::dota_gcmessages_client::*;
#[allow(unused_imports)]
use crate::valveextensions::*;
impl ::steam_vent_proto_common::RpcMessage for CMsgCandyShopCandyCount {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgCandyShopCandyQuantity {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgCandyShopExchangeRecipe {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgCandyShopRewardData_Item {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgCandyShopRewardData_EventAction {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgCandyShopRewardData_EventPoints {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgCandyShopReward {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgCandyShopUserData {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgClientToGCCandyShopGetUserData {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCCandyShopGetUserData {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCCandyShopGetUserData;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCCandyShopGetUserDataResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCCandyShopGetUserDataResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCCandyShopGetUserDataResponse;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCToClientCandyShopUserDataUpdated {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgGCToClientCandyShopUserDataUpdated {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgGCToClientCandyShopUserDataUpdated;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgClientToGCCandyShopPurchaseReward {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCCandyShopPurchaseReward {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCCandyShopPurchaseReward;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCCandyShopPurchaseRewardResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCCandyShopPurchaseRewardResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCCandyShopPurchaseRewardResponse;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgClientToGCCandyShopOpenBags {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgClientToGCCandyShopOpenBags {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCCandyShopOpenBags;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgClientToGCCandyShopOpenBagsResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCCandyShopOpenBagsResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCCandyShopOpenBagsResponse;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgClientToGCCandyShopDoExchange {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCCandyShopDoExchange {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCCandyShopDoExchange;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCCandyShopDoExchangeResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCCandyShopDoExchangeResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCCandyShopDoExchangeResponse;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCCandyShopDoVariableExchange {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCCandyShopDoVariableExchange {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCCandyShopDoVariableExchange;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCCandyShopDoVariableExchangeResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCCandyShopDoVariableExchangeResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCCandyShopDoVariableExchangeResponse;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgClientToGCCandyShopRerollRewards {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCCandyShopRerollRewards {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCCandyShopRerollRewards;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCCandyShopRerollRewardsResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCCandyShopRerollRewardsResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCCandyShopRerollRewardsResponse;
}
impl ::steam_vent_proto_common::RpcMessage for CCandyShopDev {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgClientToGCCandyShopDevGrantCandy {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCCandyShopDevGrantCandy {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCCandyShopDevGrantCandy;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCCandyShopDevGrantCandyResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCCandyShopDevGrantCandyResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCCandyShopDevGrantCandyResponse;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgClientToGCCandyShopDevClearInventory {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCCandyShopDevClearInventory {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCCandyShopDevClearInventory;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCCandyShopDevClearInventoryResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCCandyShopDevClearInventoryResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCCandyShopDevClearInventoryResponse;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgClientToGCCandyShopDevGrantCandyBags {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCCandyShopDevGrantCandyBags {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCCandyShopDevGrantCandyBags;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCCandyShopDevGrantCandyBagsResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCCandyShopDevGrantCandyBagsResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCCandyShopDevGrantCandyBagsResponse;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCCandyShopDevShuffleExchange {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCCandyShopDevShuffleExchange {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCCandyShopDevShuffleExchange;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCCandyShopDevShuffleExchangeResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCCandyShopDevShuffleExchangeResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCCandyShopDevShuffleExchangeResponse;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCCandyShopDevGrantRerollCharges {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCCandyShopDevGrantRerollCharges {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCCandyShopDevGrantRerollCharges;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCCandyShopDevGrantRerollChargesResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCCandyShopDevGrantRerollChargesResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCCandyShopDevGrantRerollChargesResponse;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgClientToGCCandyShopDevResetShop {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCCandyShopDevResetShop {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCCandyShopDevResetShop;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCCandyShopDevResetShopResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCCandyShopDevResetShopResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCCandyShopDevResetShopResponse;
}

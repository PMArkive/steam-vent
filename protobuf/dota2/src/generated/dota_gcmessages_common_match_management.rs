// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `dota_gcmessages_common_match_management.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::steam_vent_proto_common::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:CSODOTAPartyMember)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSODOTAPartyMember {
    // message fields
    // @@protoc_insertion_point(field:CSODOTAPartyMember.is_coach)
    pub is_coach: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CSODOTAPartyMember.region_ping_codes)
    pub region_ping_codes: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CSODOTAPartyMember.region_ping_times)
    pub region_ping_times: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CSODOTAPartyMember.region_ping_failed_bitmask)
    pub region_ping_failed_bitmask: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAPartyMember.is_plus_subscriber)
    pub is_plus_subscriber: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CSODOTAPartyMember.tourney_skill_level)
    pub tourney_skill_level: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAPartyMember.tourney_buyin)
    pub tourney_buyin: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAPartyMember.tourney_prevent_until)
    pub tourney_prevent_until: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAPartyMember.mm_data_valid)
    pub mm_data_valid: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CSODOTAPartyMember.lane_selection_flags)
    pub lane_selection_flags: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAPartyMember.high_priority_disabled)
    pub high_priority_disabled: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CSODOTAPartyMember.has_hp_resource)
    pub has_hp_resource: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CSODOTAPartyMember.joined_from_partyfinder)
    pub joined_from_partyfinder: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CSODOTAPartyMember.is_steam_china)
    pub is_steam_china: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CSODOTAPartyMember.banned_hero_ids)
    pub banned_hero_ids: ::std::vec::Vec<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CSODOTAPartyMember.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSODOTAPartyMember {
    fn default() -> &'a CSODOTAPartyMember {
        <CSODOTAPartyMember as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CSODOTAPartyMember {
    pub fn new() -> CSODOTAPartyMember {
        ::std::default::Default::default()
    }

    // optional bool is_coach = 2;

    pub fn is_coach(&self) -> bool {
        self.is_coach.unwrap_or(false)
    }

    pub fn clear_is_coach(&mut self) {
        self.is_coach = ::std::option::Option::None;
    }

    pub fn has_is_coach(&self) -> bool {
        self.is_coach.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_coach(&mut self, v: bool) {
        self.is_coach = ::std::option::Option::Some(v);
    }

    // optional uint32 region_ping_failed_bitmask = 6;

    pub fn region_ping_failed_bitmask(&self) -> u32 {
        self.region_ping_failed_bitmask.unwrap_or(0)
    }

    pub fn clear_region_ping_failed_bitmask(&mut self) {
        self.region_ping_failed_bitmask = ::std::option::Option::None;
    }

    pub fn has_region_ping_failed_bitmask(&self) -> bool {
        self.region_ping_failed_bitmask.is_some()
    }

    // Param is passed by value, moved
    pub fn set_region_ping_failed_bitmask(&mut self, v: u32) {
        self.region_ping_failed_bitmask = ::std::option::Option::Some(v);
    }

    // optional bool is_plus_subscriber = 10;

    pub fn is_plus_subscriber(&self) -> bool {
        self.is_plus_subscriber.unwrap_or(false)
    }

    pub fn clear_is_plus_subscriber(&mut self) {
        self.is_plus_subscriber = ::std::option::Option::None;
    }

    pub fn has_is_plus_subscriber(&self) -> bool {
        self.is_plus_subscriber.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_plus_subscriber(&mut self, v: bool) {
        self.is_plus_subscriber = ::std::option::Option::Some(v);
    }

    // optional uint32 tourney_skill_level = 7;

    pub fn tourney_skill_level(&self) -> u32 {
        self.tourney_skill_level.unwrap_or(0)
    }

    pub fn clear_tourney_skill_level(&mut self) {
        self.tourney_skill_level = ::std::option::Option::None;
    }

    pub fn has_tourney_skill_level(&self) -> bool {
        self.tourney_skill_level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tourney_skill_level(&mut self, v: u32) {
        self.tourney_skill_level = ::std::option::Option::Some(v);
    }

    // optional uint32 tourney_buyin = 8;

    pub fn tourney_buyin(&self) -> u32 {
        self.tourney_buyin.unwrap_or(0)
    }

    pub fn clear_tourney_buyin(&mut self) {
        self.tourney_buyin = ::std::option::Option::None;
    }

    pub fn has_tourney_buyin(&self) -> bool {
        self.tourney_buyin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tourney_buyin(&mut self, v: u32) {
        self.tourney_buyin = ::std::option::Option::Some(v);
    }

    // optional uint32 tourney_prevent_until = 9;

    pub fn tourney_prevent_until(&self) -> u32 {
        self.tourney_prevent_until.unwrap_or(0)
    }

    pub fn clear_tourney_prevent_until(&mut self) {
        self.tourney_prevent_until = ::std::option::Option::None;
    }

    pub fn has_tourney_prevent_until(&self) -> bool {
        self.tourney_prevent_until.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tourney_prevent_until(&mut self, v: u32) {
        self.tourney_prevent_until = ::std::option::Option::Some(v);
    }

    // optional bool mm_data_valid = 13;

    pub fn mm_data_valid(&self) -> bool {
        self.mm_data_valid.unwrap_or(false)
    }

    pub fn clear_mm_data_valid(&mut self) {
        self.mm_data_valid = ::std::option::Option::None;
    }

    pub fn has_mm_data_valid(&self) -> bool {
        self.mm_data_valid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mm_data_valid(&mut self, v: bool) {
        self.mm_data_valid = ::std::option::Option::Some(v);
    }

    // optional uint32 lane_selection_flags = 11;

    pub fn lane_selection_flags(&self) -> u32 {
        self.lane_selection_flags.unwrap_or(0)
    }

    pub fn clear_lane_selection_flags(&mut self) {
        self.lane_selection_flags = ::std::option::Option::None;
    }

    pub fn has_lane_selection_flags(&self) -> bool {
        self.lane_selection_flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lane_selection_flags(&mut self, v: u32) {
        self.lane_selection_flags = ::std::option::Option::Some(v);
    }

    // optional bool high_priority_disabled = 14;

    pub fn high_priority_disabled(&self) -> bool {
        self.high_priority_disabled.unwrap_or(false)
    }

    pub fn clear_high_priority_disabled(&mut self) {
        self.high_priority_disabled = ::std::option::Option::None;
    }

    pub fn has_high_priority_disabled(&self) -> bool {
        self.high_priority_disabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_high_priority_disabled(&mut self, v: bool) {
        self.high_priority_disabled = ::std::option::Option::Some(v);
    }

    // optional bool has_hp_resource = 15;

    pub fn has_hp_resource(&self) -> bool {
        self.has_hp_resource.unwrap_or(false)
    }

    pub fn clear_has_hp_resource(&mut self) {
        self.has_hp_resource = ::std::option::Option::None;
    }

    pub fn has_has_hp_resource(&self) -> bool {
        self.has_hp_resource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_has_hp_resource(&mut self, v: bool) {
        self.has_hp_resource = ::std::option::Option::Some(v);
    }

    // optional bool joined_from_partyfinder = 12;

    pub fn joined_from_partyfinder(&self) -> bool {
        self.joined_from_partyfinder.unwrap_or(false)
    }

    pub fn clear_joined_from_partyfinder(&mut self) {
        self.joined_from_partyfinder = ::std::option::Option::None;
    }

    pub fn has_joined_from_partyfinder(&self) -> bool {
        self.joined_from_partyfinder.is_some()
    }

    // Param is passed by value, moved
    pub fn set_joined_from_partyfinder(&mut self, v: bool) {
        self.joined_from_partyfinder = ::std::option::Option::Some(v);
    }

    // optional bool is_steam_china = 16;

    pub fn is_steam_china(&self) -> bool {
        self.is_steam_china.unwrap_or(false)
    }

    pub fn clear_is_steam_china(&mut self) {
        self.is_steam_china = ::std::option::Option::None;
    }

    pub fn has_is_steam_china(&self) -> bool {
        self.is_steam_china.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_steam_china(&mut self, v: bool) {
        self.is_steam_china = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CSODOTAPartyMember {
    const NAME: &'static str = "CSODOTAPartyMember";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16 => {
                    self.is_coach = ::std::option::Option::Some(is.read_bool()?);
                },
                34 => {
                    is.read_repeated_packed_uint32_into(&mut self.region_ping_codes)?;
                },
                32 => {
                    self.region_ping_codes.push(is.read_uint32()?);
                },
                42 => {
                    is.read_repeated_packed_uint32_into(&mut self.region_ping_times)?;
                },
                40 => {
                    self.region_ping_times.push(is.read_uint32()?);
                },
                48 => {
                    self.region_ping_failed_bitmask = ::std::option::Option::Some(is.read_uint32()?);
                },
                80 => {
                    self.is_plus_subscriber = ::std::option::Option::Some(is.read_bool()?);
                },
                56 => {
                    self.tourney_skill_level = ::std::option::Option::Some(is.read_uint32()?);
                },
                64 => {
                    self.tourney_buyin = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.tourney_prevent_until = ::std::option::Option::Some(is.read_uint32()?);
                },
                104 => {
                    self.mm_data_valid = ::std::option::Option::Some(is.read_bool()?);
                },
                88 => {
                    self.lane_selection_flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                112 => {
                    self.high_priority_disabled = ::std::option::Option::Some(is.read_bool()?);
                },
                120 => {
                    self.has_hp_resource = ::std::option::Option::Some(is.read_bool()?);
                },
                96 => {
                    self.joined_from_partyfinder = ::std::option::Option::Some(is.read_bool()?);
                },
                128 => {
                    self.is_steam_china = ::std::option::Option::Some(is.read_bool()?);
                },
                138 => {
                    is.read_repeated_packed_int32_into(&mut self.banned_hero_ids)?;
                },
                136 => {
                    self.banned_hero_ids.push(is.read_int32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.is_coach {
            my_size += 1 + 1;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::vec_packed_uint32_size(4, &self.region_ping_codes);
        my_size += ::steam_vent_proto_common::protobuf::rt::vec_packed_uint32_size(5, &self.region_ping_times);
        if let Some(v) = self.region_ping_failed_bitmask {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.is_plus_subscriber {
            my_size += 1 + 1;
        }
        if let Some(v) = self.tourney_skill_level {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(7, v);
        }
        if let Some(v) = self.tourney_buyin {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.tourney_prevent_until {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(9, v);
        }
        if let Some(v) = self.mm_data_valid {
            my_size += 1 + 1;
        }
        if let Some(v) = self.lane_selection_flags {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(11, v);
        }
        if let Some(v) = self.high_priority_disabled {
            my_size += 1 + 1;
        }
        if let Some(v) = self.has_hp_resource {
            my_size += 1 + 1;
        }
        if let Some(v) = self.joined_from_partyfinder {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_steam_china {
            my_size += 2 + 1;
        }
        for value in &self.banned_hero_ids {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(17, *value);
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.is_coach {
            os.write_bool(2, v)?;
        }
        os.write_repeated_packed_uint32(4, &self.region_ping_codes)?;
        os.write_repeated_packed_uint32(5, &self.region_ping_times)?;
        if let Some(v) = self.region_ping_failed_bitmask {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.is_plus_subscriber {
            os.write_bool(10, v)?;
        }
        if let Some(v) = self.tourney_skill_level {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.tourney_buyin {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.tourney_prevent_until {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.mm_data_valid {
            os.write_bool(13, v)?;
        }
        if let Some(v) = self.lane_selection_flags {
            os.write_uint32(11, v)?;
        }
        if let Some(v) = self.high_priority_disabled {
            os.write_bool(14, v)?;
        }
        if let Some(v) = self.has_hp_resource {
            os.write_bool(15, v)?;
        }
        if let Some(v) = self.joined_from_partyfinder {
            os.write_bool(12, v)?;
        }
        if let Some(v) = self.is_steam_china {
            os.write_bool(16, v)?;
        }
        for v in &self.banned_hero_ids {
            os.write_int32(17, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSODOTAPartyMember {
        CSODOTAPartyMember::new()
    }

    fn clear(&mut self) {
        self.is_coach = ::std::option::Option::None;
        self.region_ping_codes.clear();
        self.region_ping_times.clear();
        self.region_ping_failed_bitmask = ::std::option::Option::None;
        self.is_plus_subscriber = ::std::option::Option::None;
        self.tourney_skill_level = ::std::option::Option::None;
        self.tourney_buyin = ::std::option::Option::None;
        self.tourney_prevent_until = ::std::option::Option::None;
        self.mm_data_valid = ::std::option::Option::None;
        self.lane_selection_flags = ::std::option::Option::None;
        self.high_priority_disabled = ::std::option::Option::None;
        self.has_hp_resource = ::std::option::Option::None;
        self.joined_from_partyfinder = ::std::option::Option::None;
        self.is_steam_china = ::std::option::Option::None;
        self.banned_hero_ids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSODOTAPartyMember {
        static instance: CSODOTAPartyMember = CSODOTAPartyMember {
            is_coach: ::std::option::Option::None,
            region_ping_codes: ::std::vec::Vec::new(),
            region_ping_times: ::std::vec::Vec::new(),
            region_ping_failed_bitmask: ::std::option::Option::None,
            is_plus_subscriber: ::std::option::Option::None,
            tourney_skill_level: ::std::option::Option::None,
            tourney_buyin: ::std::option::Option::None,
            tourney_prevent_until: ::std::option::Option::None,
            mm_data_valid: ::std::option::Option::None,
            lane_selection_flags: ::std::option::Option::None,
            high_priority_disabled: ::std::option::Option::None,
            has_hp_resource: ::std::option::Option::None,
            joined_from_partyfinder: ::std::option::Option::None,
            is_steam_china: ::std::option::Option::None,
            banned_hero_ids: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CSODOTAParty)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSODOTAParty {
    // message fields
    // @@protoc_insertion_point(field:CSODOTAParty.party_id)
    pub party_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CSODOTAParty.leader_id)
    pub leader_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CSODOTAParty.member_ids)
    pub member_ids: ::std::vec::Vec<u64>,
    // @@protoc_insertion_point(field:CSODOTAParty.game_modes)
    pub game_modes: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAParty.state)
    pub state: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<csodotaparty::State>>,
    // @@protoc_insertion_point(field:CSODOTAParty.effective_started_matchmaking_time)
    pub effective_started_matchmaking_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAParty.raw_started_matchmaking_time)
    pub raw_started_matchmaking_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAParty.attempt_start_time)
    pub attempt_start_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAParty.attempt_num)
    pub attempt_num: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAParty.matchgroups)
    pub matchgroups: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAParty.low_priority_account_id)
    pub low_priority_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAParty.match_type)
    pub match_type: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<super::dota_shared_enums::MatchType>>,
    // @@protoc_insertion_point(field:CSODOTAParty.team_id)
    pub team_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAParty.team_name)
    pub team_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CSODOTAParty.team_ui_logo)
    pub team_ui_logo: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CSODOTAParty.team_base_logo)
    pub team_base_logo: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CSODOTAParty.match_disabled_until_date)
    pub match_disabled_until_date: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAParty.match_disabled_account_id)
    pub match_disabled_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAParty.matchmaking_max_range_minutes)
    pub matchmaking_max_range_minutes: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAParty.matchlanguages)
    pub matchlanguages: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAParty.members)
    pub members: ::std::vec::Vec<CSODOTAPartyMember>,
    // @@protoc_insertion_point(field:CSODOTAParty.low_priority_games_remaining)
    pub low_priority_games_remaining: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAParty.open_for_join_requests)
    pub open_for_join_requests: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CSODOTAParty.sent_invites)
    pub sent_invites: ::std::vec::Vec<CSODOTAPartyInvite>,
    // @@protoc_insertion_point(field:CSODOTAParty.recv_invites)
    pub recv_invites: ::std::vec::Vec<CSODOTAPartyInvite>,
    // @@protoc_insertion_point(field:CSODOTAParty.account_flags)
    pub account_flags: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAParty.region_select_flags)
    pub region_select_flags: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAParty.exclusive_tournament_id)
    pub exclusive_tournament_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAParty.tourney_division_id)
    pub tourney_division_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAParty.tourney_schedule_time)
    pub tourney_schedule_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAParty.tourney_skill_level)
    pub tourney_skill_level: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAParty.tourney_bracket_round)
    pub tourney_bracket_round: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAParty.tourney_queue_deadline_time)
    pub tourney_queue_deadline_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAParty.tourney_queue_deadline_state)
    pub tourney_queue_deadline_state: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<super::dota_shared_enums::ETourneyQueueDeadlineState>>,
    // @@protoc_insertion_point(field:CSODOTAParty.party_builder_slots_to_fill)
    pub party_builder_slots_to_fill: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAParty.party_builder_match_groups)
    pub party_builder_match_groups: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAParty.party_builder_start_time)
    pub party_builder_start_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAParty.solo_queue)
    pub solo_queue: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CSODOTAParty.steam_clan_account_id)
    pub steam_clan_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAParty.ready_check)
    pub ready_check: ::steam_vent_proto_common::protobuf::MessageField<CMsgReadyCheckStatus>,
    // @@protoc_insertion_point(field:CSODOTAParty.custom_game_disabled_until_date)
    pub custom_game_disabled_until_date: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAParty.custom_game_disabled_account_id)
    pub custom_game_disabled_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAParty.is_challenge_match)
    pub is_challenge_match: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CSODOTAParty.party_search_beacon_active)
    pub party_search_beacon_active: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CSODOTAParty.matchmaking_flags)
    pub matchmaking_flags: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAParty.high_priority_state)
    pub high_priority_state: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<EHighPriorityMMState>>,
    // @@protoc_insertion_point(field:CSODOTAParty.lane_selections_enabled)
    pub lane_selections_enabled: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CSODOTAParty.custom_game_difficulty_mask)
    pub custom_game_difficulty_mask: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAParty.is_steam_china)
    pub is_steam_china: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CSODOTAParty.bot_difficulty_mask)
    pub bot_difficulty_mask: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAParty.bot_script_index_mask)
    pub bot_script_index_mask: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAParty.restricted_from_ranked)
    pub restricted_from_ranked: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CSODOTAParty.restricted_from_ranked_account_id)
    pub restricted_from_ranked_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAParty.rank_spread_likert_scale)
    pub rank_spread_likert_scale: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAParty.behavior_score_likert_scale)
    pub behavior_score_likert_scale: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CSODOTAParty.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSODOTAParty {
    fn default() -> &'a CSODOTAParty {
        <CSODOTAParty as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CSODOTAParty {
    pub fn new() -> CSODOTAParty {
        ::std::default::Default::default()
    }

    // optional uint64 party_id = 1;

    pub fn party_id(&self) -> u64 {
        self.party_id.unwrap_or(0)
    }

    pub fn clear_party_id(&mut self) {
        self.party_id = ::std::option::Option::None;
    }

    pub fn has_party_id(&self) -> bool {
        self.party_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_party_id(&mut self, v: u64) {
        self.party_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 leader_id = 2;

    pub fn leader_id(&self) -> u64 {
        self.leader_id.unwrap_or(0)
    }

    pub fn clear_leader_id(&mut self) {
        self.leader_id = ::std::option::Option::None;
    }

    pub fn has_leader_id(&self) -> bool {
        self.leader_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_leader_id(&mut self, v: u64) {
        self.leader_id = ::std::option::Option::Some(v);
    }

    // optional uint32 game_modes = 4;

    pub fn game_modes(&self) -> u32 {
        self.game_modes.unwrap_or(0)
    }

    pub fn clear_game_modes(&mut self) {
        self.game_modes = ::std::option::Option::None;
    }

    pub fn has_game_modes(&self) -> bool {
        self.game_modes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_modes(&mut self, v: u32) {
        self.game_modes = ::std::option::Option::Some(v);
    }

    // optional .CSODOTAParty.State state = 6;

    pub fn state(&self) -> csodotaparty::State {
        match self.state {
            Some(e) => e.enum_value_or(csodotaparty::State::UI),
            None => csodotaparty::State::UI,
        }
    }

    pub fn clear_state(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: csodotaparty::State) {
        self.state = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint32 effective_started_matchmaking_time = 7;

    pub fn effective_started_matchmaking_time(&self) -> u32 {
        self.effective_started_matchmaking_time.unwrap_or(0)
    }

    pub fn clear_effective_started_matchmaking_time(&mut self) {
        self.effective_started_matchmaking_time = ::std::option::Option::None;
    }

    pub fn has_effective_started_matchmaking_time(&self) -> bool {
        self.effective_started_matchmaking_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_effective_started_matchmaking_time(&mut self, v: u32) {
        self.effective_started_matchmaking_time = ::std::option::Option::Some(v);
    }

    // optional uint32 raw_started_matchmaking_time = 32;

    pub fn raw_started_matchmaking_time(&self) -> u32 {
        self.raw_started_matchmaking_time.unwrap_or(0)
    }

    pub fn clear_raw_started_matchmaking_time(&mut self) {
        self.raw_started_matchmaking_time = ::std::option::Option::None;
    }

    pub fn has_raw_started_matchmaking_time(&self) -> bool {
        self.raw_started_matchmaking_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_raw_started_matchmaking_time(&mut self, v: u32) {
        self.raw_started_matchmaking_time = ::std::option::Option::Some(v);
    }

    // optional uint32 attempt_start_time = 33;

    pub fn attempt_start_time(&self) -> u32 {
        self.attempt_start_time.unwrap_or(0)
    }

    pub fn clear_attempt_start_time(&mut self) {
        self.attempt_start_time = ::std::option::Option::None;
    }

    pub fn has_attempt_start_time(&self) -> bool {
        self.attempt_start_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attempt_start_time(&mut self, v: u32) {
        self.attempt_start_time = ::std::option::Option::Some(v);
    }

    // optional uint32 attempt_num = 34;

    pub fn attempt_num(&self) -> u32 {
        self.attempt_num.unwrap_or(0)
    }

    pub fn clear_attempt_num(&mut self) {
        self.attempt_num = ::std::option::Option::None;
    }

    pub fn has_attempt_num(&self) -> bool {
        self.attempt_num.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attempt_num(&mut self, v: u32) {
        self.attempt_num = ::std::option::Option::Some(v);
    }

    // optional uint32 matchgroups = 11;

    pub fn matchgroups(&self) -> u32 {
        self.matchgroups.unwrap_or(0)
    }

    pub fn clear_matchgroups(&mut self) {
        self.matchgroups = ::std::option::Option::None;
    }

    pub fn has_matchgroups(&self) -> bool {
        self.matchgroups.is_some()
    }

    // Param is passed by value, moved
    pub fn set_matchgroups(&mut self, v: u32) {
        self.matchgroups = ::std::option::Option::Some(v);
    }

    // optional uint32 low_priority_account_id = 19;

    pub fn low_priority_account_id(&self) -> u32 {
        self.low_priority_account_id.unwrap_or(0)
    }

    pub fn clear_low_priority_account_id(&mut self) {
        self.low_priority_account_id = ::std::option::Option::None;
    }

    pub fn has_low_priority_account_id(&self) -> bool {
        self.low_priority_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_low_priority_account_id(&mut self, v: u32) {
        self.low_priority_account_id = ::std::option::Option::Some(v);
    }

    // optional .MatchType match_type = 21;

    pub fn match_type(&self) -> super::dota_shared_enums::MatchType {
        match self.match_type {
            Some(e) => e.enum_value_or(super::dota_shared_enums::MatchType::MATCH_TYPE_CASUAL),
            None => super::dota_shared_enums::MatchType::MATCH_TYPE_CASUAL,
        }
    }

    pub fn clear_match_type(&mut self) {
        self.match_type = ::std::option::Option::None;
    }

    pub fn has_match_type(&self) -> bool {
        self.match_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_match_type(&mut self, v: super::dota_shared_enums::MatchType) {
        self.match_type = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint32 team_id = 23;

    pub fn team_id(&self) -> u32 {
        self.team_id.unwrap_or(0)
    }

    pub fn clear_team_id(&mut self) {
        self.team_id = ::std::option::Option::None;
    }

    pub fn has_team_id(&self) -> bool {
        self.team_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_id(&mut self, v: u32) {
        self.team_id = ::std::option::Option::Some(v);
    }

    // optional string team_name = 51;

    pub fn team_name(&self) -> &str {
        match self.team_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_team_name(&mut self) {
        self.team_name = ::std::option::Option::None;
    }

    pub fn has_team_name(&self) -> bool {
        self.team_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_name(&mut self, v: ::std::string::String) {
        self.team_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_team_name(&mut self) -> &mut ::std::string::String {
        if self.team_name.is_none() {
            self.team_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.team_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_team_name(&mut self) -> ::std::string::String {
        self.team_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 team_ui_logo = 52;

    pub fn team_ui_logo(&self) -> u64 {
        self.team_ui_logo.unwrap_or(0)
    }

    pub fn clear_team_ui_logo(&mut self) {
        self.team_ui_logo = ::std::option::Option::None;
    }

    pub fn has_team_ui_logo(&self) -> bool {
        self.team_ui_logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_ui_logo(&mut self, v: u64) {
        self.team_ui_logo = ::std::option::Option::Some(v);
    }

    // optional uint64 team_base_logo = 53;

    pub fn team_base_logo(&self) -> u64 {
        self.team_base_logo.unwrap_or(0)
    }

    pub fn clear_team_base_logo(&mut self) {
        self.team_base_logo = ::std::option::Option::None;
    }

    pub fn has_team_base_logo(&self) -> bool {
        self.team_base_logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_base_logo(&mut self, v: u64) {
        self.team_base_logo = ::std::option::Option::Some(v);
    }

    // optional uint32 match_disabled_until_date = 24;

    pub fn match_disabled_until_date(&self) -> u32 {
        self.match_disabled_until_date.unwrap_or(0)
    }

    pub fn clear_match_disabled_until_date(&mut self) {
        self.match_disabled_until_date = ::std::option::Option::None;
    }

    pub fn has_match_disabled_until_date(&self) -> bool {
        self.match_disabled_until_date.is_some()
    }

    // Param is passed by value, moved
    pub fn set_match_disabled_until_date(&mut self, v: u32) {
        self.match_disabled_until_date = ::std::option::Option::Some(v);
    }

    // optional uint32 match_disabled_account_id = 25;

    pub fn match_disabled_account_id(&self) -> u32 {
        self.match_disabled_account_id.unwrap_or(0)
    }

    pub fn clear_match_disabled_account_id(&mut self) {
        self.match_disabled_account_id = ::std::option::Option::None;
    }

    pub fn has_match_disabled_account_id(&self) -> bool {
        self.match_disabled_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_match_disabled_account_id(&mut self, v: u32) {
        self.match_disabled_account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 matchmaking_max_range_minutes = 26;

    pub fn matchmaking_max_range_minutes(&self) -> u32 {
        self.matchmaking_max_range_minutes.unwrap_or(0)
    }

    pub fn clear_matchmaking_max_range_minutes(&mut self) {
        self.matchmaking_max_range_minutes = ::std::option::Option::None;
    }

    pub fn has_matchmaking_max_range_minutes(&self) -> bool {
        self.matchmaking_max_range_minutes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_matchmaking_max_range_minutes(&mut self, v: u32) {
        self.matchmaking_max_range_minutes = ::std::option::Option::Some(v);
    }

    // optional uint32 matchlanguages = 27;

    pub fn matchlanguages(&self) -> u32 {
        self.matchlanguages.unwrap_or(0)
    }

    pub fn clear_matchlanguages(&mut self) {
        self.matchlanguages = ::std::option::Option::None;
    }

    pub fn has_matchlanguages(&self) -> bool {
        self.matchlanguages.is_some()
    }

    // Param is passed by value, moved
    pub fn set_matchlanguages(&mut self, v: u32) {
        self.matchlanguages = ::std::option::Option::Some(v);
    }

    // optional uint32 low_priority_games_remaining = 35;

    pub fn low_priority_games_remaining(&self) -> u32 {
        self.low_priority_games_remaining.unwrap_or(0)
    }

    pub fn clear_low_priority_games_remaining(&mut self) {
        self.low_priority_games_remaining = ::std::option::Option::None;
    }

    pub fn has_low_priority_games_remaining(&self) -> bool {
        self.low_priority_games_remaining.is_some()
    }

    // Param is passed by value, moved
    pub fn set_low_priority_games_remaining(&mut self, v: u32) {
        self.low_priority_games_remaining = ::std::option::Option::Some(v);
    }

    // optional bool open_for_join_requests = 40;

    pub fn open_for_join_requests(&self) -> bool {
        self.open_for_join_requests.unwrap_or(false)
    }

    pub fn clear_open_for_join_requests(&mut self) {
        self.open_for_join_requests = ::std::option::Option::None;
    }

    pub fn has_open_for_join_requests(&self) -> bool {
        self.open_for_join_requests.is_some()
    }

    // Param is passed by value, moved
    pub fn set_open_for_join_requests(&mut self, v: bool) {
        self.open_for_join_requests = ::std::option::Option::Some(v);
    }

    // optional uint32 account_flags = 43;

    pub fn account_flags(&self) -> u32 {
        self.account_flags.unwrap_or(0)
    }

    pub fn clear_account_flags(&mut self) {
        self.account_flags = ::std::option::Option::None;
    }

    pub fn has_account_flags(&self) -> bool {
        self.account_flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_flags(&mut self, v: u32) {
        self.account_flags = ::std::option::Option::Some(v);
    }

    // optional uint32 region_select_flags = 44;

    pub fn region_select_flags(&self) -> u32 {
        self.region_select_flags.unwrap_or(0)
    }

    pub fn clear_region_select_flags(&mut self) {
        self.region_select_flags = ::std::option::Option::None;
    }

    pub fn has_region_select_flags(&self) -> bool {
        self.region_select_flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_region_select_flags(&mut self, v: u32) {
        self.region_select_flags = ::std::option::Option::Some(v);
    }

    // optional uint32 exclusive_tournament_id = 45;

    pub fn exclusive_tournament_id(&self) -> u32 {
        self.exclusive_tournament_id.unwrap_or(0)
    }

    pub fn clear_exclusive_tournament_id(&mut self) {
        self.exclusive_tournament_id = ::std::option::Option::None;
    }

    pub fn has_exclusive_tournament_id(&self) -> bool {
        self.exclusive_tournament_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_exclusive_tournament_id(&mut self, v: u32) {
        self.exclusive_tournament_id = ::std::option::Option::Some(v);
    }

    // optional uint32 tourney_division_id = 47;

    pub fn tourney_division_id(&self) -> u32 {
        self.tourney_division_id.unwrap_or(0)
    }

    pub fn clear_tourney_division_id(&mut self) {
        self.tourney_division_id = ::std::option::Option::None;
    }

    pub fn has_tourney_division_id(&self) -> bool {
        self.tourney_division_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tourney_division_id(&mut self, v: u32) {
        self.tourney_division_id = ::std::option::Option::Some(v);
    }

    // optional uint32 tourney_schedule_time = 48;

    pub fn tourney_schedule_time(&self) -> u32 {
        self.tourney_schedule_time.unwrap_or(0)
    }

    pub fn clear_tourney_schedule_time(&mut self) {
        self.tourney_schedule_time = ::std::option::Option::None;
    }

    pub fn has_tourney_schedule_time(&self) -> bool {
        self.tourney_schedule_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tourney_schedule_time(&mut self, v: u32) {
        self.tourney_schedule_time = ::std::option::Option::Some(v);
    }

    // optional uint32 tourney_skill_level = 49;

    pub fn tourney_skill_level(&self) -> u32 {
        self.tourney_skill_level.unwrap_or(0)
    }

    pub fn clear_tourney_skill_level(&mut self) {
        self.tourney_skill_level = ::std::option::Option::None;
    }

    pub fn has_tourney_skill_level(&self) -> bool {
        self.tourney_skill_level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tourney_skill_level(&mut self, v: u32) {
        self.tourney_skill_level = ::std::option::Option::Some(v);
    }

    // optional uint32 tourney_bracket_round = 50;

    pub fn tourney_bracket_round(&self) -> u32 {
        self.tourney_bracket_round.unwrap_or(0)
    }

    pub fn clear_tourney_bracket_round(&mut self) {
        self.tourney_bracket_round = ::std::option::Option::None;
    }

    pub fn has_tourney_bracket_round(&self) -> bool {
        self.tourney_bracket_round.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tourney_bracket_round(&mut self, v: u32) {
        self.tourney_bracket_round = ::std::option::Option::Some(v);
    }

    // optional uint32 tourney_queue_deadline_time = 54;

    pub fn tourney_queue_deadline_time(&self) -> u32 {
        self.tourney_queue_deadline_time.unwrap_or(0)
    }

    pub fn clear_tourney_queue_deadline_time(&mut self) {
        self.tourney_queue_deadline_time = ::std::option::Option::None;
    }

    pub fn has_tourney_queue_deadline_time(&self) -> bool {
        self.tourney_queue_deadline_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tourney_queue_deadline_time(&mut self, v: u32) {
        self.tourney_queue_deadline_time = ::std::option::Option::Some(v);
    }

    // optional .ETourneyQueueDeadlineState tourney_queue_deadline_state = 55;

    pub fn tourney_queue_deadline_state(&self) -> super::dota_shared_enums::ETourneyQueueDeadlineState {
        match self.tourney_queue_deadline_state {
            Some(e) => e.enum_value_or(super::dota_shared_enums::ETourneyQueueDeadlineState::k_ETourneyQueueDeadlineState_Normal),
            None => super::dota_shared_enums::ETourneyQueueDeadlineState::k_ETourneyQueueDeadlineState_Normal,
        }
    }

    pub fn clear_tourney_queue_deadline_state(&mut self) {
        self.tourney_queue_deadline_state = ::std::option::Option::None;
    }

    pub fn has_tourney_queue_deadline_state(&self) -> bool {
        self.tourney_queue_deadline_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tourney_queue_deadline_state(&mut self, v: super::dota_shared_enums::ETourneyQueueDeadlineState) {
        self.tourney_queue_deadline_state = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint32 party_builder_slots_to_fill = 56;

    pub fn party_builder_slots_to_fill(&self) -> u32 {
        self.party_builder_slots_to_fill.unwrap_or(0)
    }

    pub fn clear_party_builder_slots_to_fill(&mut self) {
        self.party_builder_slots_to_fill = ::std::option::Option::None;
    }

    pub fn has_party_builder_slots_to_fill(&self) -> bool {
        self.party_builder_slots_to_fill.is_some()
    }

    // Param is passed by value, moved
    pub fn set_party_builder_slots_to_fill(&mut self, v: u32) {
        self.party_builder_slots_to_fill = ::std::option::Option::Some(v);
    }

    // optional uint32 party_builder_match_groups = 57;

    pub fn party_builder_match_groups(&self) -> u32 {
        self.party_builder_match_groups.unwrap_or(0)
    }

    pub fn clear_party_builder_match_groups(&mut self) {
        self.party_builder_match_groups = ::std::option::Option::None;
    }

    pub fn has_party_builder_match_groups(&self) -> bool {
        self.party_builder_match_groups.is_some()
    }

    // Param is passed by value, moved
    pub fn set_party_builder_match_groups(&mut self, v: u32) {
        self.party_builder_match_groups = ::std::option::Option::Some(v);
    }

    // optional uint32 party_builder_start_time = 58;

    pub fn party_builder_start_time(&self) -> u32 {
        self.party_builder_start_time.unwrap_or(0)
    }

    pub fn clear_party_builder_start_time(&mut self) {
        self.party_builder_start_time = ::std::option::Option::None;
    }

    pub fn has_party_builder_start_time(&self) -> bool {
        self.party_builder_start_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_party_builder_start_time(&mut self, v: u32) {
        self.party_builder_start_time = ::std::option::Option::Some(v);
    }

    // optional bool solo_queue = 59;

    pub fn solo_queue(&self) -> bool {
        self.solo_queue.unwrap_or(false)
    }

    pub fn clear_solo_queue(&mut self) {
        self.solo_queue = ::std::option::Option::None;
    }

    pub fn has_solo_queue(&self) -> bool {
        self.solo_queue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_solo_queue(&mut self, v: bool) {
        self.solo_queue = ::std::option::Option::Some(v);
    }

    // optional uint32 steam_clan_account_id = 61;

    pub fn steam_clan_account_id(&self) -> u32 {
        self.steam_clan_account_id.unwrap_or(0)
    }

    pub fn clear_steam_clan_account_id(&mut self) {
        self.steam_clan_account_id = ::std::option::Option::None;
    }

    pub fn has_steam_clan_account_id(&self) -> bool {
        self.steam_clan_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_clan_account_id(&mut self, v: u32) {
        self.steam_clan_account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 custom_game_disabled_until_date = 63;

    pub fn custom_game_disabled_until_date(&self) -> u32 {
        self.custom_game_disabled_until_date.unwrap_or(0)
    }

    pub fn clear_custom_game_disabled_until_date(&mut self) {
        self.custom_game_disabled_until_date = ::std::option::Option::None;
    }

    pub fn has_custom_game_disabled_until_date(&self) -> bool {
        self.custom_game_disabled_until_date.is_some()
    }

    // Param is passed by value, moved
    pub fn set_custom_game_disabled_until_date(&mut self, v: u32) {
        self.custom_game_disabled_until_date = ::std::option::Option::Some(v);
    }

    // optional uint32 custom_game_disabled_account_id = 64;

    pub fn custom_game_disabled_account_id(&self) -> u32 {
        self.custom_game_disabled_account_id.unwrap_or(0)
    }

    pub fn clear_custom_game_disabled_account_id(&mut self) {
        self.custom_game_disabled_account_id = ::std::option::Option::None;
    }

    pub fn has_custom_game_disabled_account_id(&self) -> bool {
        self.custom_game_disabled_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_custom_game_disabled_account_id(&mut self, v: u32) {
        self.custom_game_disabled_account_id = ::std::option::Option::Some(v);
    }

    // optional bool is_challenge_match = 65;

    pub fn is_challenge_match(&self) -> bool {
        self.is_challenge_match.unwrap_or(false)
    }

    pub fn clear_is_challenge_match(&mut self) {
        self.is_challenge_match = ::std::option::Option::None;
    }

    pub fn has_is_challenge_match(&self) -> bool {
        self.is_challenge_match.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_challenge_match(&mut self, v: bool) {
        self.is_challenge_match = ::std::option::Option::Some(v);
    }

    // optional bool party_search_beacon_active = 66;

    pub fn party_search_beacon_active(&self) -> bool {
        self.party_search_beacon_active.unwrap_or(false)
    }

    pub fn clear_party_search_beacon_active(&mut self) {
        self.party_search_beacon_active = ::std::option::Option::None;
    }

    pub fn has_party_search_beacon_active(&self) -> bool {
        self.party_search_beacon_active.is_some()
    }

    // Param is passed by value, moved
    pub fn set_party_search_beacon_active(&mut self, v: bool) {
        self.party_search_beacon_active = ::std::option::Option::Some(v);
    }

    // optional uint32 matchmaking_flags = 67;

    pub fn matchmaking_flags(&self) -> u32 {
        self.matchmaking_flags.unwrap_or(0)
    }

    pub fn clear_matchmaking_flags(&mut self) {
        self.matchmaking_flags = ::std::option::Option::None;
    }

    pub fn has_matchmaking_flags(&self) -> bool {
        self.matchmaking_flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_matchmaking_flags(&mut self, v: u32) {
        self.matchmaking_flags = ::std::option::Option::Some(v);
    }

    // optional .EHighPriorityMMState high_priority_state = 68;

    pub fn high_priority_state(&self) -> EHighPriorityMMState {
        match self.high_priority_state {
            Some(e) => e.enum_value_or(EHighPriorityMMState::k_EHighPriorityMM_Unknown),
            None => EHighPriorityMMState::k_EHighPriorityMM_Unknown,
        }
    }

    pub fn clear_high_priority_state(&mut self) {
        self.high_priority_state = ::std::option::Option::None;
    }

    pub fn has_high_priority_state(&self) -> bool {
        self.high_priority_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_high_priority_state(&mut self, v: EHighPriorityMMState) {
        self.high_priority_state = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional bool lane_selections_enabled = 69;

    pub fn lane_selections_enabled(&self) -> bool {
        self.lane_selections_enabled.unwrap_or(false)
    }

    pub fn clear_lane_selections_enabled(&mut self) {
        self.lane_selections_enabled = ::std::option::Option::None;
    }

    pub fn has_lane_selections_enabled(&self) -> bool {
        self.lane_selections_enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lane_selections_enabled(&mut self, v: bool) {
        self.lane_selections_enabled = ::std::option::Option::Some(v);
    }

    // optional uint32 custom_game_difficulty_mask = 70;

    pub fn custom_game_difficulty_mask(&self) -> u32 {
        self.custom_game_difficulty_mask.unwrap_or(0)
    }

    pub fn clear_custom_game_difficulty_mask(&mut self) {
        self.custom_game_difficulty_mask = ::std::option::Option::None;
    }

    pub fn has_custom_game_difficulty_mask(&self) -> bool {
        self.custom_game_difficulty_mask.is_some()
    }

    // Param is passed by value, moved
    pub fn set_custom_game_difficulty_mask(&mut self, v: u32) {
        self.custom_game_difficulty_mask = ::std::option::Option::Some(v);
    }

    // optional bool is_steam_china = 71;

    pub fn is_steam_china(&self) -> bool {
        self.is_steam_china.unwrap_or(false)
    }

    pub fn clear_is_steam_china(&mut self) {
        self.is_steam_china = ::std::option::Option::None;
    }

    pub fn has_is_steam_china(&self) -> bool {
        self.is_steam_china.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_steam_china(&mut self, v: bool) {
        self.is_steam_china = ::std::option::Option::Some(v);
    }

    // optional uint32 bot_difficulty_mask = 72;

    pub fn bot_difficulty_mask(&self) -> u32 {
        self.bot_difficulty_mask.unwrap_or(0)
    }

    pub fn clear_bot_difficulty_mask(&mut self) {
        self.bot_difficulty_mask = ::std::option::Option::None;
    }

    pub fn has_bot_difficulty_mask(&self) -> bool {
        self.bot_difficulty_mask.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bot_difficulty_mask(&mut self, v: u32) {
        self.bot_difficulty_mask = ::std::option::Option::Some(v);
    }

    // optional uint32 bot_script_index_mask = 73;

    pub fn bot_script_index_mask(&self) -> u32 {
        self.bot_script_index_mask.unwrap_or(0)
    }

    pub fn clear_bot_script_index_mask(&mut self) {
        self.bot_script_index_mask = ::std::option::Option::None;
    }

    pub fn has_bot_script_index_mask(&self) -> bool {
        self.bot_script_index_mask.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bot_script_index_mask(&mut self, v: u32) {
        self.bot_script_index_mask = ::std::option::Option::Some(v);
    }

    // optional bool restricted_from_ranked = 74;

    pub fn restricted_from_ranked(&self) -> bool {
        self.restricted_from_ranked.unwrap_or(false)
    }

    pub fn clear_restricted_from_ranked(&mut self) {
        self.restricted_from_ranked = ::std::option::Option::None;
    }

    pub fn has_restricted_from_ranked(&self) -> bool {
        self.restricted_from_ranked.is_some()
    }

    // Param is passed by value, moved
    pub fn set_restricted_from_ranked(&mut self, v: bool) {
        self.restricted_from_ranked = ::std::option::Option::Some(v);
    }

    // optional uint32 restricted_from_ranked_account_id = 75;

    pub fn restricted_from_ranked_account_id(&self) -> u32 {
        self.restricted_from_ranked_account_id.unwrap_or(0)
    }

    pub fn clear_restricted_from_ranked_account_id(&mut self) {
        self.restricted_from_ranked_account_id = ::std::option::Option::None;
    }

    pub fn has_restricted_from_ranked_account_id(&self) -> bool {
        self.restricted_from_ranked_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_restricted_from_ranked_account_id(&mut self, v: u32) {
        self.restricted_from_ranked_account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 rank_spread_likert_scale = 76;

    pub fn rank_spread_likert_scale(&self) -> u32 {
        self.rank_spread_likert_scale.unwrap_or(0)
    }

    pub fn clear_rank_spread_likert_scale(&mut self) {
        self.rank_spread_likert_scale = ::std::option::Option::None;
    }

    pub fn has_rank_spread_likert_scale(&self) -> bool {
        self.rank_spread_likert_scale.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rank_spread_likert_scale(&mut self, v: u32) {
        self.rank_spread_likert_scale = ::std::option::Option::Some(v);
    }

    // optional uint32 behavior_score_likert_scale = 77;

    pub fn behavior_score_likert_scale(&self) -> u32 {
        self.behavior_score_likert_scale.unwrap_or(0)
    }

    pub fn clear_behavior_score_likert_scale(&mut self) {
        self.behavior_score_likert_scale = ::std::option::Option::None;
    }

    pub fn has_behavior_score_likert_scale(&self) -> bool {
        self.behavior_score_likert_scale.is_some()
    }

    // Param is passed by value, moved
    pub fn set_behavior_score_likert_scale(&mut self, v: u32) {
        self.behavior_score_likert_scale = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CSODOTAParty {
    const NAME: &'static str = "CSODOTAParty";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.party_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                17 => {
                    self.leader_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                26 => {
                    is.read_repeated_packed_fixed64_into(&mut self.member_ids)?;
                },
                25 => {
                    self.member_ids.push(is.read_fixed64()?);
                },
                32 => {
                    self.game_modes = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.state = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                56 => {
                    self.effective_started_matchmaking_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                256 => {
                    self.raw_started_matchmaking_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                264 => {
                    self.attempt_start_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                272 => {
                    self.attempt_num = ::std::option::Option::Some(is.read_uint32()?);
                },
                88 => {
                    self.matchgroups = ::std::option::Option::Some(is.read_uint32()?);
                },
                152 => {
                    self.low_priority_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                168 => {
                    self.match_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                184 => {
                    self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                410 => {
                    self.team_name = ::std::option::Option::Some(is.read_string()?);
                },
                416 => {
                    self.team_ui_logo = ::std::option::Option::Some(is.read_uint64()?);
                },
                424 => {
                    self.team_base_logo = ::std::option::Option::Some(is.read_uint64()?);
                },
                192 => {
                    self.match_disabled_until_date = ::std::option::Option::Some(is.read_uint32()?);
                },
                200 => {
                    self.match_disabled_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                208 => {
                    self.matchmaking_max_range_minutes = ::std::option::Option::Some(is.read_uint32()?);
                },
                216 => {
                    self.matchlanguages = ::std::option::Option::Some(is.read_uint32()?);
                },
                234 => {
                    self.members.push(is.read_message()?);
                },
                280 => {
                    self.low_priority_games_remaining = ::std::option::Option::Some(is.read_uint32()?);
                },
                320 => {
                    self.open_for_join_requests = ::std::option::Option::Some(is.read_bool()?);
                },
                330 => {
                    self.sent_invites.push(is.read_message()?);
                },
                338 => {
                    self.recv_invites.push(is.read_message()?);
                },
                344 => {
                    self.account_flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                352 => {
                    self.region_select_flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                360 => {
                    self.exclusive_tournament_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                376 => {
                    self.tourney_division_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                384 => {
                    self.tourney_schedule_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                392 => {
                    self.tourney_skill_level = ::std::option::Option::Some(is.read_uint32()?);
                },
                400 => {
                    self.tourney_bracket_round = ::std::option::Option::Some(is.read_uint32()?);
                },
                432 => {
                    self.tourney_queue_deadline_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                440 => {
                    self.tourney_queue_deadline_state = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                448 => {
                    self.party_builder_slots_to_fill = ::std::option::Option::Some(is.read_uint32()?);
                },
                456 => {
                    self.party_builder_match_groups = ::std::option::Option::Some(is.read_uint32()?);
                },
                464 => {
                    self.party_builder_start_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                472 => {
                    self.solo_queue = ::std::option::Option::Some(is.read_bool()?);
                },
                488 => {
                    self.steam_clan_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                498 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.ready_check)?;
                },
                504 => {
                    self.custom_game_disabled_until_date = ::std::option::Option::Some(is.read_uint32()?);
                },
                512 => {
                    self.custom_game_disabled_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                520 => {
                    self.is_challenge_match = ::std::option::Option::Some(is.read_bool()?);
                },
                528 => {
                    self.party_search_beacon_active = ::std::option::Option::Some(is.read_bool()?);
                },
                536 => {
                    self.matchmaking_flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                544 => {
                    self.high_priority_state = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                552 => {
                    self.lane_selections_enabled = ::std::option::Option::Some(is.read_bool()?);
                },
                560 => {
                    self.custom_game_difficulty_mask = ::std::option::Option::Some(is.read_uint32()?);
                },
                568 => {
                    self.is_steam_china = ::std::option::Option::Some(is.read_bool()?);
                },
                576 => {
                    self.bot_difficulty_mask = ::std::option::Option::Some(is.read_uint32()?);
                },
                584 => {
                    self.bot_script_index_mask = ::std::option::Option::Some(is.read_uint32()?);
                },
                592 => {
                    self.restricted_from_ranked = ::std::option::Option::Some(is.read_bool()?);
                },
                600 => {
                    self.restricted_from_ranked_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                608 => {
                    self.rank_spread_likert_scale = ::std::option::Option::Some(is.read_uint32()?);
                },
                616 => {
                    self.behavior_score_likert_scale = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.party_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.leader_id {
            my_size += 1 + 8;
        }
        my_size += 9 * self.member_ids.len() as u64;
        if let Some(v) = self.game_modes {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.state {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(6, v.value());
        }
        if let Some(v) = self.effective_started_matchmaking_time {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(7, v);
        }
        if let Some(v) = self.raw_started_matchmaking_time {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(32, v);
        }
        if let Some(v) = self.attempt_start_time {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(33, v);
        }
        if let Some(v) = self.attempt_num {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(34, v);
        }
        if let Some(v) = self.matchgroups {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(11, v);
        }
        if let Some(v) = self.low_priority_account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(19, v);
        }
        if let Some(v) = self.match_type {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(21, v.value());
        }
        if let Some(v) = self.team_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(23, v);
        }
        if let Some(v) = self.team_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(51, &v);
        }
        if let Some(v) = self.team_ui_logo {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(52, v);
        }
        if let Some(v) = self.team_base_logo {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(53, v);
        }
        if let Some(v) = self.match_disabled_until_date {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(24, v);
        }
        if let Some(v) = self.match_disabled_account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(25, v);
        }
        if let Some(v) = self.matchmaking_max_range_minutes {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(26, v);
        }
        if let Some(v) = self.matchlanguages {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(27, v);
        }
        for value in &self.members {
            let len = value.compute_size();
            my_size += 2 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.low_priority_games_remaining {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(35, v);
        }
        if let Some(v) = self.open_for_join_requests {
            my_size += 2 + 1;
        }
        for value in &self.sent_invites {
            let len = value.compute_size();
            my_size += 2 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.recv_invites {
            let len = value.compute_size();
            my_size += 2 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.account_flags {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(43, v);
        }
        if let Some(v) = self.region_select_flags {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(44, v);
        }
        if let Some(v) = self.exclusive_tournament_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(45, v);
        }
        if let Some(v) = self.tourney_division_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(47, v);
        }
        if let Some(v) = self.tourney_schedule_time {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(48, v);
        }
        if let Some(v) = self.tourney_skill_level {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(49, v);
        }
        if let Some(v) = self.tourney_bracket_round {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(50, v);
        }
        if let Some(v) = self.tourney_queue_deadline_time {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(54, v);
        }
        if let Some(v) = self.tourney_queue_deadline_state {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(55, v.value());
        }
        if let Some(v) = self.party_builder_slots_to_fill {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(56, v);
        }
        if let Some(v) = self.party_builder_match_groups {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(57, v);
        }
        if let Some(v) = self.party_builder_start_time {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(58, v);
        }
        if let Some(v) = self.solo_queue {
            my_size += 2 + 1;
        }
        if let Some(v) = self.steam_clan_account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(61, v);
        }
        if let Some(v) = self.ready_check.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.custom_game_disabled_until_date {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(63, v);
        }
        if let Some(v) = self.custom_game_disabled_account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(64, v);
        }
        if let Some(v) = self.is_challenge_match {
            my_size += 2 + 1;
        }
        if let Some(v) = self.party_search_beacon_active {
            my_size += 2 + 1;
        }
        if let Some(v) = self.matchmaking_flags {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(67, v);
        }
        if let Some(v) = self.high_priority_state {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(68, v.value());
        }
        if let Some(v) = self.lane_selections_enabled {
            my_size += 2 + 1;
        }
        if let Some(v) = self.custom_game_difficulty_mask {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(70, v);
        }
        if let Some(v) = self.is_steam_china {
            my_size += 2 + 1;
        }
        if let Some(v) = self.bot_difficulty_mask {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(72, v);
        }
        if let Some(v) = self.bot_script_index_mask {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(73, v);
        }
        if let Some(v) = self.restricted_from_ranked {
            my_size += 2 + 1;
        }
        if let Some(v) = self.restricted_from_ranked_account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(75, v);
        }
        if let Some(v) = self.rank_spread_likert_scale {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(76, v);
        }
        if let Some(v) = self.behavior_score_likert_scale {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(77, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.party_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.leader_id {
            os.write_fixed64(2, v)?;
        }
        for v in &self.member_ids {
            os.write_fixed64(3, *v)?;
        };
        if let Some(v) = self.game_modes {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.state {
            os.write_enum(6, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.effective_started_matchmaking_time {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.raw_started_matchmaking_time {
            os.write_uint32(32, v)?;
        }
        if let Some(v) = self.attempt_start_time {
            os.write_uint32(33, v)?;
        }
        if let Some(v) = self.attempt_num {
            os.write_uint32(34, v)?;
        }
        if let Some(v) = self.matchgroups {
            os.write_uint32(11, v)?;
        }
        if let Some(v) = self.low_priority_account_id {
            os.write_uint32(19, v)?;
        }
        if let Some(v) = self.match_type {
            os.write_enum(21, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.team_id {
            os.write_uint32(23, v)?;
        }
        if let Some(v) = self.team_name.as_ref() {
            os.write_string(51, v)?;
        }
        if let Some(v) = self.team_ui_logo {
            os.write_uint64(52, v)?;
        }
        if let Some(v) = self.team_base_logo {
            os.write_uint64(53, v)?;
        }
        if let Some(v) = self.match_disabled_until_date {
            os.write_uint32(24, v)?;
        }
        if let Some(v) = self.match_disabled_account_id {
            os.write_uint32(25, v)?;
        }
        if let Some(v) = self.matchmaking_max_range_minutes {
            os.write_uint32(26, v)?;
        }
        if let Some(v) = self.matchlanguages {
            os.write_uint32(27, v)?;
        }
        for v in &self.members {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(29, v, os)?;
        };
        if let Some(v) = self.low_priority_games_remaining {
            os.write_uint32(35, v)?;
        }
        if let Some(v) = self.open_for_join_requests {
            os.write_bool(40, v)?;
        }
        for v in &self.sent_invites {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(41, v, os)?;
        };
        for v in &self.recv_invites {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(42, v, os)?;
        };
        if let Some(v) = self.account_flags {
            os.write_uint32(43, v)?;
        }
        if let Some(v) = self.region_select_flags {
            os.write_uint32(44, v)?;
        }
        if let Some(v) = self.exclusive_tournament_id {
            os.write_uint32(45, v)?;
        }
        if let Some(v) = self.tourney_division_id {
            os.write_uint32(47, v)?;
        }
        if let Some(v) = self.tourney_schedule_time {
            os.write_uint32(48, v)?;
        }
        if let Some(v) = self.tourney_skill_level {
            os.write_uint32(49, v)?;
        }
        if let Some(v) = self.tourney_bracket_round {
            os.write_uint32(50, v)?;
        }
        if let Some(v) = self.tourney_queue_deadline_time {
            os.write_uint32(54, v)?;
        }
        if let Some(v) = self.tourney_queue_deadline_state {
            os.write_enum(55, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.party_builder_slots_to_fill {
            os.write_uint32(56, v)?;
        }
        if let Some(v) = self.party_builder_match_groups {
            os.write_uint32(57, v)?;
        }
        if let Some(v) = self.party_builder_start_time {
            os.write_uint32(58, v)?;
        }
        if let Some(v) = self.solo_queue {
            os.write_bool(59, v)?;
        }
        if let Some(v) = self.steam_clan_account_id {
            os.write_uint32(61, v)?;
        }
        if let Some(v) = self.ready_check.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(62, v, os)?;
        }
        if let Some(v) = self.custom_game_disabled_until_date {
            os.write_uint32(63, v)?;
        }
        if let Some(v) = self.custom_game_disabled_account_id {
            os.write_uint32(64, v)?;
        }
        if let Some(v) = self.is_challenge_match {
            os.write_bool(65, v)?;
        }
        if let Some(v) = self.party_search_beacon_active {
            os.write_bool(66, v)?;
        }
        if let Some(v) = self.matchmaking_flags {
            os.write_uint32(67, v)?;
        }
        if let Some(v) = self.high_priority_state {
            os.write_enum(68, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.lane_selections_enabled {
            os.write_bool(69, v)?;
        }
        if let Some(v) = self.custom_game_difficulty_mask {
            os.write_uint32(70, v)?;
        }
        if let Some(v) = self.is_steam_china {
            os.write_bool(71, v)?;
        }
        if let Some(v) = self.bot_difficulty_mask {
            os.write_uint32(72, v)?;
        }
        if let Some(v) = self.bot_script_index_mask {
            os.write_uint32(73, v)?;
        }
        if let Some(v) = self.restricted_from_ranked {
            os.write_bool(74, v)?;
        }
        if let Some(v) = self.restricted_from_ranked_account_id {
            os.write_uint32(75, v)?;
        }
        if let Some(v) = self.rank_spread_likert_scale {
            os.write_uint32(76, v)?;
        }
        if let Some(v) = self.behavior_score_likert_scale {
            os.write_uint32(77, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSODOTAParty {
        CSODOTAParty::new()
    }

    fn clear(&mut self) {
        self.party_id = ::std::option::Option::None;
        self.leader_id = ::std::option::Option::None;
        self.member_ids.clear();
        self.game_modes = ::std::option::Option::None;
        self.state = ::std::option::Option::None;
        self.effective_started_matchmaking_time = ::std::option::Option::None;
        self.raw_started_matchmaking_time = ::std::option::Option::None;
        self.attempt_start_time = ::std::option::Option::None;
        self.attempt_num = ::std::option::Option::None;
        self.matchgroups = ::std::option::Option::None;
        self.low_priority_account_id = ::std::option::Option::None;
        self.match_type = ::std::option::Option::None;
        self.team_id = ::std::option::Option::None;
        self.team_name = ::std::option::Option::None;
        self.team_ui_logo = ::std::option::Option::None;
        self.team_base_logo = ::std::option::Option::None;
        self.match_disabled_until_date = ::std::option::Option::None;
        self.match_disabled_account_id = ::std::option::Option::None;
        self.matchmaking_max_range_minutes = ::std::option::Option::None;
        self.matchlanguages = ::std::option::Option::None;
        self.members.clear();
        self.low_priority_games_remaining = ::std::option::Option::None;
        self.open_for_join_requests = ::std::option::Option::None;
        self.sent_invites.clear();
        self.recv_invites.clear();
        self.account_flags = ::std::option::Option::None;
        self.region_select_flags = ::std::option::Option::None;
        self.exclusive_tournament_id = ::std::option::Option::None;
        self.tourney_division_id = ::std::option::Option::None;
        self.tourney_schedule_time = ::std::option::Option::None;
        self.tourney_skill_level = ::std::option::Option::None;
        self.tourney_bracket_round = ::std::option::Option::None;
        self.tourney_queue_deadline_time = ::std::option::Option::None;
        self.tourney_queue_deadline_state = ::std::option::Option::None;
        self.party_builder_slots_to_fill = ::std::option::Option::None;
        self.party_builder_match_groups = ::std::option::Option::None;
        self.party_builder_start_time = ::std::option::Option::None;
        self.solo_queue = ::std::option::Option::None;
        self.steam_clan_account_id = ::std::option::Option::None;
        self.ready_check.clear();
        self.custom_game_disabled_until_date = ::std::option::Option::None;
        self.custom_game_disabled_account_id = ::std::option::Option::None;
        self.is_challenge_match = ::std::option::Option::None;
        self.party_search_beacon_active = ::std::option::Option::None;
        self.matchmaking_flags = ::std::option::Option::None;
        self.high_priority_state = ::std::option::Option::None;
        self.lane_selections_enabled = ::std::option::Option::None;
        self.custom_game_difficulty_mask = ::std::option::Option::None;
        self.is_steam_china = ::std::option::Option::None;
        self.bot_difficulty_mask = ::std::option::Option::None;
        self.bot_script_index_mask = ::std::option::Option::None;
        self.restricted_from_ranked = ::std::option::Option::None;
        self.restricted_from_ranked_account_id = ::std::option::Option::None;
        self.rank_spread_likert_scale = ::std::option::Option::None;
        self.behavior_score_likert_scale = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSODOTAParty {
        static instance: CSODOTAParty = CSODOTAParty {
            party_id: ::std::option::Option::None,
            leader_id: ::std::option::Option::None,
            member_ids: ::std::vec::Vec::new(),
            game_modes: ::std::option::Option::None,
            state: ::std::option::Option::None,
            effective_started_matchmaking_time: ::std::option::Option::None,
            raw_started_matchmaking_time: ::std::option::Option::None,
            attempt_start_time: ::std::option::Option::None,
            attempt_num: ::std::option::Option::None,
            matchgroups: ::std::option::Option::None,
            low_priority_account_id: ::std::option::Option::None,
            match_type: ::std::option::Option::None,
            team_id: ::std::option::Option::None,
            team_name: ::std::option::Option::None,
            team_ui_logo: ::std::option::Option::None,
            team_base_logo: ::std::option::Option::None,
            match_disabled_until_date: ::std::option::Option::None,
            match_disabled_account_id: ::std::option::Option::None,
            matchmaking_max_range_minutes: ::std::option::Option::None,
            matchlanguages: ::std::option::Option::None,
            members: ::std::vec::Vec::new(),
            low_priority_games_remaining: ::std::option::Option::None,
            open_for_join_requests: ::std::option::Option::None,
            sent_invites: ::std::vec::Vec::new(),
            recv_invites: ::std::vec::Vec::new(),
            account_flags: ::std::option::Option::None,
            region_select_flags: ::std::option::Option::None,
            exclusive_tournament_id: ::std::option::Option::None,
            tourney_division_id: ::std::option::Option::None,
            tourney_schedule_time: ::std::option::Option::None,
            tourney_skill_level: ::std::option::Option::None,
            tourney_bracket_round: ::std::option::Option::None,
            tourney_queue_deadline_time: ::std::option::Option::None,
            tourney_queue_deadline_state: ::std::option::Option::None,
            party_builder_slots_to_fill: ::std::option::Option::None,
            party_builder_match_groups: ::std::option::Option::None,
            party_builder_start_time: ::std::option::Option::None,
            solo_queue: ::std::option::Option::None,
            steam_clan_account_id: ::std::option::Option::None,
            ready_check: ::steam_vent_proto_common::protobuf::MessageField::none(),
            custom_game_disabled_until_date: ::std::option::Option::None,
            custom_game_disabled_account_id: ::std::option::Option::None,
            is_challenge_match: ::std::option::Option::None,
            party_search_beacon_active: ::std::option::Option::None,
            matchmaking_flags: ::std::option::Option::None,
            high_priority_state: ::std::option::Option::None,
            lane_selections_enabled: ::std::option::Option::None,
            custom_game_difficulty_mask: ::std::option::Option::None,
            is_steam_china: ::std::option::Option::None,
            bot_difficulty_mask: ::std::option::Option::None,
            bot_script_index_mask: ::std::option::Option::None,
            restricted_from_ranked: ::std::option::Option::None,
            restricted_from_ranked_account_id: ::std::option::Option::None,
            rank_spread_likert_scale: ::std::option::Option::None,
            behavior_score_likert_scale: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CSODOTAParty`
pub mod csodotaparty {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CSODOTAParty.State)
    pub enum State {
        // @@protoc_insertion_point(enum_value:CSODOTAParty.State.UI)
        UI = 0,
        // @@protoc_insertion_point(enum_value:CSODOTAParty.State.FINDING_MATCH)
        FINDING_MATCH = 1,
        // @@protoc_insertion_point(enum_value:CSODOTAParty.State.IN_MATCH)
        IN_MATCH = 2,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for State {
        const NAME: &'static str = "State";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<State> {
            match value {
                0 => ::std::option::Option::Some(State::UI),
                1 => ::std::option::Option::Some(State::FINDING_MATCH),
                2 => ::std::option::Option::Some(State::IN_MATCH),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<State> {
            match str {
                "UI" => ::std::option::Option::Some(State::UI),
                "FINDING_MATCH" => ::std::option::Option::Some(State::FINDING_MATCH),
                "IN_MATCH" => ::std::option::Option::Some(State::IN_MATCH),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [State] = &[
            State::UI,
            State::FINDING_MATCH,
            State::IN_MATCH,
        ];
    }

    impl ::std::default::Default for State {
        fn default() -> Self {
            State::UI
        }
    }

}

// @@protoc_insertion_point(message:CSODOTAPartyInvite)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSODOTAPartyInvite {
    // message fields
    // @@protoc_insertion_point(field:CSODOTAPartyInvite.group_id)
    pub group_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CSODOTAPartyInvite.sender_id)
    pub sender_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CSODOTAPartyInvite.sender_name)
    pub sender_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CSODOTAPartyInvite.members)
    pub members: ::std::vec::Vec<csodotaparty_invite::PartyMember>,
    // @@protoc_insertion_point(field:CSODOTAPartyInvite.team_id)
    pub team_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSODOTAPartyInvite.low_priority_status)
    pub low_priority_status: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CSODOTAPartyInvite.as_coach)
    pub as_coach: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CSODOTAPartyInvite.invite_gid)
    pub invite_gid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CSODOTAPartyInvite.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSODOTAPartyInvite {
    fn default() -> &'a CSODOTAPartyInvite {
        <CSODOTAPartyInvite as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CSODOTAPartyInvite {
    pub fn new() -> CSODOTAPartyInvite {
        ::std::default::Default::default()
    }

    // optional uint64 group_id = 1;

    pub fn group_id(&self) -> u64 {
        self.group_id.unwrap_or(0)
    }

    pub fn clear_group_id(&mut self) {
        self.group_id = ::std::option::Option::None;
    }

    pub fn has_group_id(&self) -> bool {
        self.group_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_group_id(&mut self, v: u64) {
        self.group_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 sender_id = 2;

    pub fn sender_id(&self) -> u64 {
        self.sender_id.unwrap_or(0)
    }

    pub fn clear_sender_id(&mut self) {
        self.sender_id = ::std::option::Option::None;
    }

    pub fn has_sender_id(&self) -> bool {
        self.sender_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sender_id(&mut self, v: u64) {
        self.sender_id = ::std::option::Option::Some(v);
    }

    // optional string sender_name = 3;

    pub fn sender_name(&self) -> &str {
        match self.sender_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_sender_name(&mut self) {
        self.sender_name = ::std::option::Option::None;
    }

    pub fn has_sender_name(&self) -> bool {
        self.sender_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sender_name(&mut self, v: ::std::string::String) {
        self.sender_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender_name(&mut self) -> &mut ::std::string::String {
        if self.sender_name.is_none() {
            self.sender_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.sender_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_sender_name(&mut self) -> ::std::string::String {
        self.sender_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 team_id = 5;

    pub fn team_id(&self) -> u32 {
        self.team_id.unwrap_or(0)
    }

    pub fn clear_team_id(&mut self) {
        self.team_id = ::std::option::Option::None;
    }

    pub fn has_team_id(&self) -> bool {
        self.team_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_id(&mut self, v: u32) {
        self.team_id = ::std::option::Option::Some(v);
    }

    // optional bool low_priority_status = 6;

    pub fn low_priority_status(&self) -> bool {
        self.low_priority_status.unwrap_or(false)
    }

    pub fn clear_low_priority_status(&mut self) {
        self.low_priority_status = ::std::option::Option::None;
    }

    pub fn has_low_priority_status(&self) -> bool {
        self.low_priority_status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_low_priority_status(&mut self, v: bool) {
        self.low_priority_status = ::std::option::Option::Some(v);
    }

    // optional bool as_coach = 7;

    pub fn as_coach(&self) -> bool {
        self.as_coach.unwrap_or(false)
    }

    pub fn clear_as_coach(&mut self) {
        self.as_coach = ::std::option::Option::None;
    }

    pub fn has_as_coach(&self) -> bool {
        self.as_coach.is_some()
    }

    // Param is passed by value, moved
    pub fn set_as_coach(&mut self, v: bool) {
        self.as_coach = ::std::option::Option::Some(v);
    }

    // optional fixed64 invite_gid = 8;

    pub fn invite_gid(&self) -> u64 {
        self.invite_gid.unwrap_or(0)
    }

    pub fn clear_invite_gid(&mut self) {
        self.invite_gid = ::std::option::Option::None;
    }

    pub fn has_invite_gid(&self) -> bool {
        self.invite_gid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_gid(&mut self, v: u64) {
        self.invite_gid = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CSODOTAPartyInvite {
    const NAME: &'static str = "CSODOTAPartyInvite";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.group_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                17 => {
                    self.sender_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                26 => {
                    self.sender_name = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.members.push(is.read_message()?);
                },
                40 => {
                    self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.low_priority_status = ::std::option::Option::Some(is.read_bool()?);
                },
                56 => {
                    self.as_coach = ::std::option::Option::Some(is.read_bool()?);
                },
                65 => {
                    self.invite_gid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.group_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.sender_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.sender_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(3, &v);
        }
        for value in &self.members {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.team_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.low_priority_status {
            my_size += 1 + 1;
        }
        if let Some(v) = self.as_coach {
            my_size += 1 + 1;
        }
        if let Some(v) = self.invite_gid {
            my_size += 1 + 8;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.group_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.sender_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.sender_name.as_ref() {
            os.write_string(3, v)?;
        }
        for v in &self.members {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if let Some(v) = self.team_id {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.low_priority_status {
            os.write_bool(6, v)?;
        }
        if let Some(v) = self.as_coach {
            os.write_bool(7, v)?;
        }
        if let Some(v) = self.invite_gid {
            os.write_fixed64(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSODOTAPartyInvite {
        CSODOTAPartyInvite::new()
    }

    fn clear(&mut self) {
        self.group_id = ::std::option::Option::None;
        self.sender_id = ::std::option::Option::None;
        self.sender_name = ::std::option::Option::None;
        self.members.clear();
        self.team_id = ::std::option::Option::None;
        self.low_priority_status = ::std::option::Option::None;
        self.as_coach = ::std::option::Option::None;
        self.invite_gid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSODOTAPartyInvite {
        static instance: CSODOTAPartyInvite = CSODOTAPartyInvite {
            group_id: ::std::option::Option::None,
            sender_id: ::std::option::Option::None,
            sender_name: ::std::option::Option::None,
            members: ::std::vec::Vec::new(),
            team_id: ::std::option::Option::None,
            low_priority_status: ::std::option::Option::None,
            as_coach: ::std::option::Option::None,
            invite_gid: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CSODOTAPartyInvite`
pub mod csodotaparty_invite {
    // @@protoc_insertion_point(message:CSODOTAPartyInvite.PartyMember)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PartyMember {
        // message fields
        // @@protoc_insertion_point(field:CSODOTAPartyInvite.PartyMember.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CSODOTAPartyInvite.PartyMember.steam_id)
        pub steam_id: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CSODOTAPartyInvite.PartyMember.is_coach)
        pub is_coach: ::std::option::Option<bool>,
        // special fields
        // @@protoc_insertion_point(special_field:CSODOTAPartyInvite.PartyMember.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PartyMember {
        fn default() -> &'a PartyMember {
            <PartyMember as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl PartyMember {
        pub fn new() -> PartyMember {
            ::std::default::Default::default()
        }

        // optional string name = 1;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional fixed64 steam_id = 2;

        pub fn steam_id(&self) -> u64 {
            self.steam_id.unwrap_or(0)
        }

        pub fn clear_steam_id(&mut self) {
            self.steam_id = ::std::option::Option::None;
        }

        pub fn has_steam_id(&self) -> bool {
            self.steam_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_steam_id(&mut self, v: u64) {
            self.steam_id = ::std::option::Option::Some(v);
        }

        // optional bool is_coach = 4;

        pub fn is_coach(&self) -> bool {
            self.is_coach.unwrap_or(false)
        }

        pub fn clear_is_coach(&mut self) {
            self.is_coach = ::std::option::Option::None;
        }

        pub fn has_is_coach(&self) -> bool {
            self.is_coach.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_coach(&mut self, v: bool) {
            self.is_coach = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for PartyMember {
        const NAME: &'static str = "PartyMember";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    17 => {
                        self.steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    32 => {
                        self.is_coach = ::std::option::Option::Some(is.read_bool()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.name.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.steam_id {
                my_size += 1 + 8;
            }
            if let Some(v) = self.is_coach {
                my_size += 1 + 1;
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.name.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.steam_id {
                os.write_fixed64(2, v)?;
            }
            if let Some(v) = self.is_coach {
                os.write_bool(4, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PartyMember {
            PartyMember::new()
        }

        fn clear(&mut self) {
            self.name = ::std::option::Option::None;
            self.steam_id = ::std::option::Option::None;
            self.is_coach = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PartyMember {
            static instance: PartyMember = PartyMember {
                name: ::std::option::Option::None,
                steam_id: ::std::option::Option::None,
                is_coach: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgLeaverState)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgLeaverState {
    // message fields
    // @@protoc_insertion_point(field:CMsgLeaverState.lobby_state)
    pub lobby_state: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgLeaverState.game_state)
    pub game_state: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<super::dota_shared_enums::DOTA_GameState>>,
    // @@protoc_insertion_point(field:CMsgLeaverState.leaver_detected)
    pub leaver_detected: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgLeaverState.first_blood_happened)
    pub first_blood_happened: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgLeaverState.discard_match_results)
    pub discard_match_results: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgLeaverState.mass_disconnect)
    pub mass_disconnect: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgLeaverState.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgLeaverState {
    fn default() -> &'a CMsgLeaverState {
        <CMsgLeaverState as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgLeaverState {
    pub fn new() -> CMsgLeaverState {
        ::std::default::Default::default()
    }

    // optional uint32 lobby_state = 1;

    pub fn lobby_state(&self) -> u32 {
        self.lobby_state.unwrap_or(0)
    }

    pub fn clear_lobby_state(&mut self) {
        self.lobby_state = ::std::option::Option::None;
    }

    pub fn has_lobby_state(&self) -> bool {
        self.lobby_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lobby_state(&mut self, v: u32) {
        self.lobby_state = ::std::option::Option::Some(v);
    }

    // optional .DOTA_GameState game_state = 2;

    pub fn game_state(&self) -> super::dota_shared_enums::DOTA_GameState {
        match self.game_state {
            Some(e) => e.enum_value_or(super::dota_shared_enums::DOTA_GameState::DOTA_GAMERULES_STATE_INIT),
            None => super::dota_shared_enums::DOTA_GameState::DOTA_GAMERULES_STATE_INIT,
        }
    }

    pub fn clear_game_state(&mut self) {
        self.game_state = ::std::option::Option::None;
    }

    pub fn has_game_state(&self) -> bool {
        self.game_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_state(&mut self, v: super::dota_shared_enums::DOTA_GameState) {
        self.game_state = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional bool leaver_detected = 3;

    pub fn leaver_detected(&self) -> bool {
        self.leaver_detected.unwrap_or(false)
    }

    pub fn clear_leaver_detected(&mut self) {
        self.leaver_detected = ::std::option::Option::None;
    }

    pub fn has_leaver_detected(&self) -> bool {
        self.leaver_detected.is_some()
    }

    // Param is passed by value, moved
    pub fn set_leaver_detected(&mut self, v: bool) {
        self.leaver_detected = ::std::option::Option::Some(v);
    }

    // optional bool first_blood_happened = 4;

    pub fn first_blood_happened(&self) -> bool {
        self.first_blood_happened.unwrap_or(false)
    }

    pub fn clear_first_blood_happened(&mut self) {
        self.first_blood_happened = ::std::option::Option::None;
    }

    pub fn has_first_blood_happened(&self) -> bool {
        self.first_blood_happened.is_some()
    }

    // Param is passed by value, moved
    pub fn set_first_blood_happened(&mut self, v: bool) {
        self.first_blood_happened = ::std::option::Option::Some(v);
    }

    // optional bool discard_match_results = 5;

    pub fn discard_match_results(&self) -> bool {
        self.discard_match_results.unwrap_or(false)
    }

    pub fn clear_discard_match_results(&mut self) {
        self.discard_match_results = ::std::option::Option::None;
    }

    pub fn has_discard_match_results(&self) -> bool {
        self.discard_match_results.is_some()
    }

    // Param is passed by value, moved
    pub fn set_discard_match_results(&mut self, v: bool) {
        self.discard_match_results = ::std::option::Option::Some(v);
    }

    // optional bool mass_disconnect = 6;

    pub fn mass_disconnect(&self) -> bool {
        self.mass_disconnect.unwrap_or(false)
    }

    pub fn clear_mass_disconnect(&mut self) {
        self.mass_disconnect = ::std::option::Option::None;
    }

    pub fn has_mass_disconnect(&self) -> bool {
        self.mass_disconnect.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mass_disconnect(&mut self, v: bool) {
        self.mass_disconnect = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgLeaverState {
    const NAME: &'static str = "CMsgLeaverState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.lobby_state = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.game_state = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                24 => {
                    self.leaver_detected = ::std::option::Option::Some(is.read_bool()?);
                },
                32 => {
                    self.first_blood_happened = ::std::option::Option::Some(is.read_bool()?);
                },
                40 => {
                    self.discard_match_results = ::std::option::Option::Some(is.read_bool()?);
                },
                48 => {
                    self.mass_disconnect = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.lobby_state {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.game_state {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(2, v.value());
        }
        if let Some(v) = self.leaver_detected {
            my_size += 1 + 1;
        }
        if let Some(v) = self.first_blood_happened {
            my_size += 1 + 1;
        }
        if let Some(v) = self.discard_match_results {
            my_size += 1 + 1;
        }
        if let Some(v) = self.mass_disconnect {
            my_size += 1 + 1;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.lobby_state {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.game_state {
            os.write_enum(2, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.leaver_detected {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.first_blood_happened {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.discard_match_results {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.mass_disconnect {
            os.write_bool(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgLeaverState {
        CMsgLeaverState::new()
    }

    fn clear(&mut self) {
        self.lobby_state = ::std::option::Option::None;
        self.game_state = ::std::option::Option::None;
        self.leaver_detected = ::std::option::Option::None;
        self.first_blood_happened = ::std::option::Option::None;
        self.discard_match_results = ::std::option::Option::None;
        self.mass_disconnect = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgLeaverState {
        static instance: CMsgLeaverState = CMsgLeaverState {
            lobby_state: ::std::option::Option::None,
            game_state: ::std::option::Option::None,
            leaver_detected: ::std::option::Option::None,
            first_blood_happened: ::std::option::Option::None,
            discard_match_results: ::std::option::Option::None,
            mass_disconnect: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgReadyCheckStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgReadyCheckStatus {
    // message fields
    // @@protoc_insertion_point(field:CMsgReadyCheckStatus.start_timestamp)
    pub start_timestamp: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgReadyCheckStatus.finish_timestamp)
    pub finish_timestamp: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgReadyCheckStatus.initiator_account_id)
    pub initiator_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgReadyCheckStatus.ready_members)
    pub ready_members: ::std::vec::Vec<cmsg_ready_check_status::ReadyMember>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgReadyCheckStatus.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgReadyCheckStatus {
    fn default() -> &'a CMsgReadyCheckStatus {
        <CMsgReadyCheckStatus as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgReadyCheckStatus {
    pub fn new() -> CMsgReadyCheckStatus {
        ::std::default::Default::default()
    }

    // optional uint32 start_timestamp = 1;

    pub fn start_timestamp(&self) -> u32 {
        self.start_timestamp.unwrap_or(0)
    }

    pub fn clear_start_timestamp(&mut self) {
        self.start_timestamp = ::std::option::Option::None;
    }

    pub fn has_start_timestamp(&self) -> bool {
        self.start_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_timestamp(&mut self, v: u32) {
        self.start_timestamp = ::std::option::Option::Some(v);
    }

    // optional uint32 finish_timestamp = 2;

    pub fn finish_timestamp(&self) -> u32 {
        self.finish_timestamp.unwrap_or(0)
    }

    pub fn clear_finish_timestamp(&mut self) {
        self.finish_timestamp = ::std::option::Option::None;
    }

    pub fn has_finish_timestamp(&self) -> bool {
        self.finish_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_finish_timestamp(&mut self, v: u32) {
        self.finish_timestamp = ::std::option::Option::Some(v);
    }

    // optional uint32 initiator_account_id = 3;

    pub fn initiator_account_id(&self) -> u32 {
        self.initiator_account_id.unwrap_or(0)
    }

    pub fn clear_initiator_account_id(&mut self) {
        self.initiator_account_id = ::std::option::Option::None;
    }

    pub fn has_initiator_account_id(&self) -> bool {
        self.initiator_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_initiator_account_id(&mut self, v: u32) {
        self.initiator_account_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgReadyCheckStatus {
    const NAME: &'static str = "CMsgReadyCheckStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.start_timestamp = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.finish_timestamp = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.initiator_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                34 => {
                    self.ready_members.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.start_timestamp {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.finish_timestamp {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.initiator_account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        for value in &self.ready_members {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.start_timestamp {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.finish_timestamp {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.initiator_account_id {
            os.write_uint32(3, v)?;
        }
        for v in &self.ready_members {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgReadyCheckStatus {
        CMsgReadyCheckStatus::new()
    }

    fn clear(&mut self) {
        self.start_timestamp = ::std::option::Option::None;
        self.finish_timestamp = ::std::option::Option::None;
        self.initiator_account_id = ::std::option::Option::None;
        self.ready_members.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgReadyCheckStatus {
        static instance: CMsgReadyCheckStatus = CMsgReadyCheckStatus {
            start_timestamp: ::std::option::Option::None,
            finish_timestamp: ::std::option::Option::None,
            initiator_account_id: ::std::option::Option::None,
            ready_members: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgReadyCheckStatus`
pub mod cmsg_ready_check_status {
    // @@protoc_insertion_point(message:CMsgReadyCheckStatus.ReadyMember)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ReadyMember {
        // message fields
        // @@protoc_insertion_point(field:CMsgReadyCheckStatus.ReadyMember.account_id)
        pub account_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgReadyCheckStatus.ReadyMember.ready_status)
        pub ready_status: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<super::EReadyCheckStatus>>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgReadyCheckStatus.ReadyMember.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ReadyMember {
        fn default() -> &'a ReadyMember {
            <ReadyMember as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl ReadyMember {
        pub fn new() -> ReadyMember {
            ::std::default::Default::default()
        }

        // optional uint32 account_id = 1;

        pub fn account_id(&self) -> u32 {
            self.account_id.unwrap_or(0)
        }

        pub fn clear_account_id(&mut self) {
            self.account_id = ::std::option::Option::None;
        }

        pub fn has_account_id(&self) -> bool {
            self.account_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_account_id(&mut self, v: u32) {
            self.account_id = ::std::option::Option::Some(v);
        }

        // optional .EReadyCheckStatus ready_status = 2;

        pub fn ready_status(&self) -> super::EReadyCheckStatus {
            match self.ready_status {
                Some(e) => e.enum_value_or(super::EReadyCheckStatus::k_EReadyCheckStatus_Unknown),
                None => super::EReadyCheckStatus::k_EReadyCheckStatus_Unknown,
            }
        }

        pub fn clear_ready_status(&mut self) {
            self.ready_status = ::std::option::Option::None;
        }

        pub fn has_ready_status(&self) -> bool {
            self.ready_status.is_some()
        }

        // Param is passed by value, moved
        pub fn set_ready_status(&mut self, v: super::EReadyCheckStatus) {
            self.ready_status = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for ReadyMember {
        const NAME: &'static str = "ReadyMember";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.ready_status = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.account_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.ready_status {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(2, v.value());
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.account_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.ready_status {
                os.write_enum(2, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ReadyMember {
            ReadyMember::new()
        }

        fn clear(&mut self) {
            self.account_id = ::std::option::Option::None;
            self.ready_status = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ReadyMember {
            static instance: ReadyMember = ReadyMember {
                account_id: ::std::option::Option::None,
                ready_status: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgPartyReadyCheckRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgPartyReadyCheckRequest {
    // special fields
    // @@protoc_insertion_point(special_field:CMsgPartyReadyCheckRequest.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgPartyReadyCheckRequest {
    fn default() -> &'a CMsgPartyReadyCheckRequest {
        <CMsgPartyReadyCheckRequest as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgPartyReadyCheckRequest {
    pub fn new() -> CMsgPartyReadyCheckRequest {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgPartyReadyCheckRequest {
    const NAME: &'static str = "CMsgPartyReadyCheckRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgPartyReadyCheckRequest {
        CMsgPartyReadyCheckRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgPartyReadyCheckRequest {
        static instance: CMsgPartyReadyCheckRequest = CMsgPartyReadyCheckRequest {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgPartyReadyCheckResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgPartyReadyCheckResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgPartyReadyCheckResponse.result)
    pub result: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<EReadyCheckRequestResult>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgPartyReadyCheckResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgPartyReadyCheckResponse {
    fn default() -> &'a CMsgPartyReadyCheckResponse {
        <CMsgPartyReadyCheckResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgPartyReadyCheckResponse {
    pub fn new() -> CMsgPartyReadyCheckResponse {
        ::std::default::Default::default()
    }

    // optional .EReadyCheckRequestResult result = 1;

    pub fn result(&self) -> EReadyCheckRequestResult {
        match self.result {
            Some(e) => e.enum_value_or(EReadyCheckRequestResult::k_EReadyCheckRequestResult_Success),
            None => EReadyCheckRequestResult::k_EReadyCheckRequestResult_Success,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: EReadyCheckRequestResult) {
        self.result = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgPartyReadyCheckResponse {
    const NAME: &'static str = "CMsgPartyReadyCheckResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgPartyReadyCheckResponse {
        CMsgPartyReadyCheckResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgPartyReadyCheckResponse {
        static instance: CMsgPartyReadyCheckResponse = CMsgPartyReadyCheckResponse {
            result: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgPartyReadyCheckAcknowledge)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgPartyReadyCheckAcknowledge {
    // message fields
    // @@protoc_insertion_point(field:CMsgPartyReadyCheckAcknowledge.ready_status)
    pub ready_status: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<EReadyCheckStatus>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgPartyReadyCheckAcknowledge.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgPartyReadyCheckAcknowledge {
    fn default() -> &'a CMsgPartyReadyCheckAcknowledge {
        <CMsgPartyReadyCheckAcknowledge as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgPartyReadyCheckAcknowledge {
    pub fn new() -> CMsgPartyReadyCheckAcknowledge {
        ::std::default::Default::default()
    }

    // optional .EReadyCheckStatus ready_status = 1;

    pub fn ready_status(&self) -> EReadyCheckStatus {
        match self.ready_status {
            Some(e) => e.enum_value_or(EReadyCheckStatus::k_EReadyCheckStatus_Unknown),
            None => EReadyCheckStatus::k_EReadyCheckStatus_Unknown,
        }
    }

    pub fn clear_ready_status(&mut self) {
        self.ready_status = ::std::option::Option::None;
    }

    pub fn has_ready_status(&self) -> bool {
        self.ready_status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ready_status(&mut self, v: EReadyCheckStatus) {
        self.ready_status = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgPartyReadyCheckAcknowledge {
    const NAME: &'static str = "CMsgPartyReadyCheckAcknowledge";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ready_status = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ready_status {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.ready_status {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgPartyReadyCheckAcknowledge {
        CMsgPartyReadyCheckAcknowledge::new()
    }

    fn clear(&mut self) {
        self.ready_status = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgPartyReadyCheckAcknowledge {
        static instance: CMsgPartyReadyCheckAcknowledge = CMsgPartyReadyCheckAcknowledge {
            ready_status: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgLobbyEventGameDetails)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgLobbyEventGameDetails {
    // message fields
    // @@protoc_insertion_point(field:CMsgLobbyEventGameDetails.kv_data)
    pub kv_data: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgLobbyEventGameDetails.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgLobbyEventGameDetails {
    fn default() -> &'a CMsgLobbyEventGameDetails {
        <CMsgLobbyEventGameDetails as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgLobbyEventGameDetails {
    pub fn new() -> CMsgLobbyEventGameDetails {
        ::std::default::Default::default()
    }

    // optional bytes kv_data = 1;

    pub fn kv_data(&self) -> &[u8] {
        match self.kv_data.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_kv_data(&mut self) {
        self.kv_data = ::std::option::Option::None;
    }

    pub fn has_kv_data(&self) -> bool {
        self.kv_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_kv_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.kv_data = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_kv_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.kv_data.is_none() {
            self.kv_data = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.kv_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_kv_data(&mut self) -> ::std::vec::Vec<u8> {
        self.kv_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgLobbyEventGameDetails {
    const NAME: &'static str = "CMsgLobbyEventGameDetails";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.kv_data = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.kv_data.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.kv_data.as_ref() {
            os.write_bytes(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgLobbyEventGameDetails {
        CMsgLobbyEventGameDetails::new()
    }

    fn clear(&mut self) {
        self.kv_data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgLobbyEventGameDetails {
        static instance: CMsgLobbyEventGameDetails = CMsgLobbyEventGameDetails {
            kv_data: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgMatchMatchmakingStats)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgMatchMatchmakingStats {
    // message fields
    // @@protoc_insertion_point(field:CMsgMatchMatchmakingStats.average_queue_time)
    pub average_queue_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgMatchMatchmakingStats.maximum_queue_time)
    pub maximum_queue_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgMatchMatchmakingStats.behavior_score_variance)
    pub behavior_score_variance: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<EMatchBehaviorScoreVariance>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgMatchMatchmakingStats.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgMatchMatchmakingStats {
    fn default() -> &'a CMsgMatchMatchmakingStats {
        <CMsgMatchMatchmakingStats as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgMatchMatchmakingStats {
    pub fn new() -> CMsgMatchMatchmakingStats {
        ::std::default::Default::default()
    }

    // optional uint32 average_queue_time = 1;

    pub fn average_queue_time(&self) -> u32 {
        self.average_queue_time.unwrap_or(0)
    }

    pub fn clear_average_queue_time(&mut self) {
        self.average_queue_time = ::std::option::Option::None;
    }

    pub fn has_average_queue_time(&self) -> bool {
        self.average_queue_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_average_queue_time(&mut self, v: u32) {
        self.average_queue_time = ::std::option::Option::Some(v);
    }

    // optional uint32 maximum_queue_time = 2;

    pub fn maximum_queue_time(&self) -> u32 {
        self.maximum_queue_time.unwrap_or(0)
    }

    pub fn clear_maximum_queue_time(&mut self) {
        self.maximum_queue_time = ::std::option::Option::None;
    }

    pub fn has_maximum_queue_time(&self) -> bool {
        self.maximum_queue_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_maximum_queue_time(&mut self, v: u32) {
        self.maximum_queue_time = ::std::option::Option::Some(v);
    }

    // optional .EMatchBehaviorScoreVariance behavior_score_variance = 3;

    pub fn behavior_score_variance(&self) -> EMatchBehaviorScoreVariance {
        match self.behavior_score_variance {
            Some(e) => e.enum_value_or(EMatchBehaviorScoreVariance::k_EMatchBehaviorScoreVariance_Invalid),
            None => EMatchBehaviorScoreVariance::k_EMatchBehaviorScoreVariance_Invalid,
        }
    }

    pub fn clear_behavior_score_variance(&mut self) {
        self.behavior_score_variance = ::std::option::Option::None;
    }

    pub fn has_behavior_score_variance(&self) -> bool {
        self.behavior_score_variance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_behavior_score_variance(&mut self, v: EMatchBehaviorScoreVariance) {
        self.behavior_score_variance = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgMatchMatchmakingStats {
    const NAME: &'static str = "CMsgMatchMatchmakingStats";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.average_queue_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.maximum_queue_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.behavior_score_variance = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.average_queue_time {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.maximum_queue_time {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.behavior_score_variance {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(3, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.average_queue_time {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.maximum_queue_time {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.behavior_score_variance {
            os.write_enum(3, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgMatchMatchmakingStats {
        CMsgMatchMatchmakingStats::new()
    }

    fn clear(&mut self) {
        self.average_queue_time = ::std::option::Option::None;
        self.maximum_queue_time = ::std::option::Option::None;
        self.behavior_score_variance = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgMatchMatchmakingStats {
        static instance: CMsgMatchMatchmakingStats = CMsgMatchMatchmakingStats {
            average_queue_time: ::std::option::Option::None,
            maximum_queue_time: ::std::option::Option::None,
            behavior_score_variance: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMvpData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMvpData {
    // message fields
    // @@protoc_insertion_point(field:CMvpData.mvps)
    pub mvps: ::std::vec::Vec<cmvp_data::MvpDatum>,
    // special fields
    // @@protoc_insertion_point(special_field:CMvpData.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMvpData {
    fn default() -> &'a CMvpData {
        <CMvpData as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMvpData {
    pub fn new() -> CMvpData {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMvpData {
    const NAME: &'static str = "CMvpData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.mvps.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.mvps {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.mvps {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMvpData {
        CMvpData::new()
    }

    fn clear(&mut self) {
        self.mvps.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMvpData {
        static instance: CMvpData = CMvpData {
            mvps: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMvpData`
pub mod cmvp_data {
    // @@protoc_insertion_point(message:CMvpData.MvpDatum)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct MvpDatum {
        // message fields
        // @@protoc_insertion_point(field:CMvpData.MvpDatum.player_slot)
        pub player_slot: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMvpData.MvpDatum.accolades)
        pub accolades: ::std::vec::Vec<mvp_datum::MvpAccolade>,
        // special fields
        // @@protoc_insertion_point(special_field:CMvpData.MvpDatum.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a MvpDatum {
        fn default() -> &'a MvpDatum {
            <MvpDatum as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl MvpDatum {
        pub fn new() -> MvpDatum {
            ::std::default::Default::default()
        }

        // optional uint32 player_slot = 1;

        pub fn player_slot(&self) -> u32 {
            self.player_slot.unwrap_or(0)
        }

        pub fn clear_player_slot(&mut self) {
            self.player_slot = ::std::option::Option::None;
        }

        pub fn has_player_slot(&self) -> bool {
            self.player_slot.is_some()
        }

        // Param is passed by value, moved
        pub fn set_player_slot(&mut self, v: u32) {
            self.player_slot = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for MvpDatum {
        const NAME: &'static str = "MvpDatum";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.player_slot = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        self.accolades.push(is.read_message()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.player_slot {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            for value in &self.accolades {
                let len = value.compute_size();
                my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.player_slot {
                os.write_uint32(1, v)?;
            }
            for v in &self.accolades {
                ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> MvpDatum {
            MvpDatum::new()
        }

        fn clear(&mut self) {
            self.player_slot = ::std::option::Option::None;
            self.accolades.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static MvpDatum {
            static instance: MvpDatum = MvpDatum {
                player_slot: ::std::option::Option::None,
                accolades: ::std::vec::Vec::new(),
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    /// Nested message and enums of message `MvpDatum`
    pub mod mvp_datum {
        // @@protoc_insertion_point(message:CMvpData.MvpDatum.MvpAccolade)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct MvpAccolade {
            // message fields
            // @@protoc_insertion_point(field:CMvpData.MvpDatum.MvpAccolade.type)
            pub type_: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<mvp_accolade::MvpAccoladeType>>,
            // @@protoc_insertion_point(field:CMvpData.MvpDatum.MvpAccolade.detail_value)
            pub detail_value: ::std::option::Option<f32>,
            // special fields
            // @@protoc_insertion_point(special_field:CMvpData.MvpDatum.MvpAccolade.special_fields)
            pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a MvpAccolade {
            fn default() -> &'a MvpAccolade {
                <MvpAccolade as ::steam_vent_proto_common::protobuf::Message>::default_instance()
            }
        }

        impl MvpAccolade {
            pub fn new() -> MvpAccolade {
                ::std::default::Default::default()
            }

            // optional .CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType type = 1;

            pub fn type_(&self) -> mvp_accolade::MvpAccoladeType {
                match self.type_ {
                    Some(e) => e.enum_value_or(mvp_accolade::MvpAccoladeType::kills),
                    None => mvp_accolade::MvpAccoladeType::kills,
                }
            }

            pub fn clear_type_(&mut self) {
                self.type_ = ::std::option::Option::None;
            }

            pub fn has_type(&self) -> bool {
                self.type_.is_some()
            }

            // Param is passed by value, moved
            pub fn set_type(&mut self, v: mvp_accolade::MvpAccoladeType) {
                self.type_ = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
            }

            // optional float detail_value = 2;

            pub fn detail_value(&self) -> f32 {
                self.detail_value.unwrap_or(0.)
            }

            pub fn clear_detail_value(&mut self) {
                self.detail_value = ::std::option::Option::None;
            }

            pub fn has_detail_value(&self) -> bool {
                self.detail_value.is_some()
            }

            // Param is passed by value, moved
            pub fn set_detail_value(&mut self, v: f32) {
                self.detail_value = ::std::option::Option::Some(v);
            }
        }

        impl ::steam_vent_proto_common::protobuf::Message for MvpAccolade {
            const NAME: &'static str = "MvpAccolade";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        8 => {
                            self.type_ = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                        },
                        21 => {
                            self.detail_value = ::std::option::Option::Some(is.read_float()?);
                        },
                        tag => {
                            ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if let Some(v) = self.type_ {
                    my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
                }
                if let Some(v) = self.detail_value {
                    my_size += 1 + 4;
                }
                my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
                if let Some(v) = self.type_ {
                    os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
                }
                if let Some(v) = self.detail_value {
                    os.write_float(2, v)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> MvpAccolade {
                MvpAccolade::new()
            }

            fn clear(&mut self) {
                self.type_ = ::std::option::Option::None;
                self.detail_value = ::std::option::Option::None;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static MvpAccolade {
                static instance: MvpAccolade = MvpAccolade {
                    type_: ::std::option::Option::None,
                    detail_value: ::std::option::Option::None,
                    special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        /// Nested message and enums of message `MvpAccolade`
        pub mod mvp_accolade {
            #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
            // @@protoc_insertion_point(enum:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType)
            pub enum MvpAccoladeType {
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kills)
                kills = 1,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.deaths)
                deaths = 2,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.assists)
                assists = 3,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.net_worth)
                net_worth = 5,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.item_value)
                item_value = 6,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.support_gold_spent)
                support_gold_spent = 7,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.wards_placed)
                wards_placed = 8,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.dewards)
                dewards = 9,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.camps_stacked)
                camps_stacked = 10,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.last_hits)
                last_hits = 11,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.denies)
                denies = 12,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Killing_Sprees)
                kKillEaterEvent_Killing_Sprees = 13,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Godlike)
                kKillEaterEvent_Godlike = 14,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Towers_Destroyed)
                kKillEaterEvent_Towers_Destroyed = 15,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Invoker_SunstrikeKills)
                kKillEaterEventType_Invoker_SunstrikeKills = 16,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Axe_Culls)
                kKillEaterEventType_Axe_Culls = 17,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Axe_BattleHungerKills)
                kKillEaterEventType_Axe_BattleHungerKills = 18,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_LowHealthKills)
                kKillEaterEventType_LowHealthKills = 19,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Invoker_TornadoKills)
                kKillEaterEventType_Invoker_TornadoKills = 20,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Sven_DoubleStuns)
                kKillEaterEventType_Sven_DoubleStuns = 21,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Sven_WarcryAssists)
                kKillEaterEventType_Sven_WarcryAssists = 22,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Sven_CleaveDoubleKills)
                kKillEaterEventType_Sven_CleaveDoubleKills = 23,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Sven_TeleportInterrupts)
                kKillEaterEventType_Sven_TeleportInterrupts = 24,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Faceless_MultiChrono)
                kKillEaterEventType_Faceless_MultiChrono = 25,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Faceless_ChronoKills)
                kKillEaterEventType_Faceless_ChronoKills = 26,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Ursa_MultiShocks)
                kKillEaterEventType_Ursa_MultiShocks = 27,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_RoshanKills)
                kKillEaterEventType_RoshanKills = 28,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Lion_FingerKills)
                kKillEaterEventType_Lion_FingerKills = 29,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Riki_SmokedHeroKills)
                kKillEaterEventType_Riki_SmokedHeroKills = 32,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_HeroesRevealedWithDust)
                kKillEaterEventType_HeroesRevealedWithDust = 33,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_SkeletonKing_ReincarnationKills)
                kKillEaterEventType_SkeletonKing_ReincarnationKills = 34,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Skywrath_FlareKills)
                kKillEaterEventType_Skywrath_FlareKills = 35,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Leshrac_SplitEarthStuns)
                kKillEaterEventType_Leshrac_SplitEarthStuns = 36,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Mirana_MaxStunArrows)
                kKillEaterEventType_Mirana_MaxStunArrows = 37,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_PhantomAssassin_CoupdeGraceCrits)
                kKillEaterEventType_PhantomAssassin_CoupdeGraceCrits = 38,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_PhantomAssassin_DaggerCrits)
                kKillEaterEventType_PhantomAssassin_DaggerCrits = 39,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Meepo_Earthbinds)
                kKillEaterEventType_Meepo_Earthbinds = 40,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Bloodseeker_RuptureKills)
                kKillEaterEventType_Bloodseeker_RuptureKills = 41,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Slark_LeashedEnemies)
                kKillEaterEventType_Slark_LeashedEnemies = 42,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Disruptor_FountainGlimpses)
                kKillEaterEventType_Disruptor_FountainGlimpses = 43,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Rubick_SpellsStolen)
                kKillEaterEventType_Rubick_SpellsStolen = 44,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Rubick_UltimatesStolen)
                kKillEaterEventType_Rubick_UltimatesStolen = 45,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Doom_EnemiesDoomed)
                kKillEaterEventType_Doom_EnemiesDoomed = 46,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Omniknight_Purifications)
                kKillEaterEventType_Omniknight_Purifications = 47,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Omniknight_AlliesRepelled)
                kKillEaterEventType_Omniknight_AlliesRepelled = 48,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Omniknight_EnemiesRepelled)
                kKillEaterEventType_Omniknight_EnemiesRepelled = 49,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Warlock_FiveHeroFatalBonds)
                kKillEaterEventType_Warlock_FiveHeroFatalBonds = 50,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_CrystalMaiden_FrostbittenEnemies)
                kKillEaterEventType_CrystalMaiden_FrostbittenEnemies = 51,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_CrystalMaiden_CrystalNovas)
                kKillEaterEventType_CrystalMaiden_CrystalNovas = 52,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Kunkka_DoubleHeroTorrents)
                kKillEaterEventType_Kunkka_DoubleHeroTorrents = 53,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Kunkka_TripleHeroGhostShips)
                kKillEaterEventType_Kunkka_TripleHeroGhostShips = 54,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_NagaSiren_EnemiesEnsnared)
                kKillEaterEventType_NagaSiren_EnemiesEnsnared = 55,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_NagaSiren_TripleHeroRipTides)
                kKillEaterEventType_NagaSiren_TripleHeroRipTides = 56,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Lycan_KillsDuringShapeshift)
                kKillEaterEventType_Lycan_KillsDuringShapeshift = 57,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Pudge_DismemberKills)
                kKillEaterEventType_Pudge_DismemberKills = 58,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Pudge_EnemyHeroesHooked)
                kKillEaterEventType_Pudge_EnemyHeroesHooked = 59,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Pudge_HookKills)
                kKillEaterEventType_Pudge_HookKills = 60,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Pudge_UnseenEnemyHeroesHooked)
                kKillEaterEventType_Pudge_UnseenEnemyHeroesHooked = 61,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DrowRanger_EnemiesSilenced)
                kKillEaterEventType_DrowRanger_EnemiesSilenced = 62,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DrowRanger_MultiHeroSilences)
                kKillEaterEventType_DrowRanger_MultiHeroSilences = 63,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DrowRanger_SilencedKills)
                kKillEaterEventType_DrowRanger_SilencedKills = 64,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DrowRanger_FrostArrowKills)
                kKillEaterEventType_DrowRanger_FrostArrowKills = 65,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DragonKnight_KillsInDragonForm)
                kKillEaterEventType_DragonKnight_KillsInDragonForm = 66,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DragonKnight_BreatheFireKills)
                kKillEaterEventType_DragonKnight_BreatheFireKills = 67,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DragonKnight_SplashKills)
                kKillEaterEventType_DragonKnight_SplashKills = 68,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_WitchDoctor_CaskStuns)
                kKillEaterEventType_WitchDoctor_CaskStuns = 69,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_WitchDoctor_MaledictKills)
                kKillEaterEventType_WitchDoctor_MaledictKills = 70,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_WitchDoctor_MultiHeroMaledicts)
                kKillEaterEventType_WitchDoctor_MultiHeroMaledicts = 71,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_WitchDoctor_DeathWardKills)
                kKillEaterEventType_WitchDoctor_DeathWardKills = 72,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Disruptor_ThunderStrikeKills)
                kKillEaterEventType_Disruptor_ThunderStrikeKills = 73,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Disruptor_HeroesGlimpsed)
                kKillEaterEventType_Disruptor_HeroesGlimpsed = 74,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_CrystalMaiden_FreezingFieldKills)
                kKillEaterEventType_CrystalMaiden_FreezingFieldKills = 75,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Medusa_EnemiesPetrified)
                kKillEaterEventType_Medusa_EnemiesPetrified = 77,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Warlock_FatalBondsKills)
                kKillEaterEventType_Warlock_FatalBondsKills = 78,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Warlock_GolemKills)
                kKillEaterEventType_Warlock_GolemKills = 79,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Tusk_WalrusPunches)
                kKillEaterEventType_Tusk_WalrusPunches = 80,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Tusk_SnowballStuns)
                kKillEaterEventType_Tusk_SnowballStuns = 81,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Earthshaker_FissureStuns)
                kKillEaterEventType_Earthshaker_FissureStuns = 82,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Earthshaker_3HeroEchoslams)
                kKillEaterEventType_Earthshaker_3HeroEchoslams = 83,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_SandKing_BurrowstrikeStuns)
                kKillEaterEventType_SandKing_BurrowstrikeStuns = 84,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_SandKing_EpicenterKills)
                kKillEaterEventType_SandKing_EpicenterKills = 85,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_SkywrathMage_AncientSealKills)
                kKillEaterEventType_SkywrathMage_AncientSealKills = 86,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_SkywrathMage_ConcussiveShotKills)
                kKillEaterEventType_SkywrathMage_ConcussiveShotKills = 87,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Luna_LucentBeamKills)
                kKillEaterEventType_Luna_LucentBeamKills = 88,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Luna_EclipseKills)
                kKillEaterEventType_Luna_EclipseKills = 89,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_KeeperOfTheLight_IlluminateKills)
                kKillEaterEventType_KeeperOfTheLight_IlluminateKills = 90,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_KeeperOfTheLight_ManaLeakStuns)
                kKillEaterEventType_KeeperOfTheLight_ManaLeakStuns = 91,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_KeeperOfTheLight_TeammatesRecalled)
                kKillEaterEventType_KeeperOfTheLight_TeammatesRecalled = 92,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_LegionCommander_DuelsWon)
                kKillEaterEventType_LegionCommander_DuelsWon = 93,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Beastmaster_RoarKills)
                kKillEaterEventType_Beastmaster_RoarKills = 94,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Beastmaster_RoarMultiKills)
                kKillEaterEventType_Beastmaster_RoarMultiKills = 95,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Windrunner_FocusFireBuildings)
                kKillEaterEventType_Windrunner_FocusFireBuildings = 96,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Windrunner_PowershotKills)
                kKillEaterEventType_Windrunner_PowershotKills = 97,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_PhantomAssassin_DaggerLastHits)
                kKillEaterEventType_PhantomAssassin_DaggerLastHits = 98,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_PhantomAssassin_PhantomStrikeKills)
                kKillEaterEventType_PhantomAssassin_PhantomStrikeKills = 99,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DeathProphet_CryptSwarmKills)
                kKillEaterEventType_DeathProphet_CryptSwarmKills = 100,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DeathProphet_ExorcismBuildingKills)
                kKillEaterEventType_DeathProphet_ExorcismBuildingKills = 101,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DeathProphet_ExorcismSpiritsSummoned)
                kKillEaterEventType_DeathProphet_ExorcismSpiritsSummoned = 102,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DeathProphet_MultiHeroSilences)
                kKillEaterEventType_DeathProphet_MultiHeroSilences = 103,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Abaddon_MistCoilKills)
                kKillEaterEventType_Abaddon_MistCoilKills = 104,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Abaddon_MistCoilHealed)
                kKillEaterEventType_Abaddon_MistCoilHealed = 105,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Abaddon_AphoticShieldKills)
                kKillEaterEventType_Abaddon_AphoticShieldKills = 106,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Lich_ChainFrostTripleKills)
                kKillEaterEventType_Lich_ChainFrostTripleKills = 107,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Lich_ChainFrostMultiKills)
                kKillEaterEventType_Lich_ChainFrostMultiKills = 108,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Lich_ChainFrostBounces)
                kKillEaterEventType_Lich_ChainFrostBounces = 109,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Ursa_EnragedKills)
                kKillEaterEventType_Ursa_EnragedKills = 110,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Ursa_EarthshockKills)
                kKillEaterEventType_Ursa_EarthshockKills = 111,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Lina_LagunaBladeKills)
                kKillEaterEventType_Lina_LagunaBladeKills = 112,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Lina_DragonSlaveKills)
                kKillEaterEventType_Lina_DragonSlaveKills = 113,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Lina_LightStrikeArrayStuns)
                kKillEaterEventType_Lina_LightStrikeArrayStuns = 114,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Barracks_Destroyed)
                kKillEaterEvent_Barracks_Destroyed = 115,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_TemplarAssassin_MeldKills)
                kKillEaterEvent_TemplarAssassin_MeldKills = 116,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_TemplarAssassin_HeroesSlowed)
                kKillEaterEvent_TemplarAssassin_HeroesSlowed = 117,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Sniper_AssassinationKills)
                kKillEaterEvent_Sniper_AssassinationKills = 118,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Sniper_HeadshotStuns)
                kKillEaterEvent_Sniper_HeadshotStuns = 119,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_EarthSpirit_SmashStuns)
                kKillEaterEvent_EarthSpirit_SmashStuns = 120,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_EarthSpirit_GripSilences)
                kKillEaterEvent_EarthSpirit_GripSilences = 121,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_ShadowShaman_ShackleKills)
                kKillEaterEvent_ShadowShaman_ShackleKills = 122,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_ShadowShaman_HexKills)
                kKillEaterEvent_ShadowShaman_HexKills = 123,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Centaur_EnemiesStomped)
                kKillEaterEvent_Centaur_EnemiesStomped = 124,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Centaur_DoubleEdgeKills)
                kKillEaterEvent_Centaur_DoubleEdgeKills = 125,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Centaur_ReturnKills)
                kKillEaterEvent_Centaur_ReturnKills = 126,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_EmberSpirit_EnemiesChained)
                kKillEaterEvent_EmberSpirit_EnemiesChained = 127,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_EmberSpirit_SleightOfFistMultiKills)
                kKillEaterEvent_EmberSpirit_SleightOfFistMultiKills = 128,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Puck_OrbKills)
                kKillEaterEvent_Puck_OrbKills = 129,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_VengefulSpirit_EnemiesStunned)
                kKillEaterEvent_VengefulSpirit_EnemiesStunned = 130,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Lifestealer_RageKills)
                kKillEaterEvent_Lifestealer_RageKills = 131,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Lifestealer_OpenWoundsKills)
                kKillEaterEvent_Lifestealer_OpenWoundsKills = 132,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Lifestealer_InfestKills)
                kKillEaterEvent_Lifestealer_InfestKills = 133,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_ElderTitan_SpiritKills)
                kKillEaterEvent_ElderTitan_SpiritKills = 134,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_ElderTitan_GoodStomps)
                kKillEaterEvent_ElderTitan_GoodStomps = 135,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Clockwerk_RocketKills)
                kKillEaterEvent_Clockwerk_RocketKills = 136,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Clockwerk_BlindRocketKills)
                kKillEaterEvent_Clockwerk_BlindRocketKills = 137,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_StormSpirit_BallKills)
                kKillEaterEvent_StormSpirit_BallKills = 138,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_StormSpirit_DoubleRemnantKills)
                kKillEaterEvent_StormSpirit_DoubleRemnantKills = 139,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_StormSpirit_VortexKills)
                kKillEaterEvent_StormSpirit_VortexKills = 140,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Tinker_DoubleMissileKills)
                kKillEaterEvent_Tinker_DoubleMissileKills = 141,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Tinker_LaserKills)
                kKillEaterEvent_Tinker_LaserKills = 142,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Techies_SuicideKills)
                kKillEaterEvent_Techies_SuicideKills = 143,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Techies_LandMineKills)
                kKillEaterEvent_Techies_LandMineKills = 144,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Techies_StatisTrapStuns)
                kKillEaterEvent_Techies_StatisTrapStuns = 145,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Techies_RemoteMineKills)
                kKillEaterEvent_Techies_RemoteMineKills = 146,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_ShadowFiend_TripleRazeKills)
                kKillEaterEvent_ShadowFiend_TripleRazeKills = 147,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_ShadowFiend_RequiemMultiKills)
                kKillEaterEvent_ShadowFiend_RequiemMultiKills = 148,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_ShadowFiend_QRazeKills)
                kKillEaterEvent_ShadowFiend_QRazeKills = 149,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_ShadowFiend_WRazeKills)
                kKillEaterEvent_ShadowFiend_WRazeKills = 150,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_ShadowFiend_ERazeKills)
                kKillEaterEvent_ShadowFiend_ERazeKills = 151,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Oracle_FatesEdictKills)
                kKillEaterEvent_Oracle_FatesEdictKills = 152,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Oracle_FalsePromiseSaves)
                kKillEaterEvent_Oracle_FalsePromiseSaves = 153,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEvent_Juggernaut_OmnislashKills)
                kKillEaterEvent_Juggernaut_OmnislashKills = 154,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_SkeletonKing_SkeletonHeroKills)
                kKillEaterEventType_SkeletonKing_SkeletonHeroKills = 157,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DarkWillow_CursedCrownTripleStuns)
                kKillEaterEventType_DarkWillow_CursedCrownTripleStuns = 158,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Dazzle_ShallowGraveSaves)
                kKillEaterEventType_Dazzle_ShallowGraveSaves = 159,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Dazzle_PoisonTouchKills)
                kKillEaterEventType_Dazzle_PoisonTouchKills = 160,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_ThreeManMeks)
                kKillEaterEventType_ThreeManMeks = 161,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Viper_PoisonAttackKills)
                kKillEaterEventType_Viper_PoisonAttackKills = 162,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Viper_CorrosiveSkinKills)
                kKillEaterEventType_Viper_CorrosiveSkinKills = 163,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_ThreeHeroVeils)
                kKillEaterEventType_ThreeHeroVeils = 164,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Viper_KillsDuringViperStrike)
                kKillEaterEventType_Viper_KillsDuringViperStrike = 165,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_SolarCrestKills)
                kKillEaterEventType_SolarCrestKills = 166,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Tiny_TreeThrowKills)
                kKillEaterEventType_Tiny_TreeThrowKills = 167,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Riki_BackstabKills)
                kKillEaterEventType_Riki_BackstabKills = 168,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Phoenix_ThreeHeroSupernovaStuns)
                kKillEaterEventType_Phoenix_ThreeHeroSupernovaStuns = 169,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Terrorblade_MetamorphosisKills)
                kKillEaterEventType_Terrorblade_MetamorphosisKills = 170,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Lion_GreatFingerKills)
                kKillEaterEventType_Lion_GreatFingerKills = 171,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Antimage_SpellsBlockedWithAghanims)
                kKillEaterEventType_Antimage_SpellsBlockedWithAghanims = 172,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Antimage_ThreeManManaVoids)
                kKillEaterEventType_Antimage_ThreeManManaVoids = 173,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_ArcWarden_TempestDoubleKills)
                kKillEaterEventType_ArcWarden_TempestDoubleKills = 174,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_ArcWarden_SparkWraithKills)
                kKillEaterEventType_ArcWarden_SparkWraithKills = 175,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Bane_BrainSapKills)
                kKillEaterEventType_Bane_BrainSapKills = 176,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Bane_FiendsGripKills)
                kKillEaterEventType_Bane_FiendsGripKills = 177,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Batrider_TripleHeroFlamebreaks)
                kKillEaterEventType_Batrider_TripleHeroFlamebreaks = 178,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Batrider_DoubleHeroLassoes)
                kKillEaterEventType_Batrider_DoubleHeroLassoes = 179,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Brewmaster_KillsDuringPrimalSplit)
                kKillEaterEventType_Brewmaster_KillsDuringPrimalSplit = 180,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Bristleback_KillsUnderFourQuillStacks)
                kKillEaterEventType_Bristleback_KillsUnderFourQuillStacks = 181,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Bristleback_TripleHeroNasalGoo)
                kKillEaterEventType_Bristleback_TripleHeroNasalGoo = 182,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Broodmother_SpiderlingHeroKills)
                kKillEaterEventType_Broodmother_SpiderlingHeroKills = 183,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Broodmother_KillsInsideWeb)
                kKillEaterEventType_Broodmother_KillsInsideWeb = 184,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Centaur_ThreeHeroStampede)
                kKillEaterEventType_Centaur_ThreeHeroStampede = 185,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_ChaosKnight_RealityRiftKills)
                kKillEaterEventType_ChaosKnight_RealityRiftKills = 186,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Chen_KillsWithPenitence)
                kKillEaterEventType_Chen_KillsWithPenitence = 187,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_CrystalMaiden_TwoHeroCrystalNovas)
                kKillEaterEventType_CrystalMaiden_TwoHeroCrystalNovas = 188,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_CrystalMaiden_ThreeHeroFreezingFields)
                kKillEaterEventType_CrystalMaiden_ThreeHeroFreezingFields = 189,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Dazzle_ShadowWaveKills)
                kKillEaterEventType_Dazzle_ShadowWaveKills = 190,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DeathProphet_SiphonKills)
                kKillEaterEventType_DeathProphet_SiphonKills = 191,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DeathProphet_ExorcismKillsDuringEuls)
                kKillEaterEventType_DeathProphet_ExorcismKillsDuringEuls = 192,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Disruptor_ThreeHeroKineticFieldStaticStorm)
                kKillEaterEventType_Disruptor_ThreeHeroKineticFieldStaticStorm = 193,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Doom_InfernalBladeBurnKills)
                kKillEaterEventType_Doom_InfernalBladeBurnKills = 194,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DrowRanger_PrecisionAuraCreepTowerKills)
                kKillEaterEventType_DrowRanger_PrecisionAuraCreepTowerKills = 195,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_EmberSpirit_RemnantKills)
                kKillEaterEventType_EmberSpirit_RemnantKills = 196,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_EmberSpirit_SleightOfFistKills)
                kKillEaterEventType_EmberSpirit_SleightOfFistKills = 197,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Enigma_MidnightPulseBlackHoleCombos)
                kKillEaterEventType_Enigma_MidnightPulseBlackHoleCombos = 198,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Enigma_ThreeManBlackHoles)
                kKillEaterEventType_Enigma_ThreeManBlackHoles = 199,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_FacelessVoid_MultiHeroTimeDilation)
                kKillEaterEventType_FacelessVoid_MultiHeroTimeDilation = 200,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Gyrocopter_ThreeHeroFlakCannon)
                kKillEaterEventType_Gyrocopter_ThreeHeroFlakCannon = 201,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Gyrocopter_HomingMissileKills)
                kKillEaterEventType_Gyrocopter_HomingMissileKills = 202,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Gyrocopter_RocketBarrageKills)
                kKillEaterEventType_Gyrocopter_RocketBarrageKills = 203,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Huskar_KillsDuringLifeBreak)
                kKillEaterEventType_Huskar_KillsDuringLifeBreak = 204,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Huskar_BurningSpearKills)
                kKillEaterEventType_Huskar_BurningSpearKills = 205,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Invoker_MultiHeroIceWall)
                kKillEaterEventType_Invoker_MultiHeroIceWall = 206,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Invoker_ThreeHeroEMP)
                kKillEaterEventType_Invoker_ThreeHeroEMP = 207,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Invoker_ThreeHeroDeafeningBlast)
                kKillEaterEventType_Invoker_ThreeHeroDeafeningBlast = 208,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Invoker_MultiHeroChaosMeteor)
                kKillEaterEventType_Invoker_MultiHeroChaosMeteor = 209,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Jakiro_MultiHeroDualBreath)
                kKillEaterEventType_Jakiro_MultiHeroDualBreath = 210,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Jakiro_IcePathMacropyreCombos)
                kKillEaterEventType_Jakiro_IcePathMacropyreCombos = 211,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Leshrac_PulseNovaKills)
                kKillEaterEventType_Leshrac_PulseNovaKills = 212,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Leshrac_ThreeHeroLightningStorm)
                kKillEaterEventType_Leshrac_ThreeHeroLightningStorm = 213,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Lion_ThreeHeroFingerOfDeath)
                kKillEaterEventType_Lion_ThreeHeroFingerOfDeath = 214,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Meepo_PoofKills)
                kKillEaterEventType_Meepo_PoofKills = 215,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Meepo_MultiHeroEarthbinds)
                kKillEaterEventType_Meepo_MultiHeroEarthbinds = 216,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_NightStalker_NighttimeKills)
                kKillEaterEventType_NightStalker_NighttimeKills = 217,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Morphling_KillsDuringReplicate)
                kKillEaterEventType_Morphling_KillsDuringReplicate = 218,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_OgreMagi_FireblastKills)
                kKillEaterEventType_OgreMagi_FireblastKills = 219,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_OgreMagi_IgniteKills)
                kKillEaterEventType_OgreMagi_IgniteKills = 220,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DominatingKillStreaks)
                kKillEaterEventType_DominatingKillStreaks = 221,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_MegaKillStreaks)
                kKillEaterEventType_MegaKillStreaks = 222,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Alchemist_AghanimsGiven)
                kKillEaterEventType_Alchemist_AghanimsGiven = 223,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_VeilsLeadingToKills)
                kKillEaterEventType_VeilsLeadingToKills = 224,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_DustLeadingToKills)
                kKillEaterEventType_DustLeadingToKills = 225,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_WitchDoctor_MultiHeroCaskStuns)
                kKillEaterEventType_WitchDoctor_MultiHeroCaskStuns = 226,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Weaver_ShukuchiKills)
                kKillEaterEventType_Weaver_ShukuchiKills = 227,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Windrunner_ShackleFocusFireKills)
                kKillEaterEventType_Windrunner_ShackleFocusFireKills = 228,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_VengefulSpirit_VengeanceAuraIllusionKills)
                kKillEaterEventType_VengefulSpirit_VengeanceAuraIllusionKills = 229,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Tusk_WalrusPunchKills)
                kKillEaterEventType_Tusk_WalrusPunchKills = 230,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Tinker_MultiHeroLasers)
                kKillEaterEventType_Tinker_MultiHeroLasers = 231,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_TemplarAssassin_MultiHeroPsiBlades)
                kKillEaterEventType_TemplarAssassin_MultiHeroPsiBlades = 232,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Sven_KillsDuringGodsStrength)
                kKillEaterEventType_Sven_KillsDuringGodsStrength = 233,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Sniper_ThreeHeroShrapnels)
                kKillEaterEventType_Sniper_ThreeHeroShrapnels = 234,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Slark_KillsDuringShadowDance)
                kKillEaterEventType_Slark_KillsDuringShadowDance = 235,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_ShadowShaman_MultiHeroEtherShocks)
                kKillEaterEventType_ShadowShaman_MultiHeroEtherShocks = 236,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_ShadowShaman_SerpentWardShackleKills)
                kKillEaterEventType_ShadowShaman_SerpentWardShackleKills = 237,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Riki_ThreeHeroTricksOfTheTrade)
                kKillEaterEventType_Riki_ThreeHeroTricksOfTheTrade = 238,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Razor_EyeOfTheStormKills)
                kKillEaterEventType_Razor_EyeOfTheStormKills = 239,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Pugna_LifeDrainKills)
                kKillEaterEventType_Pugna_LifeDrainKills = 240,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_ObsidianDestroyer_SanitysEclipseKills)
                kKillEaterEventType_ObsidianDestroyer_SanitysEclipseKills = 241,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Oracle_MultiHeroFortunesEnd)
                kKillEaterEventType_Oracle_MultiHeroFortunesEnd = 242,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Omniknight_PurificationKills)
                kKillEaterEventType_Omniknight_PurificationKills = 243,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_NightStalker_EnemyMissesUnderCripplingFear)
                kKillEaterEventType_NightStalker_EnemyMissesUnderCripplingFear = 244,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Warlock_ThreeHeroFatalBonds)
                kKillEaterEventType_Warlock_ThreeHeroFatalBonds = 245,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Riki_TricksOfTheTradeKills)
                kKillEaterEventType_Riki_TricksOfTheTradeKills = 246,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Earthshaker_AftershockHits10)
                kKillEaterEventType_Earthshaker_AftershockHits10 = 247,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Earthshaker_5HeroEchoslams)
                kKillEaterEventType_Earthshaker_5HeroEchoslams = 248,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Lina_LagunaBladeHeroKills)
                kKillEaterEventType_Lina_LagunaBladeHeroKills = 249,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Lina_LightStrikeHeroStuns)
                kKillEaterEventType_Lina_LightStrikeHeroStuns = 250,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Earthshaker_FissureMultiStuns)
                kKillEaterEventType_Earthshaker_FissureMultiStuns = 251,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Earthshaker_TotemKills)
                kKillEaterEventType_Earthshaker_TotemKills = 252,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Pangolier_SwashbuckleKills)
                kKillEaterEventType_Pangolier_SwashbuckleKills = 253,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Furion_EnemyHeroesTrapped)
                kKillEaterEventType_Furion_EnemyHeroesTrapped = 254,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Pangolier_HeartpiercerKills)
                kKillEaterEventType_Pangolier_HeartpiercerKills = 255,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Medusa_MultiHeroStoneGaze)
                kKillEaterEventType_Medusa_MultiHeroStoneGaze = 256,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Medusa_SplitShotKills)
                kKillEaterEventType_Medusa_SplitShotKills = 257,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Mirana_MultiHeroStarstorm)
                kKillEaterEventType_Mirana_MultiHeroStarstorm = 258,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Mirana_KillsFromMoonlightShadow)
                kKillEaterEventType_Mirana_KillsFromMoonlightShadow = 259,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Magnus_MultiHeroSkewers)
                kKillEaterEventType_Magnus_MultiHeroSkewers = 260,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Magnus_MultiHeroReversePolarity)
                kKillEaterEventType_Magnus_MultiHeroReversePolarity = 261,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Magnus_HeroesSlowedWithShockwave)
                kKillEaterEventType_Magnus_HeroesSlowedWithShockwave = 262,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_NagaSiren_MultiHeroSong)
                kKillEaterEventType_NagaSiren_MultiHeroSong = 263,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_NagaSiren_AlliesHealedBySong)
                kKillEaterEventType_NagaSiren_AlliesHealedBySong = 264,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_LoneDruid_MultiHeroRoar)
                kKillEaterEventType_LoneDruid_MultiHeroRoar = 265,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_LoneDruid_BattleCryKills)
                kKillEaterEventType_LoneDruid_BattleCryKills = 266,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_WinterWyvern_ThreeHeroCurses)
                kKillEaterEventType_WinterWyvern_ThreeHeroCurses = 267,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Antimage_SpellsBlockedWithCounterspell)
                kKillEaterEventType_Antimage_SpellsBlockedWithCounterspell = 268,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Mars_EnemiesKilledInArena)
                kKillEaterEventType_Mars_EnemiesKilledInArena = 269,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Mars_MultiHeroGodsRebuke)
                kKillEaterEventType_Mars_MultiHeroGodsRebuke = 270,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Mars_GodsRebukeKills)
                kKillEaterEventType_Mars_GodsRebukeKills = 271,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Snapfire_LizardBlobsKills)
                kKillEaterEventType_Snapfire_LizardBlobsKills = 272,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Snapfire_TwoHeroCookieStuns)
                kKillEaterEventType_Snapfire_TwoHeroCookieStuns = 273,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.Custom_KillStreak)
                Custom_KillStreak = 274,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Muerta_DeadShotKills)
                kKillEaterEventType_Muerta_DeadShotKills = 275,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Muerta_PierceTheVeilKills)
                kKillEaterEventType_Muerta_PierceTheVeilKills = 276,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Muerta_MultiHeroDeadShot)
                kKillEaterEventType_Muerta_MultiHeroDeadShot = 277,
                // @@protoc_insertion_point(enum_value:CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType.kKillEaterEventType_Muerta_DeadShotsIntoTheCalling)
                kKillEaterEventType_Muerta_DeadShotsIntoTheCalling = 278,
            }

            impl ::steam_vent_proto_common::protobuf::Enum for MvpAccoladeType {
                const NAME: &'static str = "MvpAccoladeType";

                fn value(&self) -> i32 {
                    *self as i32
                }

                fn from_i32(value: i32) -> ::std::option::Option<MvpAccoladeType> {
                    match value {
                        1 => ::std::option::Option::Some(MvpAccoladeType::kills),
                        2 => ::std::option::Option::Some(MvpAccoladeType::deaths),
                        3 => ::std::option::Option::Some(MvpAccoladeType::assists),
                        5 => ::std::option::Option::Some(MvpAccoladeType::net_worth),
                        6 => ::std::option::Option::Some(MvpAccoladeType::item_value),
                        7 => ::std::option::Option::Some(MvpAccoladeType::support_gold_spent),
                        8 => ::std::option::Option::Some(MvpAccoladeType::wards_placed),
                        9 => ::std::option::Option::Some(MvpAccoladeType::dewards),
                        10 => ::std::option::Option::Some(MvpAccoladeType::camps_stacked),
                        11 => ::std::option::Option::Some(MvpAccoladeType::last_hits),
                        12 => ::std::option::Option::Some(MvpAccoladeType::denies),
                        13 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Killing_Sprees),
                        14 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Godlike),
                        15 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Towers_Destroyed),
                        16 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Invoker_SunstrikeKills),
                        17 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Axe_Culls),
                        18 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Axe_BattleHungerKills),
                        19 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_LowHealthKills),
                        20 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Invoker_TornadoKills),
                        21 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Sven_DoubleStuns),
                        22 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Sven_WarcryAssists),
                        23 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Sven_CleaveDoubleKills),
                        24 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Sven_TeleportInterrupts),
                        25 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Faceless_MultiChrono),
                        26 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Faceless_ChronoKills),
                        27 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Ursa_MultiShocks),
                        28 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_RoshanKills),
                        29 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lion_FingerKills),
                        32 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Riki_SmokedHeroKills),
                        33 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_HeroesRevealedWithDust),
                        34 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_SkeletonKing_ReincarnationKills),
                        35 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Skywrath_FlareKills),
                        36 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Leshrac_SplitEarthStuns),
                        37 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Mirana_MaxStunArrows),
                        38 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_PhantomAssassin_CoupdeGraceCrits),
                        39 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_PhantomAssassin_DaggerCrits),
                        40 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Meepo_Earthbinds),
                        41 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Bloodseeker_RuptureKills),
                        42 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Slark_LeashedEnemies),
                        43 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Disruptor_FountainGlimpses),
                        44 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Rubick_SpellsStolen),
                        45 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Rubick_UltimatesStolen),
                        46 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Doom_EnemiesDoomed),
                        47 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Omniknight_Purifications),
                        48 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Omniknight_AlliesRepelled),
                        49 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Omniknight_EnemiesRepelled),
                        50 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Warlock_FiveHeroFatalBonds),
                        51 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_CrystalMaiden_FrostbittenEnemies),
                        52 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_CrystalMaiden_CrystalNovas),
                        53 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Kunkka_DoubleHeroTorrents),
                        54 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Kunkka_TripleHeroGhostShips),
                        55 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_NagaSiren_EnemiesEnsnared),
                        56 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_NagaSiren_TripleHeroRipTides),
                        57 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lycan_KillsDuringShapeshift),
                        58 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Pudge_DismemberKills),
                        59 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Pudge_EnemyHeroesHooked),
                        60 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Pudge_HookKills),
                        61 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Pudge_UnseenEnemyHeroesHooked),
                        62 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DrowRanger_EnemiesSilenced),
                        63 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DrowRanger_MultiHeroSilences),
                        64 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DrowRanger_SilencedKills),
                        65 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DrowRanger_FrostArrowKills),
                        66 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DragonKnight_KillsInDragonForm),
                        67 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DragonKnight_BreatheFireKills),
                        68 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DragonKnight_SplashKills),
                        69 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_WitchDoctor_CaskStuns),
                        70 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_WitchDoctor_MaledictKills),
                        71 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_WitchDoctor_MultiHeroMaledicts),
                        72 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_WitchDoctor_DeathWardKills),
                        73 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Disruptor_ThunderStrikeKills),
                        74 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Disruptor_HeroesGlimpsed),
                        75 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_CrystalMaiden_FreezingFieldKills),
                        77 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Medusa_EnemiesPetrified),
                        78 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Warlock_FatalBondsKills),
                        79 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Warlock_GolemKills),
                        80 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Tusk_WalrusPunches),
                        81 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Tusk_SnowballStuns),
                        82 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Earthshaker_FissureStuns),
                        83 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Earthshaker_3HeroEchoslams),
                        84 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_SandKing_BurrowstrikeStuns),
                        85 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_SandKing_EpicenterKills),
                        86 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_SkywrathMage_AncientSealKills),
                        87 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_SkywrathMage_ConcussiveShotKills),
                        88 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Luna_LucentBeamKills),
                        89 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Luna_EclipseKills),
                        90 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_KeeperOfTheLight_IlluminateKills),
                        91 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_KeeperOfTheLight_ManaLeakStuns),
                        92 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_KeeperOfTheLight_TeammatesRecalled),
                        93 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_LegionCommander_DuelsWon),
                        94 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Beastmaster_RoarKills),
                        95 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Beastmaster_RoarMultiKills),
                        96 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Windrunner_FocusFireBuildings),
                        97 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Windrunner_PowershotKills),
                        98 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_PhantomAssassin_DaggerLastHits),
                        99 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_PhantomAssassin_PhantomStrikeKills),
                        100 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DeathProphet_CryptSwarmKills),
                        101 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DeathProphet_ExorcismBuildingKills),
                        102 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DeathProphet_ExorcismSpiritsSummoned),
                        103 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DeathProphet_MultiHeroSilences),
                        104 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Abaddon_MistCoilKills),
                        105 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Abaddon_MistCoilHealed),
                        106 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Abaddon_AphoticShieldKills),
                        107 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lich_ChainFrostTripleKills),
                        108 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lich_ChainFrostMultiKills),
                        109 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lich_ChainFrostBounces),
                        110 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Ursa_EnragedKills),
                        111 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Ursa_EarthshockKills),
                        112 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lina_LagunaBladeKills),
                        113 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lina_DragonSlaveKills),
                        114 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lina_LightStrikeArrayStuns),
                        115 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Barracks_Destroyed),
                        116 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_TemplarAssassin_MeldKills),
                        117 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_TemplarAssassin_HeroesSlowed),
                        118 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Sniper_AssassinationKills),
                        119 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Sniper_HeadshotStuns),
                        120 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_EarthSpirit_SmashStuns),
                        121 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_EarthSpirit_GripSilences),
                        122 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ShadowShaman_ShackleKills),
                        123 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ShadowShaman_HexKills),
                        124 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Centaur_EnemiesStomped),
                        125 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Centaur_DoubleEdgeKills),
                        126 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Centaur_ReturnKills),
                        127 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_EmberSpirit_EnemiesChained),
                        128 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_EmberSpirit_SleightOfFistMultiKills),
                        129 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Puck_OrbKills),
                        130 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_VengefulSpirit_EnemiesStunned),
                        131 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Lifestealer_RageKills),
                        132 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Lifestealer_OpenWoundsKills),
                        133 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Lifestealer_InfestKills),
                        134 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ElderTitan_SpiritKills),
                        135 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ElderTitan_GoodStomps),
                        136 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Clockwerk_RocketKills),
                        137 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Clockwerk_BlindRocketKills),
                        138 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_StormSpirit_BallKills),
                        139 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_StormSpirit_DoubleRemnantKills),
                        140 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_StormSpirit_VortexKills),
                        141 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Tinker_DoubleMissileKills),
                        142 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Tinker_LaserKills),
                        143 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Techies_SuicideKills),
                        144 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Techies_LandMineKills),
                        145 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Techies_StatisTrapStuns),
                        146 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Techies_RemoteMineKills),
                        147 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ShadowFiend_TripleRazeKills),
                        148 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ShadowFiend_RequiemMultiKills),
                        149 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ShadowFiend_QRazeKills),
                        150 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ShadowFiend_WRazeKills),
                        151 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ShadowFiend_ERazeKills),
                        152 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Oracle_FatesEdictKills),
                        153 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Oracle_FalsePromiseSaves),
                        154 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Juggernaut_OmnislashKills),
                        157 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_SkeletonKing_SkeletonHeroKills),
                        158 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DarkWillow_CursedCrownTripleStuns),
                        159 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Dazzle_ShallowGraveSaves),
                        160 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Dazzle_PoisonTouchKills),
                        161 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_ThreeManMeks),
                        162 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Viper_PoisonAttackKills),
                        163 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Viper_CorrosiveSkinKills),
                        164 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_ThreeHeroVeils),
                        165 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Viper_KillsDuringViperStrike),
                        166 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_SolarCrestKills),
                        167 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Tiny_TreeThrowKills),
                        168 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Riki_BackstabKills),
                        169 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Phoenix_ThreeHeroSupernovaStuns),
                        170 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Terrorblade_MetamorphosisKills),
                        171 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lion_GreatFingerKills),
                        172 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Antimage_SpellsBlockedWithAghanims),
                        173 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Antimage_ThreeManManaVoids),
                        174 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_ArcWarden_TempestDoubleKills),
                        175 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_ArcWarden_SparkWraithKills),
                        176 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Bane_BrainSapKills),
                        177 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Bane_FiendsGripKills),
                        178 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Batrider_TripleHeroFlamebreaks),
                        179 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Batrider_DoubleHeroLassoes),
                        180 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Brewmaster_KillsDuringPrimalSplit),
                        181 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Bristleback_KillsUnderFourQuillStacks),
                        182 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Bristleback_TripleHeroNasalGoo),
                        183 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Broodmother_SpiderlingHeroKills),
                        184 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Broodmother_KillsInsideWeb),
                        185 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Centaur_ThreeHeroStampede),
                        186 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_ChaosKnight_RealityRiftKills),
                        187 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Chen_KillsWithPenitence),
                        188 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_CrystalMaiden_TwoHeroCrystalNovas),
                        189 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_CrystalMaiden_ThreeHeroFreezingFields),
                        190 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Dazzle_ShadowWaveKills),
                        191 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DeathProphet_SiphonKills),
                        192 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DeathProphet_ExorcismKillsDuringEuls),
                        193 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Disruptor_ThreeHeroKineticFieldStaticStorm),
                        194 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Doom_InfernalBladeBurnKills),
                        195 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DrowRanger_PrecisionAuraCreepTowerKills),
                        196 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_EmberSpirit_RemnantKills),
                        197 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_EmberSpirit_SleightOfFistKills),
                        198 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Enigma_MidnightPulseBlackHoleCombos),
                        199 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Enigma_ThreeManBlackHoles),
                        200 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_FacelessVoid_MultiHeroTimeDilation),
                        201 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Gyrocopter_ThreeHeroFlakCannon),
                        202 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Gyrocopter_HomingMissileKills),
                        203 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Gyrocopter_RocketBarrageKills),
                        204 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Huskar_KillsDuringLifeBreak),
                        205 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Huskar_BurningSpearKills),
                        206 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Invoker_MultiHeroIceWall),
                        207 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Invoker_ThreeHeroEMP),
                        208 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Invoker_ThreeHeroDeafeningBlast),
                        209 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Invoker_MultiHeroChaosMeteor),
                        210 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Jakiro_MultiHeroDualBreath),
                        211 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Jakiro_IcePathMacropyreCombos),
                        212 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Leshrac_PulseNovaKills),
                        213 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Leshrac_ThreeHeroLightningStorm),
                        214 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lion_ThreeHeroFingerOfDeath),
                        215 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Meepo_PoofKills),
                        216 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Meepo_MultiHeroEarthbinds),
                        217 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_NightStalker_NighttimeKills),
                        218 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Morphling_KillsDuringReplicate),
                        219 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_OgreMagi_FireblastKills),
                        220 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_OgreMagi_IgniteKills),
                        221 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DominatingKillStreaks),
                        222 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_MegaKillStreaks),
                        223 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Alchemist_AghanimsGiven),
                        224 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_VeilsLeadingToKills),
                        225 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DustLeadingToKills),
                        226 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_WitchDoctor_MultiHeroCaskStuns),
                        227 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Weaver_ShukuchiKills),
                        228 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Windrunner_ShackleFocusFireKills),
                        229 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_VengefulSpirit_VengeanceAuraIllusionKills),
                        230 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Tusk_WalrusPunchKills),
                        231 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Tinker_MultiHeroLasers),
                        232 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_TemplarAssassin_MultiHeroPsiBlades),
                        233 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Sven_KillsDuringGodsStrength),
                        234 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Sniper_ThreeHeroShrapnels),
                        235 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Slark_KillsDuringShadowDance),
                        236 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_ShadowShaman_MultiHeroEtherShocks),
                        237 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_ShadowShaman_SerpentWardShackleKills),
                        238 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Riki_ThreeHeroTricksOfTheTrade),
                        239 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Razor_EyeOfTheStormKills),
                        240 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Pugna_LifeDrainKills),
                        241 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_ObsidianDestroyer_SanitysEclipseKills),
                        242 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Oracle_MultiHeroFortunesEnd),
                        243 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Omniknight_PurificationKills),
                        244 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_NightStalker_EnemyMissesUnderCripplingFear),
                        245 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Warlock_ThreeHeroFatalBonds),
                        246 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Riki_TricksOfTheTradeKills),
                        247 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Earthshaker_AftershockHits10),
                        248 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Earthshaker_5HeroEchoslams),
                        249 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lina_LagunaBladeHeroKills),
                        250 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lina_LightStrikeHeroStuns),
                        251 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Earthshaker_FissureMultiStuns),
                        252 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Earthshaker_TotemKills),
                        253 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Pangolier_SwashbuckleKills),
                        254 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Furion_EnemyHeroesTrapped),
                        255 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Pangolier_HeartpiercerKills),
                        256 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Medusa_MultiHeroStoneGaze),
                        257 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Medusa_SplitShotKills),
                        258 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Mirana_MultiHeroStarstorm),
                        259 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Mirana_KillsFromMoonlightShadow),
                        260 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Magnus_MultiHeroSkewers),
                        261 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Magnus_MultiHeroReversePolarity),
                        262 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Magnus_HeroesSlowedWithShockwave),
                        263 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_NagaSiren_MultiHeroSong),
                        264 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_NagaSiren_AlliesHealedBySong),
                        265 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_LoneDruid_MultiHeroRoar),
                        266 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_LoneDruid_BattleCryKills),
                        267 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_WinterWyvern_ThreeHeroCurses),
                        268 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Antimage_SpellsBlockedWithCounterspell),
                        269 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Mars_EnemiesKilledInArena),
                        270 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Mars_MultiHeroGodsRebuke),
                        271 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Mars_GodsRebukeKills),
                        272 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Snapfire_LizardBlobsKills),
                        273 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Snapfire_TwoHeroCookieStuns),
                        274 => ::std::option::Option::Some(MvpAccoladeType::Custom_KillStreak),
                        275 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Muerta_DeadShotKills),
                        276 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Muerta_PierceTheVeilKills),
                        277 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Muerta_MultiHeroDeadShot),
                        278 => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Muerta_DeadShotsIntoTheCalling),
                        _ => ::std::option::Option::None
                    }
                }

                fn from_str(str: &str) -> ::std::option::Option<MvpAccoladeType> {
                    match str {
                        "kills" => ::std::option::Option::Some(MvpAccoladeType::kills),
                        "deaths" => ::std::option::Option::Some(MvpAccoladeType::deaths),
                        "assists" => ::std::option::Option::Some(MvpAccoladeType::assists),
                        "net_worth" => ::std::option::Option::Some(MvpAccoladeType::net_worth),
                        "item_value" => ::std::option::Option::Some(MvpAccoladeType::item_value),
                        "support_gold_spent" => ::std::option::Option::Some(MvpAccoladeType::support_gold_spent),
                        "wards_placed" => ::std::option::Option::Some(MvpAccoladeType::wards_placed),
                        "dewards" => ::std::option::Option::Some(MvpAccoladeType::dewards),
                        "camps_stacked" => ::std::option::Option::Some(MvpAccoladeType::camps_stacked),
                        "last_hits" => ::std::option::Option::Some(MvpAccoladeType::last_hits),
                        "denies" => ::std::option::Option::Some(MvpAccoladeType::denies),
                        "kKillEaterEvent_Killing_Sprees" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Killing_Sprees),
                        "kKillEaterEvent_Godlike" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Godlike),
                        "kKillEaterEvent_Towers_Destroyed" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Towers_Destroyed),
                        "kKillEaterEventType_Invoker_SunstrikeKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Invoker_SunstrikeKills),
                        "kKillEaterEventType_Axe_Culls" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Axe_Culls),
                        "kKillEaterEventType_Axe_BattleHungerKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Axe_BattleHungerKills),
                        "kKillEaterEventType_LowHealthKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_LowHealthKills),
                        "kKillEaterEventType_Invoker_TornadoKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Invoker_TornadoKills),
                        "kKillEaterEventType_Sven_DoubleStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Sven_DoubleStuns),
                        "kKillEaterEventType_Sven_WarcryAssists" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Sven_WarcryAssists),
                        "kKillEaterEventType_Sven_CleaveDoubleKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Sven_CleaveDoubleKills),
                        "kKillEaterEventType_Sven_TeleportInterrupts" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Sven_TeleportInterrupts),
                        "kKillEaterEventType_Faceless_MultiChrono" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Faceless_MultiChrono),
                        "kKillEaterEventType_Faceless_ChronoKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Faceless_ChronoKills),
                        "kKillEaterEventType_Ursa_MultiShocks" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Ursa_MultiShocks),
                        "kKillEaterEventType_RoshanKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_RoshanKills),
                        "kKillEaterEventType_Lion_FingerKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lion_FingerKills),
                        "kKillEaterEventType_Riki_SmokedHeroKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Riki_SmokedHeroKills),
                        "kKillEaterEventType_HeroesRevealedWithDust" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_HeroesRevealedWithDust),
                        "kKillEaterEventType_SkeletonKing_ReincarnationKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_SkeletonKing_ReincarnationKills),
                        "kKillEaterEventType_Skywrath_FlareKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Skywrath_FlareKills),
                        "kKillEaterEventType_Leshrac_SplitEarthStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Leshrac_SplitEarthStuns),
                        "kKillEaterEventType_Mirana_MaxStunArrows" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Mirana_MaxStunArrows),
                        "kKillEaterEventType_PhantomAssassin_CoupdeGraceCrits" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_PhantomAssassin_CoupdeGraceCrits),
                        "kKillEaterEventType_PhantomAssassin_DaggerCrits" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_PhantomAssassin_DaggerCrits),
                        "kKillEaterEventType_Meepo_Earthbinds" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Meepo_Earthbinds),
                        "kKillEaterEventType_Bloodseeker_RuptureKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Bloodseeker_RuptureKills),
                        "kKillEaterEventType_Slark_LeashedEnemies" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Slark_LeashedEnemies),
                        "kKillEaterEventType_Disruptor_FountainGlimpses" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Disruptor_FountainGlimpses),
                        "kKillEaterEventType_Rubick_SpellsStolen" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Rubick_SpellsStolen),
                        "kKillEaterEventType_Rubick_UltimatesStolen" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Rubick_UltimatesStolen),
                        "kKillEaterEventType_Doom_EnemiesDoomed" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Doom_EnemiesDoomed),
                        "kKillEaterEventType_Omniknight_Purifications" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Omniknight_Purifications),
                        "kKillEaterEventType_Omniknight_AlliesRepelled" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Omniknight_AlliesRepelled),
                        "kKillEaterEventType_Omniknight_EnemiesRepelled" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Omniknight_EnemiesRepelled),
                        "kKillEaterEventType_Warlock_FiveHeroFatalBonds" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Warlock_FiveHeroFatalBonds),
                        "kKillEaterEventType_CrystalMaiden_FrostbittenEnemies" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_CrystalMaiden_FrostbittenEnemies),
                        "kKillEaterEventType_CrystalMaiden_CrystalNovas" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_CrystalMaiden_CrystalNovas),
                        "kKillEaterEventType_Kunkka_DoubleHeroTorrents" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Kunkka_DoubleHeroTorrents),
                        "kKillEaterEventType_Kunkka_TripleHeroGhostShips" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Kunkka_TripleHeroGhostShips),
                        "kKillEaterEventType_NagaSiren_EnemiesEnsnared" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_NagaSiren_EnemiesEnsnared),
                        "kKillEaterEventType_NagaSiren_TripleHeroRipTides" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_NagaSiren_TripleHeroRipTides),
                        "kKillEaterEventType_Lycan_KillsDuringShapeshift" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lycan_KillsDuringShapeshift),
                        "kKillEaterEventType_Pudge_DismemberKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Pudge_DismemberKills),
                        "kKillEaterEventType_Pudge_EnemyHeroesHooked" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Pudge_EnemyHeroesHooked),
                        "kKillEaterEventType_Pudge_HookKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Pudge_HookKills),
                        "kKillEaterEventType_Pudge_UnseenEnemyHeroesHooked" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Pudge_UnseenEnemyHeroesHooked),
                        "kKillEaterEventType_DrowRanger_EnemiesSilenced" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DrowRanger_EnemiesSilenced),
                        "kKillEaterEventType_DrowRanger_MultiHeroSilences" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DrowRanger_MultiHeroSilences),
                        "kKillEaterEventType_DrowRanger_SilencedKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DrowRanger_SilencedKills),
                        "kKillEaterEventType_DrowRanger_FrostArrowKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DrowRanger_FrostArrowKills),
                        "kKillEaterEventType_DragonKnight_KillsInDragonForm" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DragonKnight_KillsInDragonForm),
                        "kKillEaterEventType_DragonKnight_BreatheFireKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DragonKnight_BreatheFireKills),
                        "kKillEaterEventType_DragonKnight_SplashKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DragonKnight_SplashKills),
                        "kKillEaterEventType_WitchDoctor_CaskStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_WitchDoctor_CaskStuns),
                        "kKillEaterEventType_WitchDoctor_MaledictKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_WitchDoctor_MaledictKills),
                        "kKillEaterEventType_WitchDoctor_MultiHeroMaledicts" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_WitchDoctor_MultiHeroMaledicts),
                        "kKillEaterEventType_WitchDoctor_DeathWardKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_WitchDoctor_DeathWardKills),
                        "kKillEaterEventType_Disruptor_ThunderStrikeKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Disruptor_ThunderStrikeKills),
                        "kKillEaterEventType_Disruptor_HeroesGlimpsed" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Disruptor_HeroesGlimpsed),
                        "kKillEaterEventType_CrystalMaiden_FreezingFieldKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_CrystalMaiden_FreezingFieldKills),
                        "kKillEaterEventType_Medusa_EnemiesPetrified" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Medusa_EnemiesPetrified),
                        "kKillEaterEventType_Warlock_FatalBondsKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Warlock_FatalBondsKills),
                        "kKillEaterEventType_Warlock_GolemKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Warlock_GolemKills),
                        "kKillEaterEventType_Tusk_WalrusPunches" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Tusk_WalrusPunches),
                        "kKillEaterEventType_Tusk_SnowballStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Tusk_SnowballStuns),
                        "kKillEaterEventType_Earthshaker_FissureStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Earthshaker_FissureStuns),
                        "kKillEaterEventType_Earthshaker_3HeroEchoslams" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Earthshaker_3HeroEchoslams),
                        "kKillEaterEventType_SandKing_BurrowstrikeStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_SandKing_BurrowstrikeStuns),
                        "kKillEaterEventType_SandKing_EpicenterKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_SandKing_EpicenterKills),
                        "kKillEaterEventType_SkywrathMage_AncientSealKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_SkywrathMage_AncientSealKills),
                        "kKillEaterEventType_SkywrathMage_ConcussiveShotKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_SkywrathMage_ConcussiveShotKills),
                        "kKillEaterEventType_Luna_LucentBeamKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Luna_LucentBeamKills),
                        "kKillEaterEventType_Luna_EclipseKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Luna_EclipseKills),
                        "kKillEaterEventType_KeeperOfTheLight_IlluminateKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_KeeperOfTheLight_IlluminateKills),
                        "kKillEaterEventType_KeeperOfTheLight_ManaLeakStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_KeeperOfTheLight_ManaLeakStuns),
                        "kKillEaterEventType_KeeperOfTheLight_TeammatesRecalled" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_KeeperOfTheLight_TeammatesRecalled),
                        "kKillEaterEventType_LegionCommander_DuelsWon" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_LegionCommander_DuelsWon),
                        "kKillEaterEventType_Beastmaster_RoarKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Beastmaster_RoarKills),
                        "kKillEaterEventType_Beastmaster_RoarMultiKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Beastmaster_RoarMultiKills),
                        "kKillEaterEventType_Windrunner_FocusFireBuildings" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Windrunner_FocusFireBuildings),
                        "kKillEaterEventType_Windrunner_PowershotKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Windrunner_PowershotKills),
                        "kKillEaterEventType_PhantomAssassin_DaggerLastHits" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_PhantomAssassin_DaggerLastHits),
                        "kKillEaterEventType_PhantomAssassin_PhantomStrikeKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_PhantomAssassin_PhantomStrikeKills),
                        "kKillEaterEventType_DeathProphet_CryptSwarmKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DeathProphet_CryptSwarmKills),
                        "kKillEaterEventType_DeathProphet_ExorcismBuildingKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DeathProphet_ExorcismBuildingKills),
                        "kKillEaterEventType_DeathProphet_ExorcismSpiritsSummoned" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DeathProphet_ExorcismSpiritsSummoned),
                        "kKillEaterEventType_DeathProphet_MultiHeroSilences" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DeathProphet_MultiHeroSilences),
                        "kKillEaterEventType_Abaddon_MistCoilKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Abaddon_MistCoilKills),
                        "kKillEaterEventType_Abaddon_MistCoilHealed" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Abaddon_MistCoilHealed),
                        "kKillEaterEventType_Abaddon_AphoticShieldKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Abaddon_AphoticShieldKills),
                        "kKillEaterEventType_Lich_ChainFrostTripleKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lich_ChainFrostTripleKills),
                        "kKillEaterEventType_Lich_ChainFrostMultiKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lich_ChainFrostMultiKills),
                        "kKillEaterEventType_Lich_ChainFrostBounces" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lich_ChainFrostBounces),
                        "kKillEaterEventType_Ursa_EnragedKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Ursa_EnragedKills),
                        "kKillEaterEventType_Ursa_EarthshockKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Ursa_EarthshockKills),
                        "kKillEaterEventType_Lina_LagunaBladeKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lina_LagunaBladeKills),
                        "kKillEaterEventType_Lina_DragonSlaveKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lina_DragonSlaveKills),
                        "kKillEaterEventType_Lina_LightStrikeArrayStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lina_LightStrikeArrayStuns),
                        "kKillEaterEvent_Barracks_Destroyed" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Barracks_Destroyed),
                        "kKillEaterEvent_TemplarAssassin_MeldKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_TemplarAssassin_MeldKills),
                        "kKillEaterEvent_TemplarAssassin_HeroesSlowed" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_TemplarAssassin_HeroesSlowed),
                        "kKillEaterEvent_Sniper_AssassinationKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Sniper_AssassinationKills),
                        "kKillEaterEvent_Sniper_HeadshotStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Sniper_HeadshotStuns),
                        "kKillEaterEvent_EarthSpirit_SmashStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_EarthSpirit_SmashStuns),
                        "kKillEaterEvent_EarthSpirit_GripSilences" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_EarthSpirit_GripSilences),
                        "kKillEaterEvent_ShadowShaman_ShackleKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ShadowShaman_ShackleKills),
                        "kKillEaterEvent_ShadowShaman_HexKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ShadowShaman_HexKills),
                        "kKillEaterEvent_Centaur_EnemiesStomped" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Centaur_EnemiesStomped),
                        "kKillEaterEvent_Centaur_DoubleEdgeKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Centaur_DoubleEdgeKills),
                        "kKillEaterEvent_Centaur_ReturnKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Centaur_ReturnKills),
                        "kKillEaterEvent_EmberSpirit_EnemiesChained" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_EmberSpirit_EnemiesChained),
                        "kKillEaterEvent_EmberSpirit_SleightOfFistMultiKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_EmberSpirit_SleightOfFistMultiKills),
                        "kKillEaterEvent_Puck_OrbKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Puck_OrbKills),
                        "kKillEaterEvent_VengefulSpirit_EnemiesStunned" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_VengefulSpirit_EnemiesStunned),
                        "kKillEaterEvent_Lifestealer_RageKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Lifestealer_RageKills),
                        "kKillEaterEvent_Lifestealer_OpenWoundsKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Lifestealer_OpenWoundsKills),
                        "kKillEaterEvent_Lifestealer_InfestKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Lifestealer_InfestKills),
                        "kKillEaterEvent_ElderTitan_SpiritKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ElderTitan_SpiritKills),
                        "kKillEaterEvent_ElderTitan_GoodStomps" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ElderTitan_GoodStomps),
                        "kKillEaterEvent_Clockwerk_RocketKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Clockwerk_RocketKills),
                        "kKillEaterEvent_Clockwerk_BlindRocketKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Clockwerk_BlindRocketKills),
                        "kKillEaterEvent_StormSpirit_BallKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_StormSpirit_BallKills),
                        "kKillEaterEvent_StormSpirit_DoubleRemnantKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_StormSpirit_DoubleRemnantKills),
                        "kKillEaterEvent_StormSpirit_VortexKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_StormSpirit_VortexKills),
                        "kKillEaterEvent_Tinker_DoubleMissileKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Tinker_DoubleMissileKills),
                        "kKillEaterEvent_Tinker_LaserKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Tinker_LaserKills),
                        "kKillEaterEvent_Techies_SuicideKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Techies_SuicideKills),
                        "kKillEaterEvent_Techies_LandMineKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Techies_LandMineKills),
                        "kKillEaterEvent_Techies_StatisTrapStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Techies_StatisTrapStuns),
                        "kKillEaterEvent_Techies_RemoteMineKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Techies_RemoteMineKills),
                        "kKillEaterEvent_ShadowFiend_TripleRazeKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ShadowFiend_TripleRazeKills),
                        "kKillEaterEvent_ShadowFiend_RequiemMultiKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ShadowFiend_RequiemMultiKills),
                        "kKillEaterEvent_ShadowFiend_QRazeKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ShadowFiend_QRazeKills),
                        "kKillEaterEvent_ShadowFiend_WRazeKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ShadowFiend_WRazeKills),
                        "kKillEaterEvent_ShadowFiend_ERazeKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_ShadowFiend_ERazeKills),
                        "kKillEaterEvent_Oracle_FatesEdictKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Oracle_FatesEdictKills),
                        "kKillEaterEvent_Oracle_FalsePromiseSaves" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Oracle_FalsePromiseSaves),
                        "kKillEaterEvent_Juggernaut_OmnislashKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEvent_Juggernaut_OmnislashKills),
                        "kKillEaterEventType_SkeletonKing_SkeletonHeroKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_SkeletonKing_SkeletonHeroKills),
                        "kKillEaterEventType_DarkWillow_CursedCrownTripleStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DarkWillow_CursedCrownTripleStuns),
                        "kKillEaterEventType_Dazzle_ShallowGraveSaves" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Dazzle_ShallowGraveSaves),
                        "kKillEaterEventType_Dazzle_PoisonTouchKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Dazzle_PoisonTouchKills),
                        "kKillEaterEventType_ThreeManMeks" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_ThreeManMeks),
                        "kKillEaterEventType_Viper_PoisonAttackKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Viper_PoisonAttackKills),
                        "kKillEaterEventType_Viper_CorrosiveSkinKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Viper_CorrosiveSkinKills),
                        "kKillEaterEventType_ThreeHeroVeils" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_ThreeHeroVeils),
                        "kKillEaterEventType_Viper_KillsDuringViperStrike" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Viper_KillsDuringViperStrike),
                        "kKillEaterEventType_SolarCrestKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_SolarCrestKills),
                        "kKillEaterEventType_Tiny_TreeThrowKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Tiny_TreeThrowKills),
                        "kKillEaterEventType_Riki_BackstabKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Riki_BackstabKills),
                        "kKillEaterEventType_Phoenix_ThreeHeroSupernovaStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Phoenix_ThreeHeroSupernovaStuns),
                        "kKillEaterEventType_Terrorblade_MetamorphosisKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Terrorblade_MetamorphosisKills),
                        "kKillEaterEventType_Lion_GreatFingerKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lion_GreatFingerKills),
                        "kKillEaterEventType_Antimage_SpellsBlockedWithAghanims" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Antimage_SpellsBlockedWithAghanims),
                        "kKillEaterEventType_Antimage_ThreeManManaVoids" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Antimage_ThreeManManaVoids),
                        "kKillEaterEventType_ArcWarden_TempestDoubleKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_ArcWarden_TempestDoubleKills),
                        "kKillEaterEventType_ArcWarden_SparkWraithKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_ArcWarden_SparkWraithKills),
                        "kKillEaterEventType_Bane_BrainSapKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Bane_BrainSapKills),
                        "kKillEaterEventType_Bane_FiendsGripKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Bane_FiendsGripKills),
                        "kKillEaterEventType_Batrider_TripleHeroFlamebreaks" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Batrider_TripleHeroFlamebreaks),
                        "kKillEaterEventType_Batrider_DoubleHeroLassoes" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Batrider_DoubleHeroLassoes),
                        "kKillEaterEventType_Brewmaster_KillsDuringPrimalSplit" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Brewmaster_KillsDuringPrimalSplit),
                        "kKillEaterEventType_Bristleback_KillsUnderFourQuillStacks" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Bristleback_KillsUnderFourQuillStacks),
                        "kKillEaterEventType_Bristleback_TripleHeroNasalGoo" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Bristleback_TripleHeroNasalGoo),
                        "kKillEaterEventType_Broodmother_SpiderlingHeroKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Broodmother_SpiderlingHeroKills),
                        "kKillEaterEventType_Broodmother_KillsInsideWeb" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Broodmother_KillsInsideWeb),
                        "kKillEaterEventType_Centaur_ThreeHeroStampede" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Centaur_ThreeHeroStampede),
                        "kKillEaterEventType_ChaosKnight_RealityRiftKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_ChaosKnight_RealityRiftKills),
                        "kKillEaterEventType_Chen_KillsWithPenitence" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Chen_KillsWithPenitence),
                        "kKillEaterEventType_CrystalMaiden_TwoHeroCrystalNovas" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_CrystalMaiden_TwoHeroCrystalNovas),
                        "kKillEaterEventType_CrystalMaiden_ThreeHeroFreezingFields" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_CrystalMaiden_ThreeHeroFreezingFields),
                        "kKillEaterEventType_Dazzle_ShadowWaveKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Dazzle_ShadowWaveKills),
                        "kKillEaterEventType_DeathProphet_SiphonKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DeathProphet_SiphonKills),
                        "kKillEaterEventType_DeathProphet_ExorcismKillsDuringEuls" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DeathProphet_ExorcismKillsDuringEuls),
                        "kKillEaterEventType_Disruptor_ThreeHeroKineticFieldStaticStorm" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Disruptor_ThreeHeroKineticFieldStaticStorm),
                        "kKillEaterEventType_Doom_InfernalBladeBurnKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Doom_InfernalBladeBurnKills),
                        "kKillEaterEventType_DrowRanger_PrecisionAuraCreepTowerKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DrowRanger_PrecisionAuraCreepTowerKills),
                        "kKillEaterEventType_EmberSpirit_RemnantKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_EmberSpirit_RemnantKills),
                        "kKillEaterEventType_EmberSpirit_SleightOfFistKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_EmberSpirit_SleightOfFistKills),
                        "kKillEaterEventType_Enigma_MidnightPulseBlackHoleCombos" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Enigma_MidnightPulseBlackHoleCombos),
                        "kKillEaterEventType_Enigma_ThreeManBlackHoles" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Enigma_ThreeManBlackHoles),
                        "kKillEaterEventType_FacelessVoid_MultiHeroTimeDilation" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_FacelessVoid_MultiHeroTimeDilation),
                        "kKillEaterEventType_Gyrocopter_ThreeHeroFlakCannon" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Gyrocopter_ThreeHeroFlakCannon),
                        "kKillEaterEventType_Gyrocopter_HomingMissileKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Gyrocopter_HomingMissileKills),
                        "kKillEaterEventType_Gyrocopter_RocketBarrageKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Gyrocopter_RocketBarrageKills),
                        "kKillEaterEventType_Huskar_KillsDuringLifeBreak" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Huskar_KillsDuringLifeBreak),
                        "kKillEaterEventType_Huskar_BurningSpearKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Huskar_BurningSpearKills),
                        "kKillEaterEventType_Invoker_MultiHeroIceWall" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Invoker_MultiHeroIceWall),
                        "kKillEaterEventType_Invoker_ThreeHeroEMP" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Invoker_ThreeHeroEMP),
                        "kKillEaterEventType_Invoker_ThreeHeroDeafeningBlast" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Invoker_ThreeHeroDeafeningBlast),
                        "kKillEaterEventType_Invoker_MultiHeroChaosMeteor" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Invoker_MultiHeroChaosMeteor),
                        "kKillEaterEventType_Jakiro_MultiHeroDualBreath" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Jakiro_MultiHeroDualBreath),
                        "kKillEaterEventType_Jakiro_IcePathMacropyreCombos" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Jakiro_IcePathMacropyreCombos),
                        "kKillEaterEventType_Leshrac_PulseNovaKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Leshrac_PulseNovaKills),
                        "kKillEaterEventType_Leshrac_ThreeHeroLightningStorm" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Leshrac_ThreeHeroLightningStorm),
                        "kKillEaterEventType_Lion_ThreeHeroFingerOfDeath" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lion_ThreeHeroFingerOfDeath),
                        "kKillEaterEventType_Meepo_PoofKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Meepo_PoofKills),
                        "kKillEaterEventType_Meepo_MultiHeroEarthbinds" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Meepo_MultiHeroEarthbinds),
                        "kKillEaterEventType_NightStalker_NighttimeKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_NightStalker_NighttimeKills),
                        "kKillEaterEventType_Morphling_KillsDuringReplicate" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Morphling_KillsDuringReplicate),
                        "kKillEaterEventType_OgreMagi_FireblastKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_OgreMagi_FireblastKills),
                        "kKillEaterEventType_OgreMagi_IgniteKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_OgreMagi_IgniteKills),
                        "kKillEaterEventType_DominatingKillStreaks" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DominatingKillStreaks),
                        "kKillEaterEventType_MegaKillStreaks" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_MegaKillStreaks),
                        "kKillEaterEventType_Alchemist_AghanimsGiven" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Alchemist_AghanimsGiven),
                        "kKillEaterEventType_VeilsLeadingToKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_VeilsLeadingToKills),
                        "kKillEaterEventType_DustLeadingToKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_DustLeadingToKills),
                        "kKillEaterEventType_WitchDoctor_MultiHeroCaskStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_WitchDoctor_MultiHeroCaskStuns),
                        "kKillEaterEventType_Weaver_ShukuchiKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Weaver_ShukuchiKills),
                        "kKillEaterEventType_Windrunner_ShackleFocusFireKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Windrunner_ShackleFocusFireKills),
                        "kKillEaterEventType_VengefulSpirit_VengeanceAuraIllusionKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_VengefulSpirit_VengeanceAuraIllusionKills),
                        "kKillEaterEventType_Tusk_WalrusPunchKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Tusk_WalrusPunchKills),
                        "kKillEaterEventType_Tinker_MultiHeroLasers" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Tinker_MultiHeroLasers),
                        "kKillEaterEventType_TemplarAssassin_MultiHeroPsiBlades" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_TemplarAssassin_MultiHeroPsiBlades),
                        "kKillEaterEventType_Sven_KillsDuringGodsStrength" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Sven_KillsDuringGodsStrength),
                        "kKillEaterEventType_Sniper_ThreeHeroShrapnels" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Sniper_ThreeHeroShrapnels),
                        "kKillEaterEventType_Slark_KillsDuringShadowDance" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Slark_KillsDuringShadowDance),
                        "kKillEaterEventType_ShadowShaman_MultiHeroEtherShocks" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_ShadowShaman_MultiHeroEtherShocks),
                        "kKillEaterEventType_ShadowShaman_SerpentWardShackleKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_ShadowShaman_SerpentWardShackleKills),
                        "kKillEaterEventType_Riki_ThreeHeroTricksOfTheTrade" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Riki_ThreeHeroTricksOfTheTrade),
                        "kKillEaterEventType_Razor_EyeOfTheStormKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Razor_EyeOfTheStormKills),
                        "kKillEaterEventType_Pugna_LifeDrainKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Pugna_LifeDrainKills),
                        "kKillEaterEventType_ObsidianDestroyer_SanitysEclipseKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_ObsidianDestroyer_SanitysEclipseKills),
                        "kKillEaterEventType_Oracle_MultiHeroFortunesEnd" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Oracle_MultiHeroFortunesEnd),
                        "kKillEaterEventType_Omniknight_PurificationKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Omniknight_PurificationKills),
                        "kKillEaterEventType_NightStalker_EnemyMissesUnderCripplingFear" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_NightStalker_EnemyMissesUnderCripplingFear),
                        "kKillEaterEventType_Warlock_ThreeHeroFatalBonds" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Warlock_ThreeHeroFatalBonds),
                        "kKillEaterEventType_Riki_TricksOfTheTradeKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Riki_TricksOfTheTradeKills),
                        "kKillEaterEventType_Earthshaker_AftershockHits10" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Earthshaker_AftershockHits10),
                        "kKillEaterEventType_Earthshaker_5HeroEchoslams" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Earthshaker_5HeroEchoslams),
                        "kKillEaterEventType_Lina_LagunaBladeHeroKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lina_LagunaBladeHeroKills),
                        "kKillEaterEventType_Lina_LightStrikeHeroStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Lina_LightStrikeHeroStuns),
                        "kKillEaterEventType_Earthshaker_FissureMultiStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Earthshaker_FissureMultiStuns),
                        "kKillEaterEventType_Earthshaker_TotemKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Earthshaker_TotemKills),
                        "kKillEaterEventType_Pangolier_SwashbuckleKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Pangolier_SwashbuckleKills),
                        "kKillEaterEventType_Furion_EnemyHeroesTrapped" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Furion_EnemyHeroesTrapped),
                        "kKillEaterEventType_Pangolier_HeartpiercerKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Pangolier_HeartpiercerKills),
                        "kKillEaterEventType_Medusa_MultiHeroStoneGaze" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Medusa_MultiHeroStoneGaze),
                        "kKillEaterEventType_Medusa_SplitShotKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Medusa_SplitShotKills),
                        "kKillEaterEventType_Mirana_MultiHeroStarstorm" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Mirana_MultiHeroStarstorm),
                        "kKillEaterEventType_Mirana_KillsFromMoonlightShadow" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Mirana_KillsFromMoonlightShadow),
                        "kKillEaterEventType_Magnus_MultiHeroSkewers" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Magnus_MultiHeroSkewers),
                        "kKillEaterEventType_Magnus_MultiHeroReversePolarity" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Magnus_MultiHeroReversePolarity),
                        "kKillEaterEventType_Magnus_HeroesSlowedWithShockwave" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Magnus_HeroesSlowedWithShockwave),
                        "kKillEaterEventType_NagaSiren_MultiHeroSong" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_NagaSiren_MultiHeroSong),
                        "kKillEaterEventType_NagaSiren_AlliesHealedBySong" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_NagaSiren_AlliesHealedBySong),
                        "kKillEaterEventType_LoneDruid_MultiHeroRoar" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_LoneDruid_MultiHeroRoar),
                        "kKillEaterEventType_LoneDruid_BattleCryKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_LoneDruid_BattleCryKills),
                        "kKillEaterEventType_WinterWyvern_ThreeHeroCurses" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_WinterWyvern_ThreeHeroCurses),
                        "kKillEaterEventType_Antimage_SpellsBlockedWithCounterspell" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Antimage_SpellsBlockedWithCounterspell),
                        "kKillEaterEventType_Mars_EnemiesKilledInArena" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Mars_EnemiesKilledInArena),
                        "kKillEaterEventType_Mars_MultiHeroGodsRebuke" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Mars_MultiHeroGodsRebuke),
                        "kKillEaterEventType_Mars_GodsRebukeKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Mars_GodsRebukeKills),
                        "kKillEaterEventType_Snapfire_LizardBlobsKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Snapfire_LizardBlobsKills),
                        "kKillEaterEventType_Snapfire_TwoHeroCookieStuns" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Snapfire_TwoHeroCookieStuns),
                        "Custom_KillStreak" => ::std::option::Option::Some(MvpAccoladeType::Custom_KillStreak),
                        "kKillEaterEventType_Muerta_DeadShotKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Muerta_DeadShotKills),
                        "kKillEaterEventType_Muerta_PierceTheVeilKills" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Muerta_PierceTheVeilKills),
                        "kKillEaterEventType_Muerta_MultiHeroDeadShot" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Muerta_MultiHeroDeadShot),
                        "kKillEaterEventType_Muerta_DeadShotsIntoTheCalling" => ::std::option::Option::Some(MvpAccoladeType::kKillEaterEventType_Muerta_DeadShotsIntoTheCalling),
                        _ => ::std::option::Option::None
                    }
                }

                const VALUES: &'static [MvpAccoladeType] = &[
                    MvpAccoladeType::kills,
                    MvpAccoladeType::deaths,
                    MvpAccoladeType::assists,
                    MvpAccoladeType::net_worth,
                    MvpAccoladeType::item_value,
                    MvpAccoladeType::support_gold_spent,
                    MvpAccoladeType::wards_placed,
                    MvpAccoladeType::dewards,
                    MvpAccoladeType::camps_stacked,
                    MvpAccoladeType::last_hits,
                    MvpAccoladeType::denies,
                    MvpAccoladeType::kKillEaterEvent_Killing_Sprees,
                    MvpAccoladeType::kKillEaterEvent_Godlike,
                    MvpAccoladeType::kKillEaterEvent_Towers_Destroyed,
                    MvpAccoladeType::kKillEaterEventType_Invoker_SunstrikeKills,
                    MvpAccoladeType::kKillEaterEventType_Axe_Culls,
                    MvpAccoladeType::kKillEaterEventType_Axe_BattleHungerKills,
                    MvpAccoladeType::kKillEaterEventType_LowHealthKills,
                    MvpAccoladeType::kKillEaterEventType_Invoker_TornadoKills,
                    MvpAccoladeType::kKillEaterEventType_Sven_DoubleStuns,
                    MvpAccoladeType::kKillEaterEventType_Sven_WarcryAssists,
                    MvpAccoladeType::kKillEaterEventType_Sven_CleaveDoubleKills,
                    MvpAccoladeType::kKillEaterEventType_Sven_TeleportInterrupts,
                    MvpAccoladeType::kKillEaterEventType_Faceless_MultiChrono,
                    MvpAccoladeType::kKillEaterEventType_Faceless_ChronoKills,
                    MvpAccoladeType::kKillEaterEventType_Ursa_MultiShocks,
                    MvpAccoladeType::kKillEaterEventType_RoshanKills,
                    MvpAccoladeType::kKillEaterEventType_Lion_FingerKills,
                    MvpAccoladeType::kKillEaterEventType_Riki_SmokedHeroKills,
                    MvpAccoladeType::kKillEaterEventType_HeroesRevealedWithDust,
                    MvpAccoladeType::kKillEaterEventType_SkeletonKing_ReincarnationKills,
                    MvpAccoladeType::kKillEaterEventType_Skywrath_FlareKills,
                    MvpAccoladeType::kKillEaterEventType_Leshrac_SplitEarthStuns,
                    MvpAccoladeType::kKillEaterEventType_Mirana_MaxStunArrows,
                    MvpAccoladeType::kKillEaterEventType_PhantomAssassin_CoupdeGraceCrits,
                    MvpAccoladeType::kKillEaterEventType_PhantomAssassin_DaggerCrits,
                    MvpAccoladeType::kKillEaterEventType_Meepo_Earthbinds,
                    MvpAccoladeType::kKillEaterEventType_Bloodseeker_RuptureKills,
                    MvpAccoladeType::kKillEaterEventType_Slark_LeashedEnemies,
                    MvpAccoladeType::kKillEaterEventType_Disruptor_FountainGlimpses,
                    MvpAccoladeType::kKillEaterEventType_Rubick_SpellsStolen,
                    MvpAccoladeType::kKillEaterEventType_Rubick_UltimatesStolen,
                    MvpAccoladeType::kKillEaterEventType_Doom_EnemiesDoomed,
                    MvpAccoladeType::kKillEaterEventType_Omniknight_Purifications,
                    MvpAccoladeType::kKillEaterEventType_Omniknight_AlliesRepelled,
                    MvpAccoladeType::kKillEaterEventType_Omniknight_EnemiesRepelled,
                    MvpAccoladeType::kKillEaterEventType_Warlock_FiveHeroFatalBonds,
                    MvpAccoladeType::kKillEaterEventType_CrystalMaiden_FrostbittenEnemies,
                    MvpAccoladeType::kKillEaterEventType_CrystalMaiden_CrystalNovas,
                    MvpAccoladeType::kKillEaterEventType_Kunkka_DoubleHeroTorrents,
                    MvpAccoladeType::kKillEaterEventType_Kunkka_TripleHeroGhostShips,
                    MvpAccoladeType::kKillEaterEventType_NagaSiren_EnemiesEnsnared,
                    MvpAccoladeType::kKillEaterEventType_NagaSiren_TripleHeroRipTides,
                    MvpAccoladeType::kKillEaterEventType_Lycan_KillsDuringShapeshift,
                    MvpAccoladeType::kKillEaterEventType_Pudge_DismemberKills,
                    MvpAccoladeType::kKillEaterEventType_Pudge_EnemyHeroesHooked,
                    MvpAccoladeType::kKillEaterEventType_Pudge_HookKills,
                    MvpAccoladeType::kKillEaterEventType_Pudge_UnseenEnemyHeroesHooked,
                    MvpAccoladeType::kKillEaterEventType_DrowRanger_EnemiesSilenced,
                    MvpAccoladeType::kKillEaterEventType_DrowRanger_MultiHeroSilences,
                    MvpAccoladeType::kKillEaterEventType_DrowRanger_SilencedKills,
                    MvpAccoladeType::kKillEaterEventType_DrowRanger_FrostArrowKills,
                    MvpAccoladeType::kKillEaterEventType_DragonKnight_KillsInDragonForm,
                    MvpAccoladeType::kKillEaterEventType_DragonKnight_BreatheFireKills,
                    MvpAccoladeType::kKillEaterEventType_DragonKnight_SplashKills,
                    MvpAccoladeType::kKillEaterEventType_WitchDoctor_CaskStuns,
                    MvpAccoladeType::kKillEaterEventType_WitchDoctor_MaledictKills,
                    MvpAccoladeType::kKillEaterEventType_WitchDoctor_MultiHeroMaledicts,
                    MvpAccoladeType::kKillEaterEventType_WitchDoctor_DeathWardKills,
                    MvpAccoladeType::kKillEaterEventType_Disruptor_ThunderStrikeKills,
                    MvpAccoladeType::kKillEaterEventType_Disruptor_HeroesGlimpsed,
                    MvpAccoladeType::kKillEaterEventType_CrystalMaiden_FreezingFieldKills,
                    MvpAccoladeType::kKillEaterEventType_Medusa_EnemiesPetrified,
                    MvpAccoladeType::kKillEaterEventType_Warlock_FatalBondsKills,
                    MvpAccoladeType::kKillEaterEventType_Warlock_GolemKills,
                    MvpAccoladeType::kKillEaterEventType_Tusk_WalrusPunches,
                    MvpAccoladeType::kKillEaterEventType_Tusk_SnowballStuns,
                    MvpAccoladeType::kKillEaterEventType_Earthshaker_FissureStuns,
                    MvpAccoladeType::kKillEaterEventType_Earthshaker_3HeroEchoslams,
                    MvpAccoladeType::kKillEaterEventType_SandKing_BurrowstrikeStuns,
                    MvpAccoladeType::kKillEaterEventType_SandKing_EpicenterKills,
                    MvpAccoladeType::kKillEaterEventType_SkywrathMage_AncientSealKills,
                    MvpAccoladeType::kKillEaterEventType_SkywrathMage_ConcussiveShotKills,
                    MvpAccoladeType::kKillEaterEventType_Luna_LucentBeamKills,
                    MvpAccoladeType::kKillEaterEventType_Luna_EclipseKills,
                    MvpAccoladeType::kKillEaterEventType_KeeperOfTheLight_IlluminateKills,
                    MvpAccoladeType::kKillEaterEventType_KeeperOfTheLight_ManaLeakStuns,
                    MvpAccoladeType::kKillEaterEventType_KeeperOfTheLight_TeammatesRecalled,
                    MvpAccoladeType::kKillEaterEventType_LegionCommander_DuelsWon,
                    MvpAccoladeType::kKillEaterEventType_Beastmaster_RoarKills,
                    MvpAccoladeType::kKillEaterEventType_Beastmaster_RoarMultiKills,
                    MvpAccoladeType::kKillEaterEventType_Windrunner_FocusFireBuildings,
                    MvpAccoladeType::kKillEaterEventType_Windrunner_PowershotKills,
                    MvpAccoladeType::kKillEaterEventType_PhantomAssassin_DaggerLastHits,
                    MvpAccoladeType::kKillEaterEventType_PhantomAssassin_PhantomStrikeKills,
                    MvpAccoladeType::kKillEaterEventType_DeathProphet_CryptSwarmKills,
                    MvpAccoladeType::kKillEaterEventType_DeathProphet_ExorcismBuildingKills,
                    MvpAccoladeType::kKillEaterEventType_DeathProphet_ExorcismSpiritsSummoned,
                    MvpAccoladeType::kKillEaterEventType_DeathProphet_MultiHeroSilences,
                    MvpAccoladeType::kKillEaterEventType_Abaddon_MistCoilKills,
                    MvpAccoladeType::kKillEaterEventType_Abaddon_MistCoilHealed,
                    MvpAccoladeType::kKillEaterEventType_Abaddon_AphoticShieldKills,
                    MvpAccoladeType::kKillEaterEventType_Lich_ChainFrostTripleKills,
                    MvpAccoladeType::kKillEaterEventType_Lich_ChainFrostMultiKills,
                    MvpAccoladeType::kKillEaterEventType_Lich_ChainFrostBounces,
                    MvpAccoladeType::kKillEaterEventType_Ursa_EnragedKills,
                    MvpAccoladeType::kKillEaterEventType_Ursa_EarthshockKills,
                    MvpAccoladeType::kKillEaterEventType_Lina_LagunaBladeKills,
                    MvpAccoladeType::kKillEaterEventType_Lina_DragonSlaveKills,
                    MvpAccoladeType::kKillEaterEventType_Lina_LightStrikeArrayStuns,
                    MvpAccoladeType::kKillEaterEvent_Barracks_Destroyed,
                    MvpAccoladeType::kKillEaterEvent_TemplarAssassin_MeldKills,
                    MvpAccoladeType::kKillEaterEvent_TemplarAssassin_HeroesSlowed,
                    MvpAccoladeType::kKillEaterEvent_Sniper_AssassinationKills,
                    MvpAccoladeType::kKillEaterEvent_Sniper_HeadshotStuns,
                    MvpAccoladeType::kKillEaterEvent_EarthSpirit_SmashStuns,
                    MvpAccoladeType::kKillEaterEvent_EarthSpirit_GripSilences,
                    MvpAccoladeType::kKillEaterEvent_ShadowShaman_ShackleKills,
                    MvpAccoladeType::kKillEaterEvent_ShadowShaman_HexKills,
                    MvpAccoladeType::kKillEaterEvent_Centaur_EnemiesStomped,
                    MvpAccoladeType::kKillEaterEvent_Centaur_DoubleEdgeKills,
                    MvpAccoladeType::kKillEaterEvent_Centaur_ReturnKills,
                    MvpAccoladeType::kKillEaterEvent_EmberSpirit_EnemiesChained,
                    MvpAccoladeType::kKillEaterEvent_EmberSpirit_SleightOfFistMultiKills,
                    MvpAccoladeType::kKillEaterEvent_Puck_OrbKills,
                    MvpAccoladeType::kKillEaterEvent_VengefulSpirit_EnemiesStunned,
                    MvpAccoladeType::kKillEaterEvent_Lifestealer_RageKills,
                    MvpAccoladeType::kKillEaterEvent_Lifestealer_OpenWoundsKills,
                    MvpAccoladeType::kKillEaterEvent_Lifestealer_InfestKills,
                    MvpAccoladeType::kKillEaterEvent_ElderTitan_SpiritKills,
                    MvpAccoladeType::kKillEaterEvent_ElderTitan_GoodStomps,
                    MvpAccoladeType::kKillEaterEvent_Clockwerk_RocketKills,
                    MvpAccoladeType::kKillEaterEvent_Clockwerk_BlindRocketKills,
                    MvpAccoladeType::kKillEaterEvent_StormSpirit_BallKills,
                    MvpAccoladeType::kKillEaterEvent_StormSpirit_DoubleRemnantKills,
                    MvpAccoladeType::kKillEaterEvent_StormSpirit_VortexKills,
                    MvpAccoladeType::kKillEaterEvent_Tinker_DoubleMissileKills,
                    MvpAccoladeType::kKillEaterEvent_Tinker_LaserKills,
                    MvpAccoladeType::kKillEaterEvent_Techies_SuicideKills,
                    MvpAccoladeType::kKillEaterEvent_Techies_LandMineKills,
                    MvpAccoladeType::kKillEaterEvent_Techies_StatisTrapStuns,
                    MvpAccoladeType::kKillEaterEvent_Techies_RemoteMineKills,
                    MvpAccoladeType::kKillEaterEvent_ShadowFiend_TripleRazeKills,
                    MvpAccoladeType::kKillEaterEvent_ShadowFiend_RequiemMultiKills,
                    MvpAccoladeType::kKillEaterEvent_ShadowFiend_QRazeKills,
                    MvpAccoladeType::kKillEaterEvent_ShadowFiend_WRazeKills,
                    MvpAccoladeType::kKillEaterEvent_ShadowFiend_ERazeKills,
                    MvpAccoladeType::kKillEaterEvent_Oracle_FatesEdictKills,
                    MvpAccoladeType::kKillEaterEvent_Oracle_FalsePromiseSaves,
                    MvpAccoladeType::kKillEaterEvent_Juggernaut_OmnislashKills,
                    MvpAccoladeType::kKillEaterEventType_SkeletonKing_SkeletonHeroKills,
                    MvpAccoladeType::kKillEaterEventType_DarkWillow_CursedCrownTripleStuns,
                    MvpAccoladeType::kKillEaterEventType_Dazzle_ShallowGraveSaves,
                    MvpAccoladeType::kKillEaterEventType_Dazzle_PoisonTouchKills,
                    MvpAccoladeType::kKillEaterEventType_ThreeManMeks,
                    MvpAccoladeType::kKillEaterEventType_Viper_PoisonAttackKills,
                    MvpAccoladeType::kKillEaterEventType_Viper_CorrosiveSkinKills,
                    MvpAccoladeType::kKillEaterEventType_ThreeHeroVeils,
                    MvpAccoladeType::kKillEaterEventType_Viper_KillsDuringViperStrike,
                    MvpAccoladeType::kKillEaterEventType_SolarCrestKills,
                    MvpAccoladeType::kKillEaterEventType_Tiny_TreeThrowKills,
                    MvpAccoladeType::kKillEaterEventType_Riki_BackstabKills,
                    MvpAccoladeType::kKillEaterEventType_Phoenix_ThreeHeroSupernovaStuns,
                    MvpAccoladeType::kKillEaterEventType_Terrorblade_MetamorphosisKills,
                    MvpAccoladeType::kKillEaterEventType_Lion_GreatFingerKills,
                    MvpAccoladeType::kKillEaterEventType_Antimage_SpellsBlockedWithAghanims,
                    MvpAccoladeType::kKillEaterEventType_Antimage_ThreeManManaVoids,
                    MvpAccoladeType::kKillEaterEventType_ArcWarden_TempestDoubleKills,
                    MvpAccoladeType::kKillEaterEventType_ArcWarden_SparkWraithKills,
                    MvpAccoladeType::kKillEaterEventType_Bane_BrainSapKills,
                    MvpAccoladeType::kKillEaterEventType_Bane_FiendsGripKills,
                    MvpAccoladeType::kKillEaterEventType_Batrider_TripleHeroFlamebreaks,
                    MvpAccoladeType::kKillEaterEventType_Batrider_DoubleHeroLassoes,
                    MvpAccoladeType::kKillEaterEventType_Brewmaster_KillsDuringPrimalSplit,
                    MvpAccoladeType::kKillEaterEventType_Bristleback_KillsUnderFourQuillStacks,
                    MvpAccoladeType::kKillEaterEventType_Bristleback_TripleHeroNasalGoo,
                    MvpAccoladeType::kKillEaterEventType_Broodmother_SpiderlingHeroKills,
                    MvpAccoladeType::kKillEaterEventType_Broodmother_KillsInsideWeb,
                    MvpAccoladeType::kKillEaterEventType_Centaur_ThreeHeroStampede,
                    MvpAccoladeType::kKillEaterEventType_ChaosKnight_RealityRiftKills,
                    MvpAccoladeType::kKillEaterEventType_Chen_KillsWithPenitence,
                    MvpAccoladeType::kKillEaterEventType_CrystalMaiden_TwoHeroCrystalNovas,
                    MvpAccoladeType::kKillEaterEventType_CrystalMaiden_ThreeHeroFreezingFields,
                    MvpAccoladeType::kKillEaterEventType_Dazzle_ShadowWaveKills,
                    MvpAccoladeType::kKillEaterEventType_DeathProphet_SiphonKills,
                    MvpAccoladeType::kKillEaterEventType_DeathProphet_ExorcismKillsDuringEuls,
                    MvpAccoladeType::kKillEaterEventType_Disruptor_ThreeHeroKineticFieldStaticStorm,
                    MvpAccoladeType::kKillEaterEventType_Doom_InfernalBladeBurnKills,
                    MvpAccoladeType::kKillEaterEventType_DrowRanger_PrecisionAuraCreepTowerKills,
                    MvpAccoladeType::kKillEaterEventType_EmberSpirit_RemnantKills,
                    MvpAccoladeType::kKillEaterEventType_EmberSpirit_SleightOfFistKills,
                    MvpAccoladeType::kKillEaterEventType_Enigma_MidnightPulseBlackHoleCombos,
                    MvpAccoladeType::kKillEaterEventType_Enigma_ThreeManBlackHoles,
                    MvpAccoladeType::kKillEaterEventType_FacelessVoid_MultiHeroTimeDilation,
                    MvpAccoladeType::kKillEaterEventType_Gyrocopter_ThreeHeroFlakCannon,
                    MvpAccoladeType::kKillEaterEventType_Gyrocopter_HomingMissileKills,
                    MvpAccoladeType::kKillEaterEventType_Gyrocopter_RocketBarrageKills,
                    MvpAccoladeType::kKillEaterEventType_Huskar_KillsDuringLifeBreak,
                    MvpAccoladeType::kKillEaterEventType_Huskar_BurningSpearKills,
                    MvpAccoladeType::kKillEaterEventType_Invoker_MultiHeroIceWall,
                    MvpAccoladeType::kKillEaterEventType_Invoker_ThreeHeroEMP,
                    MvpAccoladeType::kKillEaterEventType_Invoker_ThreeHeroDeafeningBlast,
                    MvpAccoladeType::kKillEaterEventType_Invoker_MultiHeroChaosMeteor,
                    MvpAccoladeType::kKillEaterEventType_Jakiro_MultiHeroDualBreath,
                    MvpAccoladeType::kKillEaterEventType_Jakiro_IcePathMacropyreCombos,
                    MvpAccoladeType::kKillEaterEventType_Leshrac_PulseNovaKills,
                    MvpAccoladeType::kKillEaterEventType_Leshrac_ThreeHeroLightningStorm,
                    MvpAccoladeType::kKillEaterEventType_Lion_ThreeHeroFingerOfDeath,
                    MvpAccoladeType::kKillEaterEventType_Meepo_PoofKills,
                    MvpAccoladeType::kKillEaterEventType_Meepo_MultiHeroEarthbinds,
                    MvpAccoladeType::kKillEaterEventType_NightStalker_NighttimeKills,
                    MvpAccoladeType::kKillEaterEventType_Morphling_KillsDuringReplicate,
                    MvpAccoladeType::kKillEaterEventType_OgreMagi_FireblastKills,
                    MvpAccoladeType::kKillEaterEventType_OgreMagi_IgniteKills,
                    MvpAccoladeType::kKillEaterEventType_DominatingKillStreaks,
                    MvpAccoladeType::kKillEaterEventType_MegaKillStreaks,
                    MvpAccoladeType::kKillEaterEventType_Alchemist_AghanimsGiven,
                    MvpAccoladeType::kKillEaterEventType_VeilsLeadingToKills,
                    MvpAccoladeType::kKillEaterEventType_DustLeadingToKills,
                    MvpAccoladeType::kKillEaterEventType_WitchDoctor_MultiHeroCaskStuns,
                    MvpAccoladeType::kKillEaterEventType_Weaver_ShukuchiKills,
                    MvpAccoladeType::kKillEaterEventType_Windrunner_ShackleFocusFireKills,
                    MvpAccoladeType::kKillEaterEventType_VengefulSpirit_VengeanceAuraIllusionKills,
                    MvpAccoladeType::kKillEaterEventType_Tusk_WalrusPunchKills,
                    MvpAccoladeType::kKillEaterEventType_Tinker_MultiHeroLasers,
                    MvpAccoladeType::kKillEaterEventType_TemplarAssassin_MultiHeroPsiBlades,
                    MvpAccoladeType::kKillEaterEventType_Sven_KillsDuringGodsStrength,
                    MvpAccoladeType::kKillEaterEventType_Sniper_ThreeHeroShrapnels,
                    MvpAccoladeType::kKillEaterEventType_Slark_KillsDuringShadowDance,
                    MvpAccoladeType::kKillEaterEventType_ShadowShaman_MultiHeroEtherShocks,
                    MvpAccoladeType::kKillEaterEventType_ShadowShaman_SerpentWardShackleKills,
                    MvpAccoladeType::kKillEaterEventType_Riki_ThreeHeroTricksOfTheTrade,
                    MvpAccoladeType::kKillEaterEventType_Razor_EyeOfTheStormKills,
                    MvpAccoladeType::kKillEaterEventType_Pugna_LifeDrainKills,
                    MvpAccoladeType::kKillEaterEventType_ObsidianDestroyer_SanitysEclipseKills,
                    MvpAccoladeType::kKillEaterEventType_Oracle_MultiHeroFortunesEnd,
                    MvpAccoladeType::kKillEaterEventType_Omniknight_PurificationKills,
                    MvpAccoladeType::kKillEaterEventType_NightStalker_EnemyMissesUnderCripplingFear,
                    MvpAccoladeType::kKillEaterEventType_Warlock_ThreeHeroFatalBonds,
                    MvpAccoladeType::kKillEaterEventType_Riki_TricksOfTheTradeKills,
                    MvpAccoladeType::kKillEaterEventType_Earthshaker_AftershockHits10,
                    MvpAccoladeType::kKillEaterEventType_Earthshaker_5HeroEchoslams,
                    MvpAccoladeType::kKillEaterEventType_Lina_LagunaBladeHeroKills,
                    MvpAccoladeType::kKillEaterEventType_Lina_LightStrikeHeroStuns,
                    MvpAccoladeType::kKillEaterEventType_Earthshaker_FissureMultiStuns,
                    MvpAccoladeType::kKillEaterEventType_Earthshaker_TotemKills,
                    MvpAccoladeType::kKillEaterEventType_Pangolier_SwashbuckleKills,
                    MvpAccoladeType::kKillEaterEventType_Furion_EnemyHeroesTrapped,
                    MvpAccoladeType::kKillEaterEventType_Pangolier_HeartpiercerKills,
                    MvpAccoladeType::kKillEaterEventType_Medusa_MultiHeroStoneGaze,
                    MvpAccoladeType::kKillEaterEventType_Medusa_SplitShotKills,
                    MvpAccoladeType::kKillEaterEventType_Mirana_MultiHeroStarstorm,
                    MvpAccoladeType::kKillEaterEventType_Mirana_KillsFromMoonlightShadow,
                    MvpAccoladeType::kKillEaterEventType_Magnus_MultiHeroSkewers,
                    MvpAccoladeType::kKillEaterEventType_Magnus_MultiHeroReversePolarity,
                    MvpAccoladeType::kKillEaterEventType_Magnus_HeroesSlowedWithShockwave,
                    MvpAccoladeType::kKillEaterEventType_NagaSiren_MultiHeroSong,
                    MvpAccoladeType::kKillEaterEventType_NagaSiren_AlliesHealedBySong,
                    MvpAccoladeType::kKillEaterEventType_LoneDruid_MultiHeroRoar,
                    MvpAccoladeType::kKillEaterEventType_LoneDruid_BattleCryKills,
                    MvpAccoladeType::kKillEaterEventType_WinterWyvern_ThreeHeroCurses,
                    MvpAccoladeType::kKillEaterEventType_Antimage_SpellsBlockedWithCounterspell,
                    MvpAccoladeType::kKillEaterEventType_Mars_EnemiesKilledInArena,
                    MvpAccoladeType::kKillEaterEventType_Mars_MultiHeroGodsRebuke,
                    MvpAccoladeType::kKillEaterEventType_Mars_GodsRebukeKills,
                    MvpAccoladeType::kKillEaterEventType_Snapfire_LizardBlobsKills,
                    MvpAccoladeType::kKillEaterEventType_Snapfire_TwoHeroCookieStuns,
                    MvpAccoladeType::Custom_KillStreak,
                    MvpAccoladeType::kKillEaterEventType_Muerta_DeadShotKills,
                    MvpAccoladeType::kKillEaterEventType_Muerta_PierceTheVeilKills,
                    MvpAccoladeType::kKillEaterEventType_Muerta_MultiHeroDeadShot,
                    MvpAccoladeType::kKillEaterEventType_Muerta_DeadShotsIntoTheCalling,
                ];
            }

            // Note, `Default` is implemented although default value is not 0
            impl ::std::default::Default for MvpAccoladeType {
                fn default() -> Self {
                    MvpAccoladeType::kills
                }
            }

        }
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ELaneSelection)
pub enum ELaneSelection {
    // @@protoc_insertion_point(enum_value:ELaneSelection.k_ELaneSelection_SAFELANE)
    k_ELaneSelection_SAFELANE = 0,
    // @@protoc_insertion_point(enum_value:ELaneSelection.k_ELaneSelection_OFFLANE)
    k_ELaneSelection_OFFLANE = 1,
    // @@protoc_insertion_point(enum_value:ELaneSelection.k_ELaneSelection_MIDLANE)
    k_ELaneSelection_MIDLANE = 2,
    // @@protoc_insertion_point(enum_value:ELaneSelection.k_ELaneSelection_SUPPORT)
    k_ELaneSelection_SUPPORT = 3,
    // @@protoc_insertion_point(enum_value:ELaneSelection.k_ELaneSelection_HARDSUPPORT)
    k_ELaneSelection_HARDSUPPORT = 4,
}

impl ::steam_vent_proto_common::protobuf::Enum for ELaneSelection {
    const NAME: &'static str = "ELaneSelection";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ELaneSelection> {
        match value {
            0 => ::std::option::Option::Some(ELaneSelection::k_ELaneSelection_SAFELANE),
            1 => ::std::option::Option::Some(ELaneSelection::k_ELaneSelection_OFFLANE),
            2 => ::std::option::Option::Some(ELaneSelection::k_ELaneSelection_MIDLANE),
            3 => ::std::option::Option::Some(ELaneSelection::k_ELaneSelection_SUPPORT),
            4 => ::std::option::Option::Some(ELaneSelection::k_ELaneSelection_HARDSUPPORT),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ELaneSelection> {
        match str {
            "k_ELaneSelection_SAFELANE" => ::std::option::Option::Some(ELaneSelection::k_ELaneSelection_SAFELANE),
            "k_ELaneSelection_OFFLANE" => ::std::option::Option::Some(ELaneSelection::k_ELaneSelection_OFFLANE),
            "k_ELaneSelection_MIDLANE" => ::std::option::Option::Some(ELaneSelection::k_ELaneSelection_MIDLANE),
            "k_ELaneSelection_SUPPORT" => ::std::option::Option::Some(ELaneSelection::k_ELaneSelection_SUPPORT),
            "k_ELaneSelection_HARDSUPPORT" => ::std::option::Option::Some(ELaneSelection::k_ELaneSelection_HARDSUPPORT),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ELaneSelection] = &[
        ELaneSelection::k_ELaneSelection_SAFELANE,
        ELaneSelection::k_ELaneSelection_OFFLANE,
        ELaneSelection::k_ELaneSelection_MIDLANE,
        ELaneSelection::k_ELaneSelection_SUPPORT,
        ELaneSelection::k_ELaneSelection_HARDSUPPORT,
    ];
}

impl ::std::default::Default for ELaneSelection {
    fn default() -> Self {
        ELaneSelection::k_ELaneSelection_SAFELANE
    }
}


#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ELaneSelectionFlags)
pub enum ELaneSelectionFlags {
    // @@protoc_insertion_point(enum_value:ELaneSelectionFlags.k_ELaneSelectionFlags_SAFELANE)
    k_ELaneSelectionFlags_SAFELANE = 1,
    // @@protoc_insertion_point(enum_value:ELaneSelectionFlags.k_ELaneSelectionFlags_OFFLANE)
    k_ELaneSelectionFlags_OFFLANE = 2,
    // @@protoc_insertion_point(enum_value:ELaneSelectionFlags.k_ELaneSelectionFlags_MIDLANE)
    k_ELaneSelectionFlags_MIDLANE = 4,
    // @@protoc_insertion_point(enum_value:ELaneSelectionFlags.k_ELaneSelectionFlags_SUPPORT)
    k_ELaneSelectionFlags_SUPPORT = 8,
    // @@protoc_insertion_point(enum_value:ELaneSelectionFlags.k_ELaneSelectionFlags_HARDSUPPORT)
    k_ELaneSelectionFlags_HARDSUPPORT = 16,
    // @@protoc_insertion_point(enum_value:ELaneSelectionFlags.k_ELaneSelectionFlagGroup_None)
    k_ELaneSelectionFlagGroup_None = 0,
    // @@protoc_insertion_point(enum_value:ELaneSelectionFlags.k_ELaneSelectionFlagGroup_CORE)
    k_ELaneSelectionFlagGroup_CORE = 7,
    // @@protoc_insertion_point(enum_value:ELaneSelectionFlags.k_ELaneSelectionFlagGroup_SUPPORT)
    k_ELaneSelectionFlagGroup_SUPPORT = 24,
    // @@protoc_insertion_point(enum_value:ELaneSelectionFlags.k_ELaneSelectionFlagGroup_ALL)
    k_ELaneSelectionFlagGroup_ALL = 31,
}

impl ::steam_vent_proto_common::protobuf::Enum for ELaneSelectionFlags {
    const NAME: &'static str = "ELaneSelectionFlags";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ELaneSelectionFlags> {
        match value {
            1 => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlags_SAFELANE),
            2 => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlags_OFFLANE),
            4 => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlags_MIDLANE),
            8 => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlags_SUPPORT),
            16 => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlags_HARDSUPPORT),
            0 => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlagGroup_None),
            7 => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlagGroup_CORE),
            24 => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlagGroup_SUPPORT),
            31 => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlagGroup_ALL),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ELaneSelectionFlags> {
        match str {
            "k_ELaneSelectionFlags_SAFELANE" => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlags_SAFELANE),
            "k_ELaneSelectionFlags_OFFLANE" => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlags_OFFLANE),
            "k_ELaneSelectionFlags_MIDLANE" => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlags_MIDLANE),
            "k_ELaneSelectionFlags_SUPPORT" => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlags_SUPPORT),
            "k_ELaneSelectionFlags_HARDSUPPORT" => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlags_HARDSUPPORT),
            "k_ELaneSelectionFlagGroup_None" => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlagGroup_None),
            "k_ELaneSelectionFlagGroup_CORE" => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlagGroup_CORE),
            "k_ELaneSelectionFlagGroup_SUPPORT" => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlagGroup_SUPPORT),
            "k_ELaneSelectionFlagGroup_ALL" => ::std::option::Option::Some(ELaneSelectionFlags::k_ELaneSelectionFlagGroup_ALL),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ELaneSelectionFlags] = &[
        ELaneSelectionFlags::k_ELaneSelectionFlags_SAFELANE,
        ELaneSelectionFlags::k_ELaneSelectionFlags_OFFLANE,
        ELaneSelectionFlags::k_ELaneSelectionFlags_MIDLANE,
        ELaneSelectionFlags::k_ELaneSelectionFlags_SUPPORT,
        ELaneSelectionFlags::k_ELaneSelectionFlags_HARDSUPPORT,
        ELaneSelectionFlags::k_ELaneSelectionFlagGroup_None,
        ELaneSelectionFlags::k_ELaneSelectionFlagGroup_CORE,
        ELaneSelectionFlags::k_ELaneSelectionFlagGroup_SUPPORT,
        ELaneSelectionFlags::k_ELaneSelectionFlagGroup_ALL,
    ];
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for ELaneSelectionFlags {
    fn default() -> Self {
        ELaneSelectionFlags::k_ELaneSelectionFlags_SAFELANE
    }
}


#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EPartyMatchmakingFlags)
pub enum EPartyMatchmakingFlags {
    // @@protoc_insertion_point(enum_value:EPartyMatchmakingFlags.k_EPartyMatchmakingFlags_None)
    k_EPartyMatchmakingFlags_None = 0,
    // @@protoc_insertion_point(enum_value:EPartyMatchmakingFlags.k_EPartyMatchmakingFlags_LargeRankSpread)
    k_EPartyMatchmakingFlags_LargeRankSpread = 1,
}

impl ::steam_vent_proto_common::protobuf::Enum for EPartyMatchmakingFlags {
    const NAME: &'static str = "EPartyMatchmakingFlags";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EPartyMatchmakingFlags> {
        match value {
            0 => ::std::option::Option::Some(EPartyMatchmakingFlags::k_EPartyMatchmakingFlags_None),
            1 => ::std::option::Option::Some(EPartyMatchmakingFlags::k_EPartyMatchmakingFlags_LargeRankSpread),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EPartyMatchmakingFlags> {
        match str {
            "k_EPartyMatchmakingFlags_None" => ::std::option::Option::Some(EPartyMatchmakingFlags::k_EPartyMatchmakingFlags_None),
            "k_EPartyMatchmakingFlags_LargeRankSpread" => ::std::option::Option::Some(EPartyMatchmakingFlags::k_EPartyMatchmakingFlags_LargeRankSpread),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EPartyMatchmakingFlags] = &[
        EPartyMatchmakingFlags::k_EPartyMatchmakingFlags_None,
        EPartyMatchmakingFlags::k_EPartyMatchmakingFlags_LargeRankSpread,
    ];
}

impl ::std::default::Default for EPartyMatchmakingFlags {
    fn default() -> Self {
        EPartyMatchmakingFlags::k_EPartyMatchmakingFlags_None
    }
}


#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EHighPriorityMMState)
pub enum EHighPriorityMMState {
    // @@protoc_insertion_point(enum_value:EHighPriorityMMState.k_EHighPriorityMM_Unknown)
    k_EHighPriorityMM_Unknown = 0,
    // @@protoc_insertion_point(enum_value:EHighPriorityMMState.k_EHighPriorityMM_MissingMMData)
    k_EHighPriorityMM_MissingMMData = 1,
    // @@protoc_insertion_point(enum_value:EHighPriorityMMState.k_EHighPriorityMM_ResourceMissing)
    k_EHighPriorityMM_ResourceMissing = 2,
    // @@protoc_insertion_point(enum_value:EHighPriorityMMState.k_EHighPriorityMM_ManuallyDisabled)
    k_EHighPriorityMM_ManuallyDisabled = 3,
    // @@protoc_insertion_point(enum_value:EHighPriorityMMState.k_EHighPriorityMM_Min_Enabled)
    k_EHighPriorityMM_Min_Enabled = 64,
    // @@protoc_insertion_point(enum_value:EHighPriorityMMState.k_EHighPriorityMM_AllRolesSelected)
    k_EHighPriorityMM_AllRolesSelected = 65,
    // @@protoc_insertion_point(enum_value:EHighPriorityMMState.k_EHighPriorityMM_UsingResource)
    k_EHighPriorityMM_UsingResource = 66,
    // @@protoc_insertion_point(enum_value:EHighPriorityMMState.k_EHighPriorityMM_FiveStack)
    k_EHighPriorityMM_FiveStack = 67,
    // @@protoc_insertion_point(enum_value:EHighPriorityMMState.k_EHighPriorityMM_HighDemand)
    k_EHighPriorityMM_HighDemand = 68,
}

impl ::steam_vent_proto_common::protobuf::Enum for EHighPriorityMMState {
    const NAME: &'static str = "EHighPriorityMMState";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EHighPriorityMMState> {
        match value {
            0 => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_Unknown),
            1 => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_MissingMMData),
            2 => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_ResourceMissing),
            3 => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_ManuallyDisabled),
            64 => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_Min_Enabled),
            65 => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_AllRolesSelected),
            66 => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_UsingResource),
            67 => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_FiveStack),
            68 => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_HighDemand),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EHighPriorityMMState> {
        match str {
            "k_EHighPriorityMM_Unknown" => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_Unknown),
            "k_EHighPriorityMM_MissingMMData" => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_MissingMMData),
            "k_EHighPriorityMM_ResourceMissing" => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_ResourceMissing),
            "k_EHighPriorityMM_ManuallyDisabled" => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_ManuallyDisabled),
            "k_EHighPriorityMM_Min_Enabled" => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_Min_Enabled),
            "k_EHighPriorityMM_AllRolesSelected" => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_AllRolesSelected),
            "k_EHighPriorityMM_UsingResource" => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_UsingResource),
            "k_EHighPriorityMM_FiveStack" => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_FiveStack),
            "k_EHighPriorityMM_HighDemand" => ::std::option::Option::Some(EHighPriorityMMState::k_EHighPriorityMM_HighDemand),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EHighPriorityMMState] = &[
        EHighPriorityMMState::k_EHighPriorityMM_Unknown,
        EHighPriorityMMState::k_EHighPriorityMM_MissingMMData,
        EHighPriorityMMState::k_EHighPriorityMM_ResourceMissing,
        EHighPriorityMMState::k_EHighPriorityMM_ManuallyDisabled,
        EHighPriorityMMState::k_EHighPriorityMM_Min_Enabled,
        EHighPriorityMMState::k_EHighPriorityMM_AllRolesSelected,
        EHighPriorityMMState::k_EHighPriorityMM_UsingResource,
        EHighPriorityMMState::k_EHighPriorityMM_FiveStack,
        EHighPriorityMMState::k_EHighPriorityMM_HighDemand,
    ];
}

impl ::std::default::Default for EHighPriorityMMState {
    fn default() -> Self {
        EHighPriorityMMState::k_EHighPriorityMM_Unknown
    }
}


#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EReadyCheckStatus)
pub enum EReadyCheckStatus {
    // @@protoc_insertion_point(enum_value:EReadyCheckStatus.k_EReadyCheckStatus_Unknown)
    k_EReadyCheckStatus_Unknown = 0,
    // @@protoc_insertion_point(enum_value:EReadyCheckStatus.k_EReadyCheckStatus_NotReady)
    k_EReadyCheckStatus_NotReady = 1,
    // @@protoc_insertion_point(enum_value:EReadyCheckStatus.k_EReadyCheckStatus_Ready)
    k_EReadyCheckStatus_Ready = 2,
}

impl ::steam_vent_proto_common::protobuf::Enum for EReadyCheckStatus {
    const NAME: &'static str = "EReadyCheckStatus";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EReadyCheckStatus> {
        match value {
            0 => ::std::option::Option::Some(EReadyCheckStatus::k_EReadyCheckStatus_Unknown),
            1 => ::std::option::Option::Some(EReadyCheckStatus::k_EReadyCheckStatus_NotReady),
            2 => ::std::option::Option::Some(EReadyCheckStatus::k_EReadyCheckStatus_Ready),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EReadyCheckStatus> {
        match str {
            "k_EReadyCheckStatus_Unknown" => ::std::option::Option::Some(EReadyCheckStatus::k_EReadyCheckStatus_Unknown),
            "k_EReadyCheckStatus_NotReady" => ::std::option::Option::Some(EReadyCheckStatus::k_EReadyCheckStatus_NotReady),
            "k_EReadyCheckStatus_Ready" => ::std::option::Option::Some(EReadyCheckStatus::k_EReadyCheckStatus_Ready),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EReadyCheckStatus] = &[
        EReadyCheckStatus::k_EReadyCheckStatus_Unknown,
        EReadyCheckStatus::k_EReadyCheckStatus_NotReady,
        EReadyCheckStatus::k_EReadyCheckStatus_Ready,
    ];
}

impl ::std::default::Default for EReadyCheckStatus {
    fn default() -> Self {
        EReadyCheckStatus::k_EReadyCheckStatus_Unknown
    }
}


#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EReadyCheckRequestResult)
pub enum EReadyCheckRequestResult {
    // @@protoc_insertion_point(enum_value:EReadyCheckRequestResult.k_EReadyCheckRequestResult_Success)
    k_EReadyCheckRequestResult_Success = 0,
    // @@protoc_insertion_point(enum_value:EReadyCheckRequestResult.k_EReadyCheckRequestResult_AlreadyInProgress)
    k_EReadyCheckRequestResult_AlreadyInProgress = 1,
    // @@protoc_insertion_point(enum_value:EReadyCheckRequestResult.k_EReadyCheckRequestResult_NotInParty)
    k_EReadyCheckRequestResult_NotInParty = 2,
    // @@protoc_insertion_point(enum_value:EReadyCheckRequestResult.k_EReadyCheckRequestResult_SendError)
    k_EReadyCheckRequestResult_SendError = 3,
    // @@protoc_insertion_point(enum_value:EReadyCheckRequestResult.k_EReadyCheckRequestResult_UnknownError)
    k_EReadyCheckRequestResult_UnknownError = 4,
}

impl ::steam_vent_proto_common::protobuf::Enum for EReadyCheckRequestResult {
    const NAME: &'static str = "EReadyCheckRequestResult";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EReadyCheckRequestResult> {
        match value {
            0 => ::std::option::Option::Some(EReadyCheckRequestResult::k_EReadyCheckRequestResult_Success),
            1 => ::std::option::Option::Some(EReadyCheckRequestResult::k_EReadyCheckRequestResult_AlreadyInProgress),
            2 => ::std::option::Option::Some(EReadyCheckRequestResult::k_EReadyCheckRequestResult_NotInParty),
            3 => ::std::option::Option::Some(EReadyCheckRequestResult::k_EReadyCheckRequestResult_SendError),
            4 => ::std::option::Option::Some(EReadyCheckRequestResult::k_EReadyCheckRequestResult_UnknownError),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EReadyCheckRequestResult> {
        match str {
            "k_EReadyCheckRequestResult_Success" => ::std::option::Option::Some(EReadyCheckRequestResult::k_EReadyCheckRequestResult_Success),
            "k_EReadyCheckRequestResult_AlreadyInProgress" => ::std::option::Option::Some(EReadyCheckRequestResult::k_EReadyCheckRequestResult_AlreadyInProgress),
            "k_EReadyCheckRequestResult_NotInParty" => ::std::option::Option::Some(EReadyCheckRequestResult::k_EReadyCheckRequestResult_NotInParty),
            "k_EReadyCheckRequestResult_SendError" => ::std::option::Option::Some(EReadyCheckRequestResult::k_EReadyCheckRequestResult_SendError),
            "k_EReadyCheckRequestResult_UnknownError" => ::std::option::Option::Some(EReadyCheckRequestResult::k_EReadyCheckRequestResult_UnknownError),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EReadyCheckRequestResult] = &[
        EReadyCheckRequestResult::k_EReadyCheckRequestResult_Success,
        EReadyCheckRequestResult::k_EReadyCheckRequestResult_AlreadyInProgress,
        EReadyCheckRequestResult::k_EReadyCheckRequestResult_NotInParty,
        EReadyCheckRequestResult::k_EReadyCheckRequestResult_SendError,
        EReadyCheckRequestResult::k_EReadyCheckRequestResult_UnknownError,
    ];
}

impl ::std::default::Default for EReadyCheckRequestResult {
    fn default() -> Self {
        EReadyCheckRequestResult::k_EReadyCheckRequestResult_Success
    }
}


#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EMatchBehaviorScoreVariance)
pub enum EMatchBehaviorScoreVariance {
    // @@protoc_insertion_point(enum_value:EMatchBehaviorScoreVariance.k_EMatchBehaviorScoreVariance_Invalid)
    k_EMatchBehaviorScoreVariance_Invalid = 0,
    // @@protoc_insertion_point(enum_value:EMatchBehaviorScoreVariance.k_EMatchBehaviorScoreVariance_Low)
    k_EMatchBehaviorScoreVariance_Low = 1,
    // @@protoc_insertion_point(enum_value:EMatchBehaviorScoreVariance.k_EMatchBehaviorScoreVariance_Medium)
    k_EMatchBehaviorScoreVariance_Medium = 2,
    // @@protoc_insertion_point(enum_value:EMatchBehaviorScoreVariance.k_EMatchBehaviorScoreVariance_High)
    k_EMatchBehaviorScoreVariance_High = 3,
}

impl ::steam_vent_proto_common::protobuf::Enum for EMatchBehaviorScoreVariance {
    const NAME: &'static str = "EMatchBehaviorScoreVariance";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EMatchBehaviorScoreVariance> {
        match value {
            0 => ::std::option::Option::Some(EMatchBehaviorScoreVariance::k_EMatchBehaviorScoreVariance_Invalid),
            1 => ::std::option::Option::Some(EMatchBehaviorScoreVariance::k_EMatchBehaviorScoreVariance_Low),
            2 => ::std::option::Option::Some(EMatchBehaviorScoreVariance::k_EMatchBehaviorScoreVariance_Medium),
            3 => ::std::option::Option::Some(EMatchBehaviorScoreVariance::k_EMatchBehaviorScoreVariance_High),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EMatchBehaviorScoreVariance> {
        match str {
            "k_EMatchBehaviorScoreVariance_Invalid" => ::std::option::Option::Some(EMatchBehaviorScoreVariance::k_EMatchBehaviorScoreVariance_Invalid),
            "k_EMatchBehaviorScoreVariance_Low" => ::std::option::Option::Some(EMatchBehaviorScoreVariance::k_EMatchBehaviorScoreVariance_Low),
            "k_EMatchBehaviorScoreVariance_Medium" => ::std::option::Option::Some(EMatchBehaviorScoreVariance::k_EMatchBehaviorScoreVariance_Medium),
            "k_EMatchBehaviorScoreVariance_High" => ::std::option::Option::Some(EMatchBehaviorScoreVariance::k_EMatchBehaviorScoreVariance_High),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EMatchBehaviorScoreVariance] = &[
        EMatchBehaviorScoreVariance::k_EMatchBehaviorScoreVariance_Invalid,
        EMatchBehaviorScoreVariance::k_EMatchBehaviorScoreVariance_Low,
        EMatchBehaviorScoreVariance::k_EMatchBehaviorScoreVariance_Medium,
        EMatchBehaviorScoreVariance::k_EMatchBehaviorScoreVariance_High,
    ];
}

impl ::std::default::Default for EMatchBehaviorScoreVariance {
    fn default() -> Self {
        EMatchBehaviorScoreVariance::k_EMatchBehaviorScoreVariance_Invalid
    }
}



const _VENT_PROTO_VERSION_CHECK: () = ::steam_vent_proto_common::VERSION_0_5_0;

#[allow(unused_imports)]
use crate::steammessages::*;
#[allow(unused_imports)]
use crate::gcsdk_gcmessages::*;
#[allow(unused_imports)]
use crate::dota_shared_enums::*;
impl ::steam_vent_proto_common::RpcMessage for CSODOTAPartyMember {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CSODOTAParty {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CSODOTAPartyInvite {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgLeaverState {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgReadyCheckStatus {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgPartyReadyCheckRequest {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgPartyReadyCheckRequest {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgPartyReadyCheckRequest;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgPartyReadyCheckResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgPartyReadyCheckResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgPartyReadyCheckResponse;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgPartyReadyCheckAcknowledge {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgPartyReadyCheckAcknowledge {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgPartyReadyCheckAcknowledge;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgLobbyEventGameDetails {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgLobbyEventGameDetails {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgLobbyEventGameDetails;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgMatchMatchmakingStats {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgMatchMatchmakingStats {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgMatchMatchmakingStats;
}
impl ::steam_vent_proto_common::RpcMessage for CMvpData {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}

// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `dota_gcmessages_client_fantasy.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::steam_vent_proto_common::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:CMsgDOTAPlayerInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAPlayerInfo {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTAPlayerInfo.account_id)
    pub account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAPlayerInfo.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTAPlayerInfo.country_code)
    pub country_code: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTAPlayerInfo.fantasy_role)
    pub fantasy_role: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<super::dota_shared_enums::Fantasy_Roles>>,
    // @@protoc_insertion_point(field:CMsgDOTAPlayerInfo.team_id)
    pub team_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAPlayerInfo.team_name)
    pub team_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTAPlayerInfo.team_tag)
    pub team_tag: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTAPlayerInfo.sponsor)
    pub sponsor: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTAPlayerInfo.is_locked)
    pub is_locked: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgDOTAPlayerInfo.is_pro)
    pub is_pro: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgDOTAPlayerInfo.real_name)
    pub real_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTAPlayerInfo.total_earnings)
    pub total_earnings: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAPlayerInfo.results)
    pub results: ::std::vec::Vec<cmsg_dotaplayer_info::Results>,
    // @@protoc_insertion_point(field:CMsgDOTAPlayerInfo.team_url_logo)
    pub team_url_logo: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTAPlayerInfo.audit_entries)
    pub audit_entries: ::std::vec::Vec<cmsg_dotaplayer_info::AuditEntry>,
    // @@protoc_insertion_point(field:CMsgDOTAPlayerInfo.team_abbreviation)
    pub team_abbreviation: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTAPlayerInfo.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAPlayerInfo {
    fn default() -> &'a CMsgDOTAPlayerInfo {
        <CMsgDOTAPlayerInfo as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAPlayerInfo {
    pub fn new() -> CMsgDOTAPlayerInfo {
        ::std::default::Default::default()
    }

    // optional uint32 account_id = 1;

    pub fn account_id(&self) -> u32 {
        self.account_id.unwrap_or(0)
    }

    pub fn clear_account_id(&mut self) {
        self.account_id = ::std::option::Option::None;
    }

    pub fn has_account_id(&self) -> bool {
        self.account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: u32) {
        self.account_id = ::std::option::Option::Some(v);
    }

    // optional string name = 2;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string country_code = 3;

    pub fn country_code(&self) -> &str {
        match self.country_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_country_code(&mut self) {
        self.country_code = ::std::option::Option::None;
    }

    pub fn has_country_code(&self) -> bool {
        self.country_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_country_code(&mut self, v: ::std::string::String) {
        self.country_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_country_code(&mut self) -> &mut ::std::string::String {
        if self.country_code.is_none() {
            self.country_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.country_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_country_code(&mut self) -> ::std::string::String {
        self.country_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .Fantasy_Roles fantasy_role = 4;

    pub fn fantasy_role(&self) -> super::dota_shared_enums::Fantasy_Roles {
        match self.fantasy_role {
            Some(e) => e.enum_value_or(super::dota_shared_enums::Fantasy_Roles::FANTASY_ROLE_UNDEFINED),
            None => super::dota_shared_enums::Fantasy_Roles::FANTASY_ROLE_UNDEFINED,
        }
    }

    pub fn clear_fantasy_role(&mut self) {
        self.fantasy_role = ::std::option::Option::None;
    }

    pub fn has_fantasy_role(&self) -> bool {
        self.fantasy_role.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fantasy_role(&mut self, v: super::dota_shared_enums::Fantasy_Roles) {
        self.fantasy_role = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint32 team_id = 5;

    pub fn team_id(&self) -> u32 {
        self.team_id.unwrap_or(0)
    }

    pub fn clear_team_id(&mut self) {
        self.team_id = ::std::option::Option::None;
    }

    pub fn has_team_id(&self) -> bool {
        self.team_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_id(&mut self, v: u32) {
        self.team_id = ::std::option::Option::Some(v);
    }

    // optional string team_name = 6;

    pub fn team_name(&self) -> &str {
        match self.team_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_team_name(&mut self) {
        self.team_name = ::std::option::Option::None;
    }

    pub fn has_team_name(&self) -> bool {
        self.team_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_name(&mut self, v: ::std::string::String) {
        self.team_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_team_name(&mut self) -> &mut ::std::string::String {
        if self.team_name.is_none() {
            self.team_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.team_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_team_name(&mut self) -> ::std::string::String {
        self.team_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string team_tag = 7;

    pub fn team_tag(&self) -> &str {
        match self.team_tag.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_team_tag(&mut self) {
        self.team_tag = ::std::option::Option::None;
    }

    pub fn has_team_tag(&self) -> bool {
        self.team_tag.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_tag(&mut self, v: ::std::string::String) {
        self.team_tag = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_team_tag(&mut self) -> &mut ::std::string::String {
        if self.team_tag.is_none() {
            self.team_tag = ::std::option::Option::Some(::std::string::String::new());
        }
        self.team_tag.as_mut().unwrap()
    }

    // Take field
    pub fn take_team_tag(&mut self) -> ::std::string::String {
        self.team_tag.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string sponsor = 8;

    pub fn sponsor(&self) -> &str {
        match self.sponsor.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_sponsor(&mut self) {
        self.sponsor = ::std::option::Option::None;
    }

    pub fn has_sponsor(&self) -> bool {
        self.sponsor.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sponsor(&mut self, v: ::std::string::String) {
        self.sponsor = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sponsor(&mut self) -> &mut ::std::string::String {
        if self.sponsor.is_none() {
            self.sponsor = ::std::option::Option::Some(::std::string::String::new());
        }
        self.sponsor.as_mut().unwrap()
    }

    // Take field
    pub fn take_sponsor(&mut self) -> ::std::string::String {
        self.sponsor.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool is_locked = 9;

    pub fn is_locked(&self) -> bool {
        self.is_locked.unwrap_or(false)
    }

    pub fn clear_is_locked(&mut self) {
        self.is_locked = ::std::option::Option::None;
    }

    pub fn has_is_locked(&self) -> bool {
        self.is_locked.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_locked(&mut self, v: bool) {
        self.is_locked = ::std::option::Option::Some(v);
    }

    // optional bool is_pro = 10;

    pub fn is_pro(&self) -> bool {
        self.is_pro.unwrap_or(false)
    }

    pub fn clear_is_pro(&mut self) {
        self.is_pro = ::std::option::Option::None;
    }

    pub fn has_is_pro(&self) -> bool {
        self.is_pro.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_pro(&mut self, v: bool) {
        self.is_pro = ::std::option::Option::Some(v);
    }

    // optional string real_name = 11;

    pub fn real_name(&self) -> &str {
        match self.real_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_real_name(&mut self) {
        self.real_name = ::std::option::Option::None;
    }

    pub fn has_real_name(&self) -> bool {
        self.real_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_real_name(&mut self, v: ::std::string::String) {
        self.real_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_real_name(&mut self) -> &mut ::std::string::String {
        if self.real_name.is_none() {
            self.real_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.real_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_real_name(&mut self) -> ::std::string::String {
        self.real_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 total_earnings = 13;

    pub fn total_earnings(&self) -> u32 {
        self.total_earnings.unwrap_or(0)
    }

    pub fn clear_total_earnings(&mut self) {
        self.total_earnings = ::std::option::Option::None;
    }

    pub fn has_total_earnings(&self) -> bool {
        self.total_earnings.is_some()
    }

    // Param is passed by value, moved
    pub fn set_total_earnings(&mut self, v: u32) {
        self.total_earnings = ::std::option::Option::Some(v);
    }

    // optional string team_url_logo = 15;

    pub fn team_url_logo(&self) -> &str {
        match self.team_url_logo.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_team_url_logo(&mut self) {
        self.team_url_logo = ::std::option::Option::None;
    }

    pub fn has_team_url_logo(&self) -> bool {
        self.team_url_logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_url_logo(&mut self, v: ::std::string::String) {
        self.team_url_logo = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_team_url_logo(&mut self) -> &mut ::std::string::String {
        if self.team_url_logo.is_none() {
            self.team_url_logo = ::std::option::Option::Some(::std::string::String::new());
        }
        self.team_url_logo.as_mut().unwrap()
    }

    // Take field
    pub fn take_team_url_logo(&mut self) -> ::std::string::String {
        self.team_url_logo.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string team_abbreviation = 17;

    pub fn team_abbreviation(&self) -> &str {
        match self.team_abbreviation.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_team_abbreviation(&mut self) {
        self.team_abbreviation = ::std::option::Option::None;
    }

    pub fn has_team_abbreviation(&self) -> bool {
        self.team_abbreviation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_abbreviation(&mut self, v: ::std::string::String) {
        self.team_abbreviation = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_team_abbreviation(&mut self) -> &mut ::std::string::String {
        if self.team_abbreviation.is_none() {
            self.team_abbreviation = ::std::option::Option::Some(::std::string::String::new());
        }
        self.team_abbreviation.as_mut().unwrap()
    }

    // Take field
    pub fn take_team_abbreviation(&mut self) -> ::std::string::String {
        self.team_abbreviation.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTAPlayerInfo {
    const NAME: &'static str = "CMsgDOTAPlayerInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.country_code = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.fantasy_role = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                40 => {
                    self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                50 => {
                    self.team_name = ::std::option::Option::Some(is.read_string()?);
                },
                58 => {
                    self.team_tag = ::std::option::Option::Some(is.read_string()?);
                },
                66 => {
                    self.sponsor = ::std::option::Option::Some(is.read_string()?);
                },
                72 => {
                    self.is_locked = ::std::option::Option::Some(is.read_bool()?);
                },
                80 => {
                    self.is_pro = ::std::option::Option::Some(is.read_bool()?);
                },
                90 => {
                    self.real_name = ::std::option::Option::Some(is.read_string()?);
                },
                104 => {
                    self.total_earnings = ::std::option::Option::Some(is.read_uint32()?);
                },
                114 => {
                    self.results.push(is.read_message()?);
                },
                122 => {
                    self.team_url_logo = ::std::option::Option::Some(is.read_string()?);
                },
                130 => {
                    self.audit_entries.push(is.read_message()?);
                },
                138 => {
                    self.team_abbreviation = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.country_code.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.fantasy_role {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(4, v.value());
        }
        if let Some(v) = self.team_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.team_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(6, &v);
        }
        if let Some(v) = self.team_tag.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.sponsor.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(8, &v);
        }
        if let Some(v) = self.is_locked {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_pro {
            my_size += 1 + 1;
        }
        if let Some(v) = self.real_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(11, &v);
        }
        if let Some(v) = self.total_earnings {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(13, v);
        }
        for value in &self.results {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.team_url_logo.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(15, &v);
        }
        for value in &self.audit_entries {
            let len = value.compute_size();
            my_size += 2 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.team_abbreviation.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(17, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.account_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.country_code.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.fantasy_role {
            os.write_enum(4, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.team_id {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.team_name.as_ref() {
            os.write_string(6, v)?;
        }
        if let Some(v) = self.team_tag.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.sponsor.as_ref() {
            os.write_string(8, v)?;
        }
        if let Some(v) = self.is_locked {
            os.write_bool(9, v)?;
        }
        if let Some(v) = self.is_pro {
            os.write_bool(10, v)?;
        }
        if let Some(v) = self.real_name.as_ref() {
            os.write_string(11, v)?;
        }
        if let Some(v) = self.total_earnings {
            os.write_uint32(13, v)?;
        }
        for v in &self.results {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        };
        if let Some(v) = self.team_url_logo.as_ref() {
            os.write_string(15, v)?;
        }
        for v in &self.audit_entries {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(16, v, os)?;
        };
        if let Some(v) = self.team_abbreviation.as_ref() {
            os.write_string(17, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAPlayerInfo {
        CMsgDOTAPlayerInfo::new()
    }

    fn clear(&mut self) {
        self.account_id = ::std::option::Option::None;
        self.name = ::std::option::Option::None;
        self.country_code = ::std::option::Option::None;
        self.fantasy_role = ::std::option::Option::None;
        self.team_id = ::std::option::Option::None;
        self.team_name = ::std::option::Option::None;
        self.team_tag = ::std::option::Option::None;
        self.sponsor = ::std::option::Option::None;
        self.is_locked = ::std::option::Option::None;
        self.is_pro = ::std::option::Option::None;
        self.real_name = ::std::option::Option::None;
        self.total_earnings = ::std::option::Option::None;
        self.results.clear();
        self.team_url_logo = ::std::option::Option::None;
        self.audit_entries.clear();
        self.team_abbreviation = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAPlayerInfo {
        static instance: CMsgDOTAPlayerInfo = CMsgDOTAPlayerInfo {
            account_id: ::std::option::Option::None,
            name: ::std::option::Option::None,
            country_code: ::std::option::Option::None,
            fantasy_role: ::std::option::Option::None,
            team_id: ::std::option::Option::None,
            team_name: ::std::option::Option::None,
            team_tag: ::std::option::Option::None,
            sponsor: ::std::option::Option::None,
            is_locked: ::std::option::Option::None,
            is_pro: ::std::option::Option::None,
            real_name: ::std::option::Option::None,
            total_earnings: ::std::option::Option::None,
            results: ::std::vec::Vec::new(),
            team_url_logo: ::std::option::Option::None,
            audit_entries: ::std::vec::Vec::new(),
            team_abbreviation: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgDOTAPlayerInfo`
pub mod cmsg_dotaplayer_info {
    // @@protoc_insertion_point(message:CMsgDOTAPlayerInfo.Results)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Results {
        // message fields
        // @@protoc_insertion_point(field:CMsgDOTAPlayerInfo.Results.league_id)
        pub league_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTAPlayerInfo.Results.placement)
        pub placement: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTAPlayerInfo.Results.earnings)
        pub earnings: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDOTAPlayerInfo.Results.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Results {
        fn default() -> &'a Results {
            <Results as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl Results {
        pub fn new() -> Results {
            ::std::default::Default::default()
        }

        // optional uint32 league_id = 1;

        pub fn league_id(&self) -> u32 {
            self.league_id.unwrap_or(0)
        }

        pub fn clear_league_id(&mut self) {
            self.league_id = ::std::option::Option::None;
        }

        pub fn has_league_id(&self) -> bool {
            self.league_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_league_id(&mut self, v: u32) {
            self.league_id = ::std::option::Option::Some(v);
        }

        // optional uint32 placement = 2;

        pub fn placement(&self) -> u32 {
            self.placement.unwrap_or(0)
        }

        pub fn clear_placement(&mut self) {
            self.placement = ::std::option::Option::None;
        }

        pub fn has_placement(&self) -> bool {
            self.placement.is_some()
        }

        // Param is passed by value, moved
        pub fn set_placement(&mut self, v: u32) {
            self.placement = ::std::option::Option::Some(v);
        }

        // optional uint32 earnings = 3;

        pub fn earnings(&self) -> u32 {
            self.earnings.unwrap_or(0)
        }

        pub fn clear_earnings(&mut self) {
            self.earnings = ::std::option::Option::None;
        }

        pub fn has_earnings(&self) -> bool {
            self.earnings.is_some()
        }

        // Param is passed by value, moved
        pub fn set_earnings(&mut self, v: u32) {
            self.earnings = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for Results {
        const NAME: &'static str = "Results";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.league_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.placement = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.earnings = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.league_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.placement {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.earnings {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.league_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.placement {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.earnings {
                os.write_uint32(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Results {
            Results::new()
        }

        fn clear(&mut self) {
            self.league_id = ::std::option::Option::None;
            self.placement = ::std::option::Option::None;
            self.earnings = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Results {
            static instance: Results = Results {
                league_id: ::std::option::Option::None,
                placement: ::std::option::Option::None,
                earnings: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgDOTAPlayerInfo.AuditEntry)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct AuditEntry {
        // message fields
        // @@protoc_insertion_point(field:CMsgDOTAPlayerInfo.AuditEntry.start_timestamp)
        pub start_timestamp: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTAPlayerInfo.AuditEntry.end_timestamp)
        pub end_timestamp: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTAPlayerInfo.AuditEntry.team_id)
        pub team_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTAPlayerInfo.AuditEntry.team_name)
        pub team_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgDOTAPlayerInfo.AuditEntry.team_tag)
        pub team_tag: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgDOTAPlayerInfo.AuditEntry.team_url_logo)
        pub team_url_logo: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDOTAPlayerInfo.AuditEntry.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a AuditEntry {
        fn default() -> &'a AuditEntry {
            <AuditEntry as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl AuditEntry {
        pub fn new() -> AuditEntry {
            ::std::default::Default::default()
        }

        // optional uint32 start_timestamp = 1;

        pub fn start_timestamp(&self) -> u32 {
            self.start_timestamp.unwrap_or(0)
        }

        pub fn clear_start_timestamp(&mut self) {
            self.start_timestamp = ::std::option::Option::None;
        }

        pub fn has_start_timestamp(&self) -> bool {
            self.start_timestamp.is_some()
        }

        // Param is passed by value, moved
        pub fn set_start_timestamp(&mut self, v: u32) {
            self.start_timestamp = ::std::option::Option::Some(v);
        }

        // optional uint32 end_timestamp = 2;

        pub fn end_timestamp(&self) -> u32 {
            self.end_timestamp.unwrap_or(0)
        }

        pub fn clear_end_timestamp(&mut self) {
            self.end_timestamp = ::std::option::Option::None;
        }

        pub fn has_end_timestamp(&self) -> bool {
            self.end_timestamp.is_some()
        }

        // Param is passed by value, moved
        pub fn set_end_timestamp(&mut self, v: u32) {
            self.end_timestamp = ::std::option::Option::Some(v);
        }

        // optional uint32 team_id = 3;

        pub fn team_id(&self) -> u32 {
            self.team_id.unwrap_or(0)
        }

        pub fn clear_team_id(&mut self) {
            self.team_id = ::std::option::Option::None;
        }

        pub fn has_team_id(&self) -> bool {
            self.team_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_id(&mut self, v: u32) {
            self.team_id = ::std::option::Option::Some(v);
        }

        // optional string team_name = 4;

        pub fn team_name(&self) -> &str {
            match self.team_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_team_name(&mut self) {
            self.team_name = ::std::option::Option::None;
        }

        pub fn has_team_name(&self) -> bool {
            self.team_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_name(&mut self, v: ::std::string::String) {
            self.team_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_team_name(&mut self) -> &mut ::std::string::String {
            if self.team_name.is_none() {
                self.team_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.team_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_team_name(&mut self) -> ::std::string::String {
            self.team_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string team_tag = 5;

        pub fn team_tag(&self) -> &str {
            match self.team_tag.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_team_tag(&mut self) {
            self.team_tag = ::std::option::Option::None;
        }

        pub fn has_team_tag(&self) -> bool {
            self.team_tag.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_tag(&mut self, v: ::std::string::String) {
            self.team_tag = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_team_tag(&mut self) -> &mut ::std::string::String {
            if self.team_tag.is_none() {
                self.team_tag = ::std::option::Option::Some(::std::string::String::new());
            }
            self.team_tag.as_mut().unwrap()
        }

        // Take field
        pub fn take_team_tag(&mut self) -> ::std::string::String {
            self.team_tag.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string team_url_logo = 6;

        pub fn team_url_logo(&self) -> &str {
            match self.team_url_logo.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_team_url_logo(&mut self) {
            self.team_url_logo = ::std::option::Option::None;
        }

        pub fn has_team_url_logo(&self) -> bool {
            self.team_url_logo.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_url_logo(&mut self, v: ::std::string::String) {
            self.team_url_logo = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_team_url_logo(&mut self) -> &mut ::std::string::String {
            if self.team_url_logo.is_none() {
                self.team_url_logo = ::std::option::Option::Some(::std::string::String::new());
            }
            self.team_url_logo.as_mut().unwrap()
        }

        // Take field
        pub fn take_team_url_logo(&mut self) -> ::std::string::String {
            self.team_url_logo.take().unwrap_or_else(|| ::std::string::String::new())
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for AuditEntry {
        const NAME: &'static str = "AuditEntry";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.start_timestamp = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.end_timestamp = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    34 => {
                        self.team_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    42 => {
                        self.team_tag = ::std::option::Option::Some(is.read_string()?);
                    },
                    50 => {
                        self.team_url_logo = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.start_timestamp {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.end_timestamp {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.team_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.team_name.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(4, &v);
            }
            if let Some(v) = self.team_tag.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(5, &v);
            }
            if let Some(v) = self.team_url_logo.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(6, &v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.start_timestamp {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.end_timestamp {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.team_id {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.team_name.as_ref() {
                os.write_string(4, v)?;
            }
            if let Some(v) = self.team_tag.as_ref() {
                os.write_string(5, v)?;
            }
            if let Some(v) = self.team_url_logo.as_ref() {
                os.write_string(6, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> AuditEntry {
            AuditEntry::new()
        }

        fn clear(&mut self) {
            self.start_timestamp = ::std::option::Option::None;
            self.end_timestamp = ::std::option::Option::None;
            self.team_id = ::std::option::Option::None;
            self.team_name = ::std::option::Option::None;
            self.team_tag = ::std::option::Option::None;
            self.team_url_logo = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static AuditEntry {
            static instance: AuditEntry = AuditEntry {
                start_timestamp: ::std::option::Option::None,
                end_timestamp: ::std::option::Option::None,
                team_id: ::std::option::Option::None,
                team_name: ::std::option::Option::None,
                team_tag: ::std::option::Option::None,
                team_url_logo: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgDOTAPlayerInfoList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAPlayerInfoList {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTAPlayerInfoList.player_infos)
    pub player_infos: ::std::vec::Vec<CMsgDOTAPlayerInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTAPlayerInfoList.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAPlayerInfoList {
    fn default() -> &'a CMsgDOTAPlayerInfoList {
        <CMsgDOTAPlayerInfoList as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAPlayerInfoList {
    pub fn new() -> CMsgDOTAPlayerInfoList {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTAPlayerInfoList {
    const NAME: &'static str = "CMsgDOTAPlayerInfoList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.player_infos.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.player_infos {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.player_infos {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAPlayerInfoList {
        CMsgDOTAPlayerInfoList::new()
    }

    fn clear(&mut self) {
        self.player_infos.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAPlayerInfoList {
        static instance: CMsgDOTAPlayerInfoList = CMsgDOTAPlayerInfoList {
            player_infos: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTATeamRoster)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTATeamRoster {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTATeamRoster.timestamp)
    pub timestamp: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTATeamRoster.team_id)
    pub team_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTATeamRoster.member_account_ids)
    pub member_account_ids: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CMsgDOTATeamRoster.coach_account_id)
    pub coach_account_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTATeamRoster.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTATeamRoster {
    fn default() -> &'a CMsgDOTATeamRoster {
        <CMsgDOTATeamRoster as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTATeamRoster {
    pub fn new() -> CMsgDOTATeamRoster {
        ::std::default::Default::default()
    }

    // optional uint32 timestamp = 1;

    pub fn timestamp(&self) -> u32 {
        self.timestamp.unwrap_or(0)
    }

    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u32) {
        self.timestamp = ::std::option::Option::Some(v);
    }

    // optional uint32 team_id = 2;

    pub fn team_id(&self) -> u32 {
        self.team_id.unwrap_or(0)
    }

    pub fn clear_team_id(&mut self) {
        self.team_id = ::std::option::Option::None;
    }

    pub fn has_team_id(&self) -> bool {
        self.team_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_id(&mut self, v: u32) {
        self.team_id = ::std::option::Option::Some(v);
    }

    // optional uint32 coach_account_id = 4;

    pub fn coach_account_id(&self) -> u32 {
        self.coach_account_id.unwrap_or(0)
    }

    pub fn clear_coach_account_id(&mut self) {
        self.coach_account_id = ::std::option::Option::None;
    }

    pub fn has_coach_account_id(&self) -> bool {
        self.coach_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_coach_account_id(&mut self, v: u32) {
        self.coach_account_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTATeamRoster {
    const NAME: &'static str = "CMsgDOTATeamRoster";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.timestamp = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    is.read_repeated_packed_uint32_into(&mut self.member_account_ids)?;
                },
                24 => {
                    self.member_account_ids.push(is.read_uint32()?);
                },
                32 => {
                    self.coach_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.timestamp {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.team_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        for value in &self.member_account_ids {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, *value);
        };
        if let Some(v) = self.coach_account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.timestamp {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.team_id {
            os.write_uint32(2, v)?;
        }
        for v in &self.member_account_ids {
            os.write_uint32(3, *v)?;
        };
        if let Some(v) = self.coach_account_id {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTATeamRoster {
        CMsgDOTATeamRoster::new()
    }

    fn clear(&mut self) {
        self.timestamp = ::std::option::Option::None;
        self.team_id = ::std::option::Option::None;
        self.member_account_ids.clear();
        self.coach_account_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTATeamRoster {
        static instance: CMsgDOTATeamRoster = CMsgDOTATeamRoster {
            timestamp: ::std::option::Option::None,
            team_id: ::std::option::Option::None,
            member_account_ids: ::std::vec::Vec::new(),
            coach_account_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTADPCProfileInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTADPCProfileInfo {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTADPCProfileInfo.player_info)
    pub player_info: ::steam_vent_proto_common::protobuf::MessageField<CMsgDOTAPlayerInfo>,
    // @@protoc_insertion_point(field:CMsgDOTADPCProfileInfo.prediction_info)
    pub prediction_info: ::steam_vent_proto_common::protobuf::MessageField<cmsg_dotadpcprofile_info::PredictionInfo>,
    // @@protoc_insertion_point(field:CMsgDOTADPCProfileInfo.fantasy_info)
    pub fantasy_info: ::steam_vent_proto_common::protobuf::MessageField<cmsg_dotadpcprofile_info::FantasyInfo>,
    // @@protoc_insertion_point(field:CMsgDOTADPCProfileInfo.disabled_notifications)
    pub disabled_notifications: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTADPCProfileInfo.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTADPCProfileInfo {
    fn default() -> &'a CMsgDOTADPCProfileInfo {
        <CMsgDOTADPCProfileInfo as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTADPCProfileInfo {
    pub fn new() -> CMsgDOTADPCProfileInfo {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTADPCProfileInfo {
    const NAME: &'static str = "CMsgDOTADPCProfileInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.player_info)?;
                },
                18 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.prediction_info)?;
                },
                26 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.fantasy_info)?;
                },
                34 => {
                    is.read_repeated_packed_uint32_into(&mut self.disabled_notifications)?;
                },
                32 => {
                    self.disabled_notifications.push(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.player_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.prediction_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.fantasy_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.disabled_notifications {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, *value);
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.player_info.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.prediction_info.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.fantasy_info.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        for v in &self.disabled_notifications {
            os.write_uint32(4, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTADPCProfileInfo {
        CMsgDOTADPCProfileInfo::new()
    }

    fn clear(&mut self) {
        self.player_info.clear();
        self.prediction_info.clear();
        self.fantasy_info.clear();
        self.disabled_notifications.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTADPCProfileInfo {
        static instance: CMsgDOTADPCProfileInfo = CMsgDOTADPCProfileInfo {
            player_info: ::steam_vent_proto_common::protobuf::MessageField::none(),
            prediction_info: ::steam_vent_proto_common::protobuf::MessageField::none(),
            fantasy_info: ::steam_vent_proto_common::protobuf::MessageField::none(),
            disabled_notifications: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgDOTADPCProfileInfo`
pub mod cmsg_dotadpcprofile_info {
    // @@protoc_insertion_point(message:CMsgDOTADPCProfileInfo.PredictionInfo)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PredictionInfo {
        // message fields
        // @@protoc_insertion_point(field:CMsgDOTADPCProfileInfo.PredictionInfo.percent)
        pub percent: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTADPCProfileInfo.PredictionInfo.shard_winnings)
        pub shard_winnings: ::std::option::Option<i32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDOTADPCProfileInfo.PredictionInfo.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PredictionInfo {
        fn default() -> &'a PredictionInfo {
            <PredictionInfo as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl PredictionInfo {
        pub fn new() -> PredictionInfo {
            ::std::default::Default::default()
        }

        // optional uint32 percent = 1;

        pub fn percent(&self) -> u32 {
            self.percent.unwrap_or(0)
        }

        pub fn clear_percent(&mut self) {
            self.percent = ::std::option::Option::None;
        }

        pub fn has_percent(&self) -> bool {
            self.percent.is_some()
        }

        // Param is passed by value, moved
        pub fn set_percent(&mut self, v: u32) {
            self.percent = ::std::option::Option::Some(v);
        }

        // optional int32 shard_winnings = 2;

        pub fn shard_winnings(&self) -> i32 {
            self.shard_winnings.unwrap_or(0)
        }

        pub fn clear_shard_winnings(&mut self) {
            self.shard_winnings = ::std::option::Option::None;
        }

        pub fn has_shard_winnings(&self) -> bool {
            self.shard_winnings.is_some()
        }

        // Param is passed by value, moved
        pub fn set_shard_winnings(&mut self, v: i32) {
            self.shard_winnings = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for PredictionInfo {
        const NAME: &'static str = "PredictionInfo";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.percent = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.shard_winnings = ::std::option::Option::Some(is.read_int32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.percent {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.shard_winnings {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(2, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.percent {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.shard_winnings {
                os.write_int32(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PredictionInfo {
            PredictionInfo::new()
        }

        fn clear(&mut self) {
            self.percent = ::std::option::Option::None;
            self.shard_winnings = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PredictionInfo {
            static instance: PredictionInfo = PredictionInfo {
                percent: ::std::option::Option::None,
                shard_winnings: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgDOTADPCProfileInfo.FantasyInfo)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct FantasyInfo {
        // message fields
        // @@protoc_insertion_point(field:CMsgDOTADPCProfileInfo.FantasyInfo.top_90_finishes)
        pub top_90_finishes: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTADPCProfileInfo.FantasyInfo.top_75_finishes)
        pub top_75_finishes: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTADPCProfileInfo.FantasyInfo.top_50_finishes)
        pub top_50_finishes: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTADPCProfileInfo.FantasyInfo.shard_winnings)
        pub shard_winnings: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDOTADPCProfileInfo.FantasyInfo.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a FantasyInfo {
        fn default() -> &'a FantasyInfo {
            <FantasyInfo as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl FantasyInfo {
        pub fn new() -> FantasyInfo {
            ::std::default::Default::default()
        }

        // optional uint32 top_90_finishes = 1;

        pub fn top_90_finishes(&self) -> u32 {
            self.top_90_finishes.unwrap_or(0)
        }

        pub fn clear_top_90_finishes(&mut self) {
            self.top_90_finishes = ::std::option::Option::None;
        }

        pub fn has_top_90_finishes(&self) -> bool {
            self.top_90_finishes.is_some()
        }

        // Param is passed by value, moved
        pub fn set_top_90_finishes(&mut self, v: u32) {
            self.top_90_finishes = ::std::option::Option::Some(v);
        }

        // optional uint32 top_75_finishes = 2;

        pub fn top_75_finishes(&self) -> u32 {
            self.top_75_finishes.unwrap_or(0)
        }

        pub fn clear_top_75_finishes(&mut self) {
            self.top_75_finishes = ::std::option::Option::None;
        }

        pub fn has_top_75_finishes(&self) -> bool {
            self.top_75_finishes.is_some()
        }

        // Param is passed by value, moved
        pub fn set_top_75_finishes(&mut self, v: u32) {
            self.top_75_finishes = ::std::option::Option::Some(v);
        }

        // optional uint32 top_50_finishes = 3;

        pub fn top_50_finishes(&self) -> u32 {
            self.top_50_finishes.unwrap_or(0)
        }

        pub fn clear_top_50_finishes(&mut self) {
            self.top_50_finishes = ::std::option::Option::None;
        }

        pub fn has_top_50_finishes(&self) -> bool {
            self.top_50_finishes.is_some()
        }

        // Param is passed by value, moved
        pub fn set_top_50_finishes(&mut self, v: u32) {
            self.top_50_finishes = ::std::option::Option::Some(v);
        }

        // optional uint32 shard_winnings = 4;

        pub fn shard_winnings(&self) -> u32 {
            self.shard_winnings.unwrap_or(0)
        }

        pub fn clear_shard_winnings(&mut self) {
            self.shard_winnings = ::std::option::Option::None;
        }

        pub fn has_shard_winnings(&self) -> bool {
            self.shard_winnings.is_some()
        }

        // Param is passed by value, moved
        pub fn set_shard_winnings(&mut self, v: u32) {
            self.shard_winnings = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for FantasyInfo {
        const NAME: &'static str = "FantasyInfo";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.top_90_finishes = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.top_75_finishes = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.top_50_finishes = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.shard_winnings = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.top_90_finishes {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.top_75_finishes {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.top_50_finishes {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.shard_winnings {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.top_90_finishes {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.top_75_finishes {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.top_50_finishes {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.shard_winnings {
                os.write_uint32(4, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> FantasyInfo {
            FantasyInfo::new()
        }

        fn clear(&mut self) {
            self.top_90_finishes = ::std::option::Option::None;
            self.top_75_finishes = ::std::option::Option::None;
            self.top_50_finishes = ::std::option::Option::None;
            self.shard_winnings = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static FantasyInfo {
            static instance: FantasyInfo = FantasyInfo {
                top_90_finishes: ::std::option::Option::None,
                top_75_finishes: ::std::option::Option::None,
                top_50_finishes: ::std::option::Option::None,
                shard_winnings: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgDOTALeaderboards)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTALeaderboards {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTALeaderboards.leaderboards)
    pub leaderboards: ::std::vec::Vec<cmsg_dotaleaderboards::RegionLeaderboard>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTALeaderboards.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTALeaderboards {
    fn default() -> &'a CMsgDOTALeaderboards {
        <CMsgDOTALeaderboards as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTALeaderboards {
    pub fn new() -> CMsgDOTALeaderboards {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTALeaderboards {
    const NAME: &'static str = "CMsgDOTALeaderboards";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.leaderboards.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.leaderboards {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.leaderboards {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTALeaderboards {
        CMsgDOTALeaderboards::new()
    }

    fn clear(&mut self) {
        self.leaderboards.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTALeaderboards {
        static instance: CMsgDOTALeaderboards = CMsgDOTALeaderboards {
            leaderboards: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgDOTALeaderboards`
pub mod cmsg_dotaleaderboards {
    // @@protoc_insertion_point(message:CMsgDOTALeaderboards.RegionLeaderboard)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct RegionLeaderboard {
        // message fields
        // @@protoc_insertion_point(field:CMsgDOTALeaderboards.RegionLeaderboard.division)
        pub division: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTALeaderboards.RegionLeaderboard.account_ids)
        pub account_ids: ::std::vec::Vec<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDOTALeaderboards.RegionLeaderboard.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a RegionLeaderboard {
        fn default() -> &'a RegionLeaderboard {
            <RegionLeaderboard as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl RegionLeaderboard {
        pub fn new() -> RegionLeaderboard {
            ::std::default::Default::default()
        }

        // optional uint32 division = 1;

        pub fn division(&self) -> u32 {
            self.division.unwrap_or(0)
        }

        pub fn clear_division(&mut self) {
            self.division = ::std::option::Option::None;
        }

        pub fn has_division(&self) -> bool {
            self.division.is_some()
        }

        // Param is passed by value, moved
        pub fn set_division(&mut self, v: u32) {
            self.division = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for RegionLeaderboard {
        const NAME: &'static str = "RegionLeaderboard";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.division = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        is.read_repeated_packed_uint32_into(&mut self.account_ids)?;
                    },
                    16 => {
                        self.account_ids.push(is.read_uint32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.division {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            for value in &self.account_ids {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, *value);
            };
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.division {
                os.write_uint32(1, v)?;
            }
            for v in &self.account_ids {
                os.write_uint32(2, *v)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> RegionLeaderboard {
            RegionLeaderboard::new()
        }

        fn clear(&mut self) {
            self.division = ::std::option::Option::None;
            self.account_ids.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static RegionLeaderboard {
            static instance: RegionLeaderboard = RegionLeaderboard {
                division: ::std::option::Option::None,
                account_ids: ::std::vec::Vec::new(),
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgDOTAPassportVoteTeamGuess)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAPassportVoteTeamGuess {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTAPassportVoteTeamGuess.league_id)
    pub league_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAPassportVoteTeamGuess.winner_id)
    pub winner_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAPassportVoteTeamGuess.runnerup_id)
    pub runnerup_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTAPassportVoteTeamGuess.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAPassportVoteTeamGuess {
    fn default() -> &'a CMsgDOTAPassportVoteTeamGuess {
        <CMsgDOTAPassportVoteTeamGuess as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAPassportVoteTeamGuess {
    pub fn new() -> CMsgDOTAPassportVoteTeamGuess {
        ::std::default::Default::default()
    }

    // optional uint32 league_id = 1;

    pub fn league_id(&self) -> u32 {
        self.league_id.unwrap_or(0)
    }

    pub fn clear_league_id(&mut self) {
        self.league_id = ::std::option::Option::None;
    }

    pub fn has_league_id(&self) -> bool {
        self.league_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_league_id(&mut self, v: u32) {
        self.league_id = ::std::option::Option::Some(v);
    }

    // optional uint32 winner_id = 2;

    pub fn winner_id(&self) -> u32 {
        self.winner_id.unwrap_or(0)
    }

    pub fn clear_winner_id(&mut self) {
        self.winner_id = ::std::option::Option::None;
    }

    pub fn has_winner_id(&self) -> bool {
        self.winner_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_winner_id(&mut self, v: u32) {
        self.winner_id = ::std::option::Option::Some(v);
    }

    // optional uint32 runnerup_id = 3;

    pub fn runnerup_id(&self) -> u32 {
        self.runnerup_id.unwrap_or(0)
    }

    pub fn clear_runnerup_id(&mut self) {
        self.runnerup_id = ::std::option::Option::None;
    }

    pub fn has_runnerup_id(&self) -> bool {
        self.runnerup_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_runnerup_id(&mut self, v: u32) {
        self.runnerup_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTAPassportVoteTeamGuess {
    const NAME: &'static str = "CMsgDOTAPassportVoteTeamGuess";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.league_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.winner_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.runnerup_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.league_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.winner_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.runnerup_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.league_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.winner_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.runnerup_id {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAPassportVoteTeamGuess {
        CMsgDOTAPassportVoteTeamGuess::new()
    }

    fn clear(&mut self) {
        self.league_id = ::std::option::Option::None;
        self.winner_id = ::std::option::Option::None;
        self.runnerup_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAPassportVoteTeamGuess {
        static instance: CMsgDOTAPassportVoteTeamGuess = CMsgDOTAPassportVoteTeamGuess {
            league_id: ::std::option::Option::None,
            winner_id: ::std::option::Option::None,
            runnerup_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTAPassportVoteGenericSelection)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAPassportVoteGenericSelection {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTAPassportVoteGenericSelection.selection_index)
    pub selection_index: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<DOTA_2013PassportSelectionIndices>>,
    // @@protoc_insertion_point(field:CMsgDOTAPassportVoteGenericSelection.selection)
    pub selection: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTAPassportVoteGenericSelection.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAPassportVoteGenericSelection {
    fn default() -> &'a CMsgDOTAPassportVoteGenericSelection {
        <CMsgDOTAPassportVoteGenericSelection as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAPassportVoteGenericSelection {
    pub fn new() -> CMsgDOTAPassportVoteGenericSelection {
        ::std::default::Default::default()
    }

    // optional .DOTA_2013PassportSelectionIndices selection_index = 1;

    pub fn selection_index(&self) -> DOTA_2013PassportSelectionIndices {
        match self.selection_index {
            Some(e) => e.enum_value_or(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_0),
            None => DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_0,
        }
    }

    pub fn clear_selection_index(&mut self) {
        self.selection_index = ::std::option::Option::None;
    }

    pub fn has_selection_index(&self) -> bool {
        self.selection_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_selection_index(&mut self, v: DOTA_2013PassportSelectionIndices) {
        self.selection_index = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint32 selection = 2;

    pub fn selection(&self) -> u32 {
        self.selection.unwrap_or(0)
    }

    pub fn clear_selection(&mut self) {
        self.selection = ::std::option::Option::None;
    }

    pub fn has_selection(&self) -> bool {
        self.selection.is_some()
    }

    // Param is passed by value, moved
    pub fn set_selection(&mut self, v: u32) {
        self.selection = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTAPassportVoteGenericSelection {
    const NAME: &'static str = "CMsgDOTAPassportVoteGenericSelection";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.selection_index = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                16 => {
                    self.selection = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.selection_index {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.selection {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.selection_index {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.selection {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAPassportVoteGenericSelection {
        CMsgDOTAPassportVoteGenericSelection::new()
    }

    fn clear(&mut self) {
        self.selection_index = ::std::option::Option::None;
        self.selection = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAPassportVoteGenericSelection {
        static instance: CMsgDOTAPassportVoteGenericSelection = CMsgDOTAPassportVoteGenericSelection {
            selection_index: ::std::option::Option::None,
            selection: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTAPassportStampedPlayer)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAPassportStampedPlayer {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTAPassportStampedPlayer.steam_id)
    pub steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgDOTAPassportStampedPlayer.stamp_level)
    pub stamp_level: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTAPassportStampedPlayer.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAPassportStampedPlayer {
    fn default() -> &'a CMsgDOTAPassportStampedPlayer {
        <CMsgDOTAPassportStampedPlayer as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAPassportStampedPlayer {
    pub fn new() -> CMsgDOTAPassportStampedPlayer {
        ::std::default::Default::default()
    }

    // optional uint64 steam_id = 1;

    pub fn steam_id(&self) -> u64 {
        self.steam_id.unwrap_or(0)
    }

    pub fn clear_steam_id(&mut self) {
        self.steam_id = ::std::option::Option::None;
    }

    pub fn has_steam_id(&self) -> bool {
        self.steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_id(&mut self, v: u64) {
        self.steam_id = ::std::option::Option::Some(v);
    }

    // optional uint32 stamp_level = 2;

    pub fn stamp_level(&self) -> u32 {
        self.stamp_level.unwrap_or(0)
    }

    pub fn clear_stamp_level(&mut self) {
        self.stamp_level = ::std::option::Option::None;
    }

    pub fn has_stamp_level(&self) -> bool {
        self.stamp_level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stamp_level(&mut self, v: u32) {
        self.stamp_level = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTAPassportStampedPlayer {
    const NAME: &'static str = "CMsgDOTAPassportStampedPlayer";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.steam_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.stamp_level = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steam_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.stamp_level {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.steam_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.stamp_level {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAPassportStampedPlayer {
        CMsgDOTAPassportStampedPlayer::new()
    }

    fn clear(&mut self) {
        self.steam_id = ::std::option::Option::None;
        self.stamp_level = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAPassportStampedPlayer {
        static instance: CMsgDOTAPassportStampedPlayer = CMsgDOTAPassportStampedPlayer {
            steam_id: ::std::option::Option::None,
            stamp_level: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTAPassportPlayerCardChallenge)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAPassportPlayerCardChallenge {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTAPassportPlayerCardChallenge.challenge_id)
    pub challenge_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTAPassportPlayerCardChallenge.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAPassportPlayerCardChallenge {
    fn default() -> &'a CMsgDOTAPassportPlayerCardChallenge {
        <CMsgDOTAPassportPlayerCardChallenge as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAPassportPlayerCardChallenge {
    pub fn new() -> CMsgDOTAPassportPlayerCardChallenge {
        ::std::default::Default::default()
    }

    // optional uint32 challenge_id = 1;

    pub fn challenge_id(&self) -> u32 {
        self.challenge_id.unwrap_or(0)
    }

    pub fn clear_challenge_id(&mut self) {
        self.challenge_id = ::std::option::Option::None;
    }

    pub fn has_challenge_id(&self) -> bool {
        self.challenge_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_challenge_id(&mut self, v: u32) {
        self.challenge_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTAPassportPlayerCardChallenge {
    const NAME: &'static str = "CMsgDOTAPassportPlayerCardChallenge";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.challenge_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.challenge_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.challenge_id {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAPassportPlayerCardChallenge {
        CMsgDOTAPassportPlayerCardChallenge::new()
    }

    fn clear(&mut self) {
        self.challenge_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAPassportPlayerCardChallenge {
        static instance: CMsgDOTAPassportPlayerCardChallenge = CMsgDOTAPassportPlayerCardChallenge {
            challenge_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTAPassportVote)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAPassportVote {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTAPassportVote.team_votes)
    pub team_votes: ::std::vec::Vec<CMsgDOTAPassportVoteTeamGuess>,
    // @@protoc_insertion_point(field:CMsgDOTAPassportVote.generic_selections)
    pub generic_selections: ::std::vec::Vec<CMsgDOTAPassportVoteGenericSelection>,
    // @@protoc_insertion_point(field:CMsgDOTAPassportVote.stamped_players)
    pub stamped_players: ::std::vec::Vec<CMsgDOTAPassportStampedPlayer>,
    // @@protoc_insertion_point(field:CMsgDOTAPassportVote.player_card_challenges)
    pub player_card_challenges: ::std::vec::Vec<CMsgDOTAPassportPlayerCardChallenge>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTAPassportVote.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAPassportVote {
    fn default() -> &'a CMsgDOTAPassportVote {
        <CMsgDOTAPassportVote as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAPassportVote {
    pub fn new() -> CMsgDOTAPassportVote {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTAPassportVote {
    const NAME: &'static str = "CMsgDOTAPassportVote";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.team_votes.push(is.read_message()?);
                },
                18 => {
                    self.generic_selections.push(is.read_message()?);
                },
                26 => {
                    self.stamped_players.push(is.read_message()?);
                },
                34 => {
                    self.player_card_challenges.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.team_votes {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.generic_selections {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.stamped_players {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.player_card_challenges {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.team_votes {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.generic_selections {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.stamped_players {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        for v in &self.player_card_challenges {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAPassportVote {
        CMsgDOTAPassportVote::new()
    }

    fn clear(&mut self) {
        self.team_votes.clear();
        self.generic_selections.clear();
        self.stamped_players.clear();
        self.player_card_challenges.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAPassportVote {
        static instance: CMsgDOTAPassportVote = CMsgDOTAPassportVote {
            team_votes: ::std::vec::Vec::new(),
            generic_selections: ::std::vec::Vec::new(),
            stamped_players: ::std::vec::Vec::new(),
            player_card_challenges: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCGetPlayerCardRosterRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCGetPlayerCardRosterRequest {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCGetPlayerCardRosterRequest.league_id)
    pub league_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientToGCGetPlayerCardRosterRequest.fantasy_period)
    pub fantasy_period: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCGetPlayerCardRosterRequest.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCGetPlayerCardRosterRequest {
    fn default() -> &'a CMsgClientToGCGetPlayerCardRosterRequest {
        <CMsgClientToGCGetPlayerCardRosterRequest as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCGetPlayerCardRosterRequest {
    pub fn new() -> CMsgClientToGCGetPlayerCardRosterRequest {
        ::std::default::Default::default()
    }

    // optional uint32 league_id = 1;

    pub fn league_id(&self) -> u32 {
        self.league_id.unwrap_or(0)
    }

    pub fn clear_league_id(&mut self) {
        self.league_id = ::std::option::Option::None;
    }

    pub fn has_league_id(&self) -> bool {
        self.league_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_league_id(&mut self, v: u32) {
        self.league_id = ::std::option::Option::Some(v);
    }

    // optional uint32 fantasy_period = 3;

    pub fn fantasy_period(&self) -> u32 {
        self.fantasy_period.unwrap_or(4294967295u32)
    }

    pub fn clear_fantasy_period(&mut self) {
        self.fantasy_period = ::std::option::Option::None;
    }

    pub fn has_fantasy_period(&self) -> bool {
        self.fantasy_period.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fantasy_period(&mut self, v: u32) {
        self.fantasy_period = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCGetPlayerCardRosterRequest {
    const NAME: &'static str = "CMsgClientToGCGetPlayerCardRosterRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.league_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.fantasy_period = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.league_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.fantasy_period {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.league_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.fantasy_period {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCGetPlayerCardRosterRequest {
        CMsgClientToGCGetPlayerCardRosterRequest::new()
    }

    fn clear(&mut self) {
        self.league_id = ::std::option::Option::None;
        self.fantasy_period = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCGetPlayerCardRosterRequest {
        static instance: CMsgClientToGCGetPlayerCardRosterRequest = CMsgClientToGCGetPlayerCardRosterRequest {
            league_id: ::std::option::Option::None,
            fantasy_period: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCGetPlayerCardRosterResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCGetPlayerCardRosterResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCGetPlayerCardRosterResponse.result)
    pub result: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_client_to_gcget_player_card_roster_response::Result>>,
    // @@protoc_insertion_point(field:CMsgClientToGCGetPlayerCardRosterResponse.player_card_item_id)
    pub player_card_item_id: ::std::vec::Vec<u64>,
    // @@protoc_insertion_point(field:CMsgClientToGCGetPlayerCardRosterResponse.score)
    pub score: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CMsgClientToGCGetPlayerCardRosterResponse.finalized)
    pub finalized: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgClientToGCGetPlayerCardRosterResponse.percentile)
    pub percentile: ::std::option::Option<f32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCGetPlayerCardRosterResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCGetPlayerCardRosterResponse {
    fn default() -> &'a CMsgClientToGCGetPlayerCardRosterResponse {
        <CMsgClientToGCGetPlayerCardRosterResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCGetPlayerCardRosterResponse {
    pub fn new() -> CMsgClientToGCGetPlayerCardRosterResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgClientToGCGetPlayerCardRosterResponse.Result result = 1;

    pub fn result(&self) -> cmsg_client_to_gcget_player_card_roster_response::Result {
        match self.result {
            Some(e) => e.enum_value_or(cmsg_client_to_gcget_player_card_roster_response::Result::SUCCESS),
            None => cmsg_client_to_gcget_player_card_roster_response::Result::SUCCESS,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: cmsg_client_to_gcget_player_card_roster_response::Result) {
        self.result = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional float score = 3;

    pub fn score(&self) -> f32 {
        self.score.unwrap_or(0.)
    }

    pub fn clear_score(&mut self) {
        self.score = ::std::option::Option::None;
    }

    pub fn has_score(&self) -> bool {
        self.score.is_some()
    }

    // Param is passed by value, moved
    pub fn set_score(&mut self, v: f32) {
        self.score = ::std::option::Option::Some(v);
    }

    // optional bool finalized = 4;

    pub fn finalized(&self) -> bool {
        self.finalized.unwrap_or(false)
    }

    pub fn clear_finalized(&mut self) {
        self.finalized = ::std::option::Option::None;
    }

    pub fn has_finalized(&self) -> bool {
        self.finalized.is_some()
    }

    // Param is passed by value, moved
    pub fn set_finalized(&mut self, v: bool) {
        self.finalized = ::std::option::Option::Some(v);
    }

    // optional float percentile = 5;

    pub fn percentile(&self) -> f32 {
        self.percentile.unwrap_or(0.)
    }

    pub fn clear_percentile(&mut self) {
        self.percentile = ::std::option::Option::None;
    }

    pub fn has_percentile(&self) -> bool {
        self.percentile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_percentile(&mut self, v: f32) {
        self.percentile = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCGetPlayerCardRosterResponse {
    const NAME: &'static str = "CMsgClientToGCGetPlayerCardRosterResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    is.read_repeated_packed_uint64_into(&mut self.player_card_item_id)?;
                },
                16 => {
                    self.player_card_item_id.push(is.read_uint64()?);
                },
                29 => {
                    self.score = ::std::option::Option::Some(is.read_float()?);
                },
                32 => {
                    self.finalized = ::std::option::Option::Some(is.read_bool()?);
                },
                45 => {
                    self.percentile = ::std::option::Option::Some(is.read_float()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        for value in &self.player_card_item_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(2, *value);
        };
        if let Some(v) = self.score {
            my_size += 1 + 4;
        }
        if let Some(v) = self.finalized {
            my_size += 1 + 1;
        }
        if let Some(v) = self.percentile {
            my_size += 1 + 4;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        for v in &self.player_card_item_id {
            os.write_uint64(2, *v)?;
        };
        if let Some(v) = self.score {
            os.write_float(3, v)?;
        }
        if let Some(v) = self.finalized {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.percentile {
            os.write_float(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCGetPlayerCardRosterResponse {
        CMsgClientToGCGetPlayerCardRosterResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.player_card_item_id.clear();
        self.score = ::std::option::Option::None;
        self.finalized = ::std::option::Option::None;
        self.percentile = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCGetPlayerCardRosterResponse {
        static instance: CMsgClientToGCGetPlayerCardRosterResponse = CMsgClientToGCGetPlayerCardRosterResponse {
            result: ::std::option::Option::None,
            player_card_item_id: ::std::vec::Vec::new(),
            score: ::std::option::Option::None,
            finalized: ::std::option::Option::None,
            percentile: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientToGCGetPlayerCardRosterResponse`
pub mod cmsg_client_to_gcget_player_card_roster_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgClientToGCGetPlayerCardRosterResponse.Result)
    pub enum Result {
        // @@protoc_insertion_point(enum_value:CMsgClientToGCGetPlayerCardRosterResponse.Result.SUCCESS)
        SUCCESS = 0,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCGetPlayerCardRosterResponse.Result.ERROR_UNSPECIFIED)
        ERROR_UNSPECIFIED = 1,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCGetPlayerCardRosterResponse.Result.ERROR_INVALID_LEAGUE_ID)
        ERROR_INVALID_LEAGUE_ID = 2,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCGetPlayerCardRosterResponse.Result.ERROR_INVALID_TIMESTAMP)
        ERROR_INVALID_TIMESTAMP = 3,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for Result {
        const NAME: &'static str = "Result";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Result> {
            match value {
                0 => ::std::option::Option::Some(Result::SUCCESS),
                1 => ::std::option::Option::Some(Result::ERROR_UNSPECIFIED),
                2 => ::std::option::Option::Some(Result::ERROR_INVALID_LEAGUE_ID),
                3 => ::std::option::Option::Some(Result::ERROR_INVALID_TIMESTAMP),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Result> {
            match str {
                "SUCCESS" => ::std::option::Option::Some(Result::SUCCESS),
                "ERROR_UNSPECIFIED" => ::std::option::Option::Some(Result::ERROR_UNSPECIFIED),
                "ERROR_INVALID_LEAGUE_ID" => ::std::option::Option::Some(Result::ERROR_INVALID_LEAGUE_ID),
                "ERROR_INVALID_TIMESTAMP" => ::std::option::Option::Some(Result::ERROR_INVALID_TIMESTAMP),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Result] = &[
            Result::SUCCESS,
            Result::ERROR_UNSPECIFIED,
            Result::ERROR_INVALID_LEAGUE_ID,
            Result::ERROR_INVALID_TIMESTAMP,
        ];
    }

    impl ::std::default::Default for Result {
        fn default() -> Self {
            Result::SUCCESS
        }
    }

}

// @@protoc_insertion_point(message:CMsgClientToGCBatchGetPlayerCardRosterRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCBatchGetPlayerCardRosterRequest {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCBatchGetPlayerCardRosterRequest.league_timestamps)
    pub league_timestamps: ::std::vec::Vec<cmsg_client_to_gcbatch_get_player_card_roster_request::LeagueTimestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCBatchGetPlayerCardRosterRequest.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCBatchGetPlayerCardRosterRequest {
    fn default() -> &'a CMsgClientToGCBatchGetPlayerCardRosterRequest {
        <CMsgClientToGCBatchGetPlayerCardRosterRequest as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCBatchGetPlayerCardRosterRequest {
    pub fn new() -> CMsgClientToGCBatchGetPlayerCardRosterRequest {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCBatchGetPlayerCardRosterRequest {
    const NAME: &'static str = "CMsgClientToGCBatchGetPlayerCardRosterRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.league_timestamps.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.league_timestamps {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.league_timestamps {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCBatchGetPlayerCardRosterRequest {
        CMsgClientToGCBatchGetPlayerCardRosterRequest::new()
    }

    fn clear(&mut self) {
        self.league_timestamps.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCBatchGetPlayerCardRosterRequest {
        static instance: CMsgClientToGCBatchGetPlayerCardRosterRequest = CMsgClientToGCBatchGetPlayerCardRosterRequest {
            league_timestamps: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientToGCBatchGetPlayerCardRosterRequest`
pub mod cmsg_client_to_gcbatch_get_player_card_roster_request {
    // @@protoc_insertion_point(message:CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct LeagueTimestamp {
        // message fields
        // @@protoc_insertion_point(field:CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp.league_id)
        pub league_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp.fantasy_period)
        pub fantasy_period: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a LeagueTimestamp {
        fn default() -> &'a LeagueTimestamp {
            <LeagueTimestamp as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl LeagueTimestamp {
        pub fn new() -> LeagueTimestamp {
            ::std::default::Default::default()
        }

        // optional uint32 league_id = 1;

        pub fn league_id(&self) -> u32 {
            self.league_id.unwrap_or(0)
        }

        pub fn clear_league_id(&mut self) {
            self.league_id = ::std::option::Option::None;
        }

        pub fn has_league_id(&self) -> bool {
            self.league_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_league_id(&mut self, v: u32) {
            self.league_id = ::std::option::Option::Some(v);
        }

        // optional uint32 fantasy_period = 3;

        pub fn fantasy_period(&self) -> u32 {
            self.fantasy_period.unwrap_or(4294967295u32)
        }

        pub fn clear_fantasy_period(&mut self) {
            self.fantasy_period = ::std::option::Option::None;
        }

        pub fn has_fantasy_period(&self) -> bool {
            self.fantasy_period.is_some()
        }

        // Param is passed by value, moved
        pub fn set_fantasy_period(&mut self, v: u32) {
            self.fantasy_period = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for LeagueTimestamp {
        const NAME: &'static str = "LeagueTimestamp";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.league_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.fantasy_period = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.league_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.fantasy_period {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.league_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.fantasy_period {
                os.write_uint32(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> LeagueTimestamp {
            LeagueTimestamp::new()
        }

        fn clear(&mut self) {
            self.league_id = ::std::option::Option::None;
            self.fantasy_period = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static LeagueTimestamp {
            static instance: LeagueTimestamp = LeagueTimestamp {
                league_id: ::std::option::Option::None,
                fantasy_period: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCBatchGetPlayerCardRosterResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCBatchGetPlayerCardRosterResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCBatchGetPlayerCardRosterResponse.responses)
    pub responses: ::std::vec::Vec<cmsg_client_to_gcbatch_get_player_card_roster_response::RosterResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCBatchGetPlayerCardRosterResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCBatchGetPlayerCardRosterResponse {
    fn default() -> &'a CMsgClientToGCBatchGetPlayerCardRosterResponse {
        <CMsgClientToGCBatchGetPlayerCardRosterResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCBatchGetPlayerCardRosterResponse {
    pub fn new() -> CMsgClientToGCBatchGetPlayerCardRosterResponse {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCBatchGetPlayerCardRosterResponse {
    const NAME: &'static str = "CMsgClientToGCBatchGetPlayerCardRosterResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.responses.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.responses {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.responses {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCBatchGetPlayerCardRosterResponse {
        CMsgClientToGCBatchGetPlayerCardRosterResponse::new()
    }

    fn clear(&mut self) {
        self.responses.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCBatchGetPlayerCardRosterResponse {
        static instance: CMsgClientToGCBatchGetPlayerCardRosterResponse = CMsgClientToGCBatchGetPlayerCardRosterResponse {
            responses: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientToGCBatchGetPlayerCardRosterResponse`
pub mod cmsg_client_to_gcbatch_get_player_card_roster_response {
    // @@protoc_insertion_point(message:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct RosterResponse {
        // message fields
        // @@protoc_insertion_point(field:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.league_id)
        pub league_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.deprecated_timestamp)
        pub deprecated_timestamp: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.result)
        pub result: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<Result>>,
        // @@protoc_insertion_point(field:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.player_card_item_id)
        pub player_card_item_id: ::std::vec::Vec<u64>,
        // @@protoc_insertion_point(field:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.score)
        pub score: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.finalized)
        pub finalized: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.percentile)
        pub percentile: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.fantasy_period)
        pub fantasy_period: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a RosterResponse {
        fn default() -> &'a RosterResponse {
            <RosterResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl RosterResponse {
        pub fn new() -> RosterResponse {
            ::std::default::Default::default()
        }

        // optional uint32 league_id = 1;

        pub fn league_id(&self) -> u32 {
            self.league_id.unwrap_or(0)
        }

        pub fn clear_league_id(&mut self) {
            self.league_id = ::std::option::Option::None;
        }

        pub fn has_league_id(&self) -> bool {
            self.league_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_league_id(&mut self, v: u32) {
            self.league_id = ::std::option::Option::Some(v);
        }

        // optional uint32 deprecated_timestamp = 2;

        pub fn deprecated_timestamp(&self) -> u32 {
            self.deprecated_timestamp.unwrap_or(0)
        }

        pub fn clear_deprecated_timestamp(&mut self) {
            self.deprecated_timestamp = ::std::option::Option::None;
        }

        pub fn has_deprecated_timestamp(&self) -> bool {
            self.deprecated_timestamp.is_some()
        }

        // Param is passed by value, moved
        pub fn set_deprecated_timestamp(&mut self, v: u32) {
            self.deprecated_timestamp = ::std::option::Option::Some(v);
        }

        // optional .CMsgClientToGCBatchGetPlayerCardRosterResponse.Result result = 3;

        pub fn result(&self) -> Result {
            match self.result {
                Some(e) => e.enum_value_or(Result::SUCCESS),
                None => Result::SUCCESS,
            }
        }

        pub fn clear_result(&mut self) {
            self.result = ::std::option::Option::None;
        }

        pub fn has_result(&self) -> bool {
            self.result.is_some()
        }

        // Param is passed by value, moved
        pub fn set_result(&mut self, v: Result) {
            self.result = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
        }

        // optional float score = 5;

        pub fn score(&self) -> f32 {
            self.score.unwrap_or(0.)
        }

        pub fn clear_score(&mut self) {
            self.score = ::std::option::Option::None;
        }

        pub fn has_score(&self) -> bool {
            self.score.is_some()
        }

        // Param is passed by value, moved
        pub fn set_score(&mut self, v: f32) {
            self.score = ::std::option::Option::Some(v);
        }

        // optional bool finalized = 6;

        pub fn finalized(&self) -> bool {
            self.finalized.unwrap_or(false)
        }

        pub fn clear_finalized(&mut self) {
            self.finalized = ::std::option::Option::None;
        }

        pub fn has_finalized(&self) -> bool {
            self.finalized.is_some()
        }

        // Param is passed by value, moved
        pub fn set_finalized(&mut self, v: bool) {
            self.finalized = ::std::option::Option::Some(v);
        }

        // optional float percentile = 7;

        pub fn percentile(&self) -> f32 {
            self.percentile.unwrap_or(0.)
        }

        pub fn clear_percentile(&mut self) {
            self.percentile = ::std::option::Option::None;
        }

        pub fn has_percentile(&self) -> bool {
            self.percentile.is_some()
        }

        // Param is passed by value, moved
        pub fn set_percentile(&mut self, v: f32) {
            self.percentile = ::std::option::Option::Some(v);
        }

        // optional uint32 fantasy_period = 8;

        pub fn fantasy_period(&self) -> u32 {
            self.fantasy_period.unwrap_or(4294967295u32)
        }

        pub fn clear_fantasy_period(&mut self) {
            self.fantasy_period = ::std::option::Option::None;
        }

        pub fn has_fantasy_period(&self) -> bool {
            self.fantasy_period.is_some()
        }

        // Param is passed by value, moved
        pub fn set_fantasy_period(&mut self, v: u32) {
            self.fantasy_period = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for RosterResponse {
        const NAME: &'static str = "RosterResponse";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.league_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.deprecated_timestamp = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    34 => {
                        is.read_repeated_packed_uint64_into(&mut self.player_card_item_id)?;
                    },
                    32 => {
                        self.player_card_item_id.push(is.read_uint64()?);
                    },
                    45 => {
                        self.score = ::std::option::Option::Some(is.read_float()?);
                    },
                    48 => {
                        self.finalized = ::std::option::Option::Some(is.read_bool()?);
                    },
                    61 => {
                        self.percentile = ::std::option::Option::Some(is.read_float()?);
                    },
                    64 => {
                        self.fantasy_period = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.league_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.deprecated_timestamp {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.result {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(3, v.value());
            }
            for value in &self.player_card_item_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(4, *value);
            };
            if let Some(v) = self.score {
                my_size += 1 + 4;
            }
            if let Some(v) = self.finalized {
                my_size += 1 + 1;
            }
            if let Some(v) = self.percentile {
                my_size += 1 + 4;
            }
            if let Some(v) = self.fantasy_period {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(8, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.league_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.deprecated_timestamp {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.result {
                os.write_enum(3, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
            }
            for v in &self.player_card_item_id {
                os.write_uint64(4, *v)?;
            };
            if let Some(v) = self.score {
                os.write_float(5, v)?;
            }
            if let Some(v) = self.finalized {
                os.write_bool(6, v)?;
            }
            if let Some(v) = self.percentile {
                os.write_float(7, v)?;
            }
            if let Some(v) = self.fantasy_period {
                os.write_uint32(8, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> RosterResponse {
            RosterResponse::new()
        }

        fn clear(&mut self) {
            self.league_id = ::std::option::Option::None;
            self.deprecated_timestamp = ::std::option::Option::None;
            self.result = ::std::option::Option::None;
            self.player_card_item_id.clear();
            self.score = ::std::option::Option::None;
            self.finalized = ::std::option::Option::None;
            self.percentile = ::std::option::Option::None;
            self.fantasy_period = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static RosterResponse {
            static instance: RosterResponse = RosterResponse {
                league_id: ::std::option::Option::None,
                deprecated_timestamp: ::std::option::Option::None,
                result: ::std::option::Option::None,
                player_card_item_id: ::std::vec::Vec::new(),
                score: ::std::option::Option::None,
                finalized: ::std::option::Option::None,
                percentile: ::std::option::Option::None,
                fantasy_period: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgClientToGCBatchGetPlayerCardRosterResponse.Result)
    pub enum Result {
        // @@protoc_insertion_point(enum_value:CMsgClientToGCBatchGetPlayerCardRosterResponse.Result.SUCCESS)
        SUCCESS = 0,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCBatchGetPlayerCardRosterResponse.Result.ERROR_UNSPECIFIED)
        ERROR_UNSPECIFIED = 1,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCBatchGetPlayerCardRosterResponse.Result.ERROR_INVALID_LEAGUE_ID)
        ERROR_INVALID_LEAGUE_ID = 2,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCBatchGetPlayerCardRosterResponse.Result.ERROR_INVALID_TIMESTAMP)
        ERROR_INVALID_TIMESTAMP = 3,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for Result {
        const NAME: &'static str = "Result";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Result> {
            match value {
                0 => ::std::option::Option::Some(Result::SUCCESS),
                1 => ::std::option::Option::Some(Result::ERROR_UNSPECIFIED),
                2 => ::std::option::Option::Some(Result::ERROR_INVALID_LEAGUE_ID),
                3 => ::std::option::Option::Some(Result::ERROR_INVALID_TIMESTAMP),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Result> {
            match str {
                "SUCCESS" => ::std::option::Option::Some(Result::SUCCESS),
                "ERROR_UNSPECIFIED" => ::std::option::Option::Some(Result::ERROR_UNSPECIFIED),
                "ERROR_INVALID_LEAGUE_ID" => ::std::option::Option::Some(Result::ERROR_INVALID_LEAGUE_ID),
                "ERROR_INVALID_TIMESTAMP" => ::std::option::Option::Some(Result::ERROR_INVALID_TIMESTAMP),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Result] = &[
            Result::SUCCESS,
            Result::ERROR_UNSPECIFIED,
            Result::ERROR_INVALID_LEAGUE_ID,
            Result::ERROR_INVALID_TIMESTAMP,
        ];
    }

    impl ::std::default::Default for Result {
        fn default() -> Self {
            Result::SUCCESS
        }
    }

}

// @@protoc_insertion_point(message:CMsgClientToGCSetPlayerCardRosterRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCSetPlayerCardRosterRequest {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCSetPlayerCardRosterRequest.league_id)
    pub league_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientToGCSetPlayerCardRosterRequest.deprecated_timestamp)
    pub deprecated_timestamp: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientToGCSetPlayerCardRosterRequest.slot)
    pub slot: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientToGCSetPlayerCardRosterRequest.player_card_item_id)
    pub player_card_item_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgClientToGCSetPlayerCardRosterRequest.event_id)
    pub event_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientToGCSetPlayerCardRosterRequest.fantasy_period)
    pub fantasy_period: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCSetPlayerCardRosterRequest.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCSetPlayerCardRosterRequest {
    fn default() -> &'a CMsgClientToGCSetPlayerCardRosterRequest {
        <CMsgClientToGCSetPlayerCardRosterRequest as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCSetPlayerCardRosterRequest {
    pub fn new() -> CMsgClientToGCSetPlayerCardRosterRequest {
        ::std::default::Default::default()
    }

    // optional uint32 league_id = 1;

    pub fn league_id(&self) -> u32 {
        self.league_id.unwrap_or(0)
    }

    pub fn clear_league_id(&mut self) {
        self.league_id = ::std::option::Option::None;
    }

    pub fn has_league_id(&self) -> bool {
        self.league_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_league_id(&mut self, v: u32) {
        self.league_id = ::std::option::Option::Some(v);
    }

    // optional uint32 deprecated_timestamp = 2;

    pub fn deprecated_timestamp(&self) -> u32 {
        self.deprecated_timestamp.unwrap_or(0)
    }

    pub fn clear_deprecated_timestamp(&mut self) {
        self.deprecated_timestamp = ::std::option::Option::None;
    }

    pub fn has_deprecated_timestamp(&self) -> bool {
        self.deprecated_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deprecated_timestamp(&mut self, v: u32) {
        self.deprecated_timestamp = ::std::option::Option::Some(v);
    }

    // optional uint32 slot = 3;

    pub fn slot(&self) -> u32 {
        self.slot.unwrap_or(0)
    }

    pub fn clear_slot(&mut self) {
        self.slot = ::std::option::Option::None;
    }

    pub fn has_slot(&self) -> bool {
        self.slot.is_some()
    }

    // Param is passed by value, moved
    pub fn set_slot(&mut self, v: u32) {
        self.slot = ::std::option::Option::Some(v);
    }

    // optional uint64 player_card_item_id = 4;

    pub fn player_card_item_id(&self) -> u64 {
        self.player_card_item_id.unwrap_or(0)
    }

    pub fn clear_player_card_item_id(&mut self) {
        self.player_card_item_id = ::std::option::Option::None;
    }

    pub fn has_player_card_item_id(&self) -> bool {
        self.player_card_item_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_player_card_item_id(&mut self, v: u64) {
        self.player_card_item_id = ::std::option::Option::Some(v);
    }

    // optional uint32 event_id = 5;

    pub fn event_id(&self) -> u32 {
        self.event_id.unwrap_or(0)
    }

    pub fn clear_event_id(&mut self) {
        self.event_id = ::std::option::Option::None;
    }

    pub fn has_event_id(&self) -> bool {
        self.event_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_event_id(&mut self, v: u32) {
        self.event_id = ::std::option::Option::Some(v);
    }

    // optional uint32 fantasy_period = 6;

    pub fn fantasy_period(&self) -> u32 {
        self.fantasy_period.unwrap_or(4294967295u32)
    }

    pub fn clear_fantasy_period(&mut self) {
        self.fantasy_period = ::std::option::Option::None;
    }

    pub fn has_fantasy_period(&self) -> bool {
        self.fantasy_period.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fantasy_period(&mut self, v: u32) {
        self.fantasy_period = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCSetPlayerCardRosterRequest {
    const NAME: &'static str = "CMsgClientToGCSetPlayerCardRosterRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.league_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.deprecated_timestamp = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.slot = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.player_card_item_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                40 => {
                    self.event_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.fantasy_period = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.league_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.deprecated_timestamp {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.slot {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.player_card_item_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(4, v);
        }
        if let Some(v) = self.event_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.fantasy_period {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(6, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.league_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.deprecated_timestamp {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.slot {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.player_card_item_id {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.event_id {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.fantasy_period {
            os.write_uint32(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCSetPlayerCardRosterRequest {
        CMsgClientToGCSetPlayerCardRosterRequest::new()
    }

    fn clear(&mut self) {
        self.league_id = ::std::option::Option::None;
        self.deprecated_timestamp = ::std::option::Option::None;
        self.slot = ::std::option::Option::None;
        self.player_card_item_id = ::std::option::Option::None;
        self.event_id = ::std::option::Option::None;
        self.fantasy_period = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCSetPlayerCardRosterRequest {
        static instance: CMsgClientToGCSetPlayerCardRosterRequest = CMsgClientToGCSetPlayerCardRosterRequest {
            league_id: ::std::option::Option::None,
            deprecated_timestamp: ::std::option::Option::None,
            slot: ::std::option::Option::None,
            player_card_item_id: ::std::option::Option::None,
            event_id: ::std::option::Option::None,
            fantasy_period: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCSetPlayerCardRosterResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCSetPlayerCardRosterResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCSetPlayerCardRosterResponse.result)
    pub result: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_client_to_gcset_player_card_roster_response::Result>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCSetPlayerCardRosterResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCSetPlayerCardRosterResponse {
    fn default() -> &'a CMsgClientToGCSetPlayerCardRosterResponse {
        <CMsgClientToGCSetPlayerCardRosterResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCSetPlayerCardRosterResponse {
    pub fn new() -> CMsgClientToGCSetPlayerCardRosterResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgClientToGCSetPlayerCardRosterResponse.Result result = 1;

    pub fn result(&self) -> cmsg_client_to_gcset_player_card_roster_response::Result {
        match self.result {
            Some(e) => e.enum_value_or(cmsg_client_to_gcset_player_card_roster_response::Result::SUCCESS),
            None => cmsg_client_to_gcset_player_card_roster_response::Result::SUCCESS,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: cmsg_client_to_gcset_player_card_roster_response::Result) {
        self.result = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCSetPlayerCardRosterResponse {
    const NAME: &'static str = "CMsgClientToGCSetPlayerCardRosterResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCSetPlayerCardRosterResponse {
        CMsgClientToGCSetPlayerCardRosterResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCSetPlayerCardRosterResponse {
        static instance: CMsgClientToGCSetPlayerCardRosterResponse = CMsgClientToGCSetPlayerCardRosterResponse {
            result: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientToGCSetPlayerCardRosterResponse`
pub mod cmsg_client_to_gcset_player_card_roster_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgClientToGCSetPlayerCardRosterResponse.Result)
    pub enum Result {
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSetPlayerCardRosterResponse.Result.SUCCESS)
        SUCCESS = 0,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSetPlayerCardRosterResponse.Result.ERROR_UNSPECIFIED)
        ERROR_UNSPECIFIED = 1,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSetPlayerCardRosterResponse.Result.ERROR_INVALID_LEAGUE_ID)
        ERROR_INVALID_LEAGUE_ID = 2,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSetPlayerCardRosterResponse.Result.ERROR_INVALID_TIMESTAMP)
        ERROR_INVALID_TIMESTAMP = 3,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSetPlayerCardRosterResponse.Result.ERROR_PLAYER_CARD_NOT_OWNED)
        ERROR_PLAYER_CARD_NOT_OWNED = 4,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSetPlayerCardRosterResponse.Result.ERROR_INVALID_SLOT)
        ERROR_INVALID_SLOT = 5,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSetPlayerCardRosterResponse.Result.ERROR_FAILED_CARD_INFO)
        ERROR_FAILED_CARD_INFO = 6,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSetPlayerCardRosterResponse.Result.ERROR_ACCOUNT_DUPLICATE)
        ERROR_ACCOUNT_DUPLICATE = 7,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSetPlayerCardRosterResponse.Result.ERROR_LOCKED_TIMESTAMP)
        ERROR_LOCKED_TIMESTAMP = 8,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSetPlayerCardRosterResponse.Result.ERROR_INVALID_LEAGUE_FOR_PERIOD)
        ERROR_INVALID_LEAGUE_FOR_PERIOD = 9,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSetPlayerCardRosterResponse.Result.ERROR_INVALID_EVENT)
        ERROR_INVALID_EVENT = 10,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for Result {
        const NAME: &'static str = "Result";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Result> {
            match value {
                0 => ::std::option::Option::Some(Result::SUCCESS),
                1 => ::std::option::Option::Some(Result::ERROR_UNSPECIFIED),
                2 => ::std::option::Option::Some(Result::ERROR_INVALID_LEAGUE_ID),
                3 => ::std::option::Option::Some(Result::ERROR_INVALID_TIMESTAMP),
                4 => ::std::option::Option::Some(Result::ERROR_PLAYER_CARD_NOT_OWNED),
                5 => ::std::option::Option::Some(Result::ERROR_INVALID_SLOT),
                6 => ::std::option::Option::Some(Result::ERROR_FAILED_CARD_INFO),
                7 => ::std::option::Option::Some(Result::ERROR_ACCOUNT_DUPLICATE),
                8 => ::std::option::Option::Some(Result::ERROR_LOCKED_TIMESTAMP),
                9 => ::std::option::Option::Some(Result::ERROR_INVALID_LEAGUE_FOR_PERIOD),
                10 => ::std::option::Option::Some(Result::ERROR_INVALID_EVENT),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Result> {
            match str {
                "SUCCESS" => ::std::option::Option::Some(Result::SUCCESS),
                "ERROR_UNSPECIFIED" => ::std::option::Option::Some(Result::ERROR_UNSPECIFIED),
                "ERROR_INVALID_LEAGUE_ID" => ::std::option::Option::Some(Result::ERROR_INVALID_LEAGUE_ID),
                "ERROR_INVALID_TIMESTAMP" => ::std::option::Option::Some(Result::ERROR_INVALID_TIMESTAMP),
                "ERROR_PLAYER_CARD_NOT_OWNED" => ::std::option::Option::Some(Result::ERROR_PLAYER_CARD_NOT_OWNED),
                "ERROR_INVALID_SLOT" => ::std::option::Option::Some(Result::ERROR_INVALID_SLOT),
                "ERROR_FAILED_CARD_INFO" => ::std::option::Option::Some(Result::ERROR_FAILED_CARD_INFO),
                "ERROR_ACCOUNT_DUPLICATE" => ::std::option::Option::Some(Result::ERROR_ACCOUNT_DUPLICATE),
                "ERROR_LOCKED_TIMESTAMP" => ::std::option::Option::Some(Result::ERROR_LOCKED_TIMESTAMP),
                "ERROR_INVALID_LEAGUE_FOR_PERIOD" => ::std::option::Option::Some(Result::ERROR_INVALID_LEAGUE_FOR_PERIOD),
                "ERROR_INVALID_EVENT" => ::std::option::Option::Some(Result::ERROR_INVALID_EVENT),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Result] = &[
            Result::SUCCESS,
            Result::ERROR_UNSPECIFIED,
            Result::ERROR_INVALID_LEAGUE_ID,
            Result::ERROR_INVALID_TIMESTAMP,
            Result::ERROR_PLAYER_CARD_NOT_OWNED,
            Result::ERROR_INVALID_SLOT,
            Result::ERROR_FAILED_CARD_INFO,
            Result::ERROR_ACCOUNT_DUPLICATE,
            Result::ERROR_LOCKED_TIMESTAMP,
            Result::ERROR_INVALID_LEAGUE_FOR_PERIOD,
            Result::ERROR_INVALID_EVENT,
        ];
    }

    impl ::std::default::Default for Result {
        fn default() -> Self {
            Result::SUCCESS
        }
    }

}

// @@protoc_insertion_point(message:CMsgDOTAFantasyDPCLeagueStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAFantasyDPCLeagueStatus {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTAFantasyDPCLeagueStatus.league_infos)
    pub league_infos: ::std::vec::Vec<cmsg_dotafantasy_dpcleague_status::LeagueInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTAFantasyDPCLeagueStatus.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAFantasyDPCLeagueStatus {
    fn default() -> &'a CMsgDOTAFantasyDPCLeagueStatus {
        <CMsgDOTAFantasyDPCLeagueStatus as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAFantasyDPCLeagueStatus {
    pub fn new() -> CMsgDOTAFantasyDPCLeagueStatus {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTAFantasyDPCLeagueStatus {
    const NAME: &'static str = "CMsgDOTAFantasyDPCLeagueStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.league_infos.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.league_infos {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.league_infos {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAFantasyDPCLeagueStatus {
        CMsgDOTAFantasyDPCLeagueStatus::new()
    }

    fn clear(&mut self) {
        self.league_infos.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAFantasyDPCLeagueStatus {
        static instance: CMsgDOTAFantasyDPCLeagueStatus = CMsgDOTAFantasyDPCLeagueStatus {
            league_infos: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgDOTAFantasyDPCLeagueStatus`
pub mod cmsg_dotafantasy_dpcleague_status {
    // @@protoc_insertion_point(message:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct LeagueInfo {
        // message fields
        // @@protoc_insertion_point(field:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.league_id)
        pub league_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.league_name)
        pub league_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.start_timestamp)
        pub start_timestamp: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.end_timestamp)
        pub end_timestamp: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.day_timestamps)
        pub day_timestamps: ::std::vec::Vec<u32>,
        // @@protoc_insertion_point(field:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.status)
        pub status: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<ERosterStatus>>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a LeagueInfo {
        fn default() -> &'a LeagueInfo {
            <LeagueInfo as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl LeagueInfo {
        pub fn new() -> LeagueInfo {
            ::std::default::Default::default()
        }

        // optional uint32 league_id = 1;

        pub fn league_id(&self) -> u32 {
            self.league_id.unwrap_or(0)
        }

        pub fn clear_league_id(&mut self) {
            self.league_id = ::std::option::Option::None;
        }

        pub fn has_league_id(&self) -> bool {
            self.league_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_league_id(&mut self, v: u32) {
            self.league_id = ::std::option::Option::Some(v);
        }

        // optional string league_name = 2;

        pub fn league_name(&self) -> &str {
            match self.league_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_league_name(&mut self) {
            self.league_name = ::std::option::Option::None;
        }

        pub fn has_league_name(&self) -> bool {
            self.league_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_league_name(&mut self, v: ::std::string::String) {
            self.league_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_league_name(&mut self) -> &mut ::std::string::String {
            if self.league_name.is_none() {
                self.league_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.league_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_league_name(&mut self) -> ::std::string::String {
            self.league_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional uint32 start_timestamp = 3;

        pub fn start_timestamp(&self) -> u32 {
            self.start_timestamp.unwrap_or(0)
        }

        pub fn clear_start_timestamp(&mut self) {
            self.start_timestamp = ::std::option::Option::None;
        }

        pub fn has_start_timestamp(&self) -> bool {
            self.start_timestamp.is_some()
        }

        // Param is passed by value, moved
        pub fn set_start_timestamp(&mut self, v: u32) {
            self.start_timestamp = ::std::option::Option::Some(v);
        }

        // optional uint32 end_timestamp = 4;

        pub fn end_timestamp(&self) -> u32 {
            self.end_timestamp.unwrap_or(0)
        }

        pub fn clear_end_timestamp(&mut self) {
            self.end_timestamp = ::std::option::Option::None;
        }

        pub fn has_end_timestamp(&self) -> bool {
            self.end_timestamp.is_some()
        }

        // Param is passed by value, moved
        pub fn set_end_timestamp(&mut self, v: u32) {
            self.end_timestamp = ::std::option::Option::Some(v);
        }

        // optional .CMsgDOTAFantasyDPCLeagueStatus.ERosterStatus status = 8;

        pub fn status(&self) -> ERosterStatus {
            match self.status {
                Some(e) => e.enum_value_or(ERosterStatus::UNSET),
                None => ERosterStatus::UNSET,
            }
        }

        pub fn clear_status(&mut self) {
            self.status = ::std::option::Option::None;
        }

        pub fn has_status(&self) -> bool {
            self.status.is_some()
        }

        // Param is passed by value, moved
        pub fn set_status(&mut self, v: ERosterStatus) {
            self.status = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for LeagueInfo {
        const NAME: &'static str = "LeagueInfo";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.league_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        self.league_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    24 => {
                        self.start_timestamp = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.end_timestamp = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    42 => {
                        is.read_repeated_packed_uint32_into(&mut self.day_timestamps)?;
                    },
                    40 => {
                        self.day_timestamps.push(is.read_uint32()?);
                    },
                    64 => {
                        self.status = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.league_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.league_name.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
            }
            if let Some(v) = self.start_timestamp {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.end_timestamp {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
            }
            for value in &self.day_timestamps {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, *value);
            };
            if let Some(v) = self.status {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(8, v.value());
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.league_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.league_name.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.start_timestamp {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.end_timestamp {
                os.write_uint32(4, v)?;
            }
            for v in &self.day_timestamps {
                os.write_uint32(5, *v)?;
            };
            if let Some(v) = self.status {
                os.write_enum(8, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> LeagueInfo {
            LeagueInfo::new()
        }

        fn clear(&mut self) {
            self.league_id = ::std::option::Option::None;
            self.league_name = ::std::option::Option::None;
            self.start_timestamp = ::std::option::Option::None;
            self.end_timestamp = ::std::option::Option::None;
            self.day_timestamps.clear();
            self.status = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static LeagueInfo {
            static instance: LeagueInfo = LeagueInfo {
                league_id: ::std::option::Option::None,
                league_name: ::std::option::Option::None,
                start_timestamp: ::std::option::Option::None,
                end_timestamp: ::std::option::Option::None,
                day_timestamps: ::std::vec::Vec::new(),
                status: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgDOTAFantasyDPCLeagueStatus.ERosterStatus)
    pub enum ERosterStatus {
        // @@protoc_insertion_point(enum_value:CMsgDOTAFantasyDPCLeagueStatus.ERosterStatus.UNSET)
        UNSET = 0,
        // @@protoc_insertion_point(enum_value:CMsgDOTAFantasyDPCLeagueStatus.ERosterStatus.PARTIAL)
        PARTIAL = 1,
        // @@protoc_insertion_point(enum_value:CMsgDOTAFantasyDPCLeagueStatus.ERosterStatus.FULL)
        FULL = 2,
        // @@protoc_insertion_point(enum_value:CMsgDOTAFantasyDPCLeagueStatus.ERosterStatus.CONCLUDED)
        CONCLUDED = 3,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for ERosterStatus {
        const NAME: &'static str = "ERosterStatus";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<ERosterStatus> {
            match value {
                0 => ::std::option::Option::Some(ERosterStatus::UNSET),
                1 => ::std::option::Option::Some(ERosterStatus::PARTIAL),
                2 => ::std::option::Option::Some(ERosterStatus::FULL),
                3 => ::std::option::Option::Some(ERosterStatus::CONCLUDED),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<ERosterStatus> {
            match str {
                "UNSET" => ::std::option::Option::Some(ERosterStatus::UNSET),
                "PARTIAL" => ::std::option::Option::Some(ERosterStatus::PARTIAL),
                "FULL" => ::std::option::Option::Some(ERosterStatus::FULL),
                "CONCLUDED" => ::std::option::Option::Some(ERosterStatus::CONCLUDED),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [ERosterStatus] = &[
            ERosterStatus::UNSET,
            ERosterStatus::PARTIAL,
            ERosterStatus::FULL,
            ERosterStatus::CONCLUDED,
        ];
    }

    impl ::std::default::Default for ERosterStatus {
        fn default() -> Self {
            ERosterStatus::UNSET
        }
    }

}

// @@protoc_insertion_point(message:CMsgDOTADPCSearchResults)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTADPCSearchResults {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTADPCSearchResults.players)
    pub players: ::std::vec::Vec<cmsg_dotadpcsearch_results::Player>,
    // @@protoc_insertion_point(field:CMsgDOTADPCSearchResults.teams)
    pub teams: ::std::vec::Vec<cmsg_dotadpcsearch_results::Team>,
    // @@protoc_insertion_point(field:CMsgDOTADPCSearchResults.leagues)
    pub leagues: ::std::vec::Vec<cmsg_dotadpcsearch_results::League>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTADPCSearchResults.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTADPCSearchResults {
    fn default() -> &'a CMsgDOTADPCSearchResults {
        <CMsgDOTADPCSearchResults as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTADPCSearchResults {
    pub fn new() -> CMsgDOTADPCSearchResults {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTADPCSearchResults {
    const NAME: &'static str = "CMsgDOTADPCSearchResults";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.players.push(is.read_message()?);
                },
                18 => {
                    self.teams.push(is.read_message()?);
                },
                26 => {
                    self.leagues.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.players {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.teams {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.leagues {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.players {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.teams {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.leagues {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTADPCSearchResults {
        CMsgDOTADPCSearchResults::new()
    }

    fn clear(&mut self) {
        self.players.clear();
        self.teams.clear();
        self.leagues.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTADPCSearchResults {
        static instance: CMsgDOTADPCSearchResults = CMsgDOTADPCSearchResults {
            players: ::std::vec::Vec::new(),
            teams: ::std::vec::Vec::new(),
            leagues: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgDOTADPCSearchResults`
pub mod cmsg_dotadpcsearch_results {
    // @@protoc_insertion_point(message:CMsgDOTADPCSearchResults.Player)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Player {
        // message fields
        // @@protoc_insertion_point(field:CMsgDOTADPCSearchResults.Player.id)
        pub id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTADPCSearchResults.Player.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgDOTADPCSearchResults.Player.real_name)
        pub real_name: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDOTADPCSearchResults.Player.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Player {
        fn default() -> &'a Player {
            <Player as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl Player {
        pub fn new() -> Player {
            ::std::default::Default::default()
        }

        // optional uint32 id = 1;

        pub fn id(&self) -> u32 {
            self.id.unwrap_or(0)
        }

        pub fn clear_id(&mut self) {
            self.id = ::std::option::Option::None;
        }

        pub fn has_id(&self) -> bool {
            self.id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_id(&mut self, v: u32) {
            self.id = ::std::option::Option::Some(v);
        }

        // optional string name = 2;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string real_name = 3;

        pub fn real_name(&self) -> &str {
            match self.real_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_real_name(&mut self) {
            self.real_name = ::std::option::Option::None;
        }

        pub fn has_real_name(&self) -> bool {
            self.real_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_real_name(&mut self, v: ::std::string::String) {
            self.real_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_real_name(&mut self) -> &mut ::std::string::String {
            if self.real_name.is_none() {
                self.real_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.real_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_real_name(&mut self) -> ::std::string::String {
            self.real_name.take().unwrap_or_else(|| ::std::string::String::new())
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for Player {
        const NAME: &'static str = "Player";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    26 => {
                        self.real_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.name.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
            }
            if let Some(v) = self.real_name.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(3, &v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.name.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.real_name.as_ref() {
                os.write_string(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Player {
            Player::new()
        }

        fn clear(&mut self) {
            self.id = ::std::option::Option::None;
            self.name = ::std::option::Option::None;
            self.real_name = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Player {
            static instance: Player = Player {
                id: ::std::option::Option::None,
                name: ::std::option::Option::None,
                real_name: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgDOTADPCSearchResults.Team)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Team {
        // message fields
        // @@protoc_insertion_point(field:CMsgDOTADPCSearchResults.Team.id)
        pub id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTADPCSearchResults.Team.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgDOTADPCSearchResults.Team.url)
        pub url: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDOTADPCSearchResults.Team.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Team {
        fn default() -> &'a Team {
            <Team as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl Team {
        pub fn new() -> Team {
            ::std::default::Default::default()
        }

        // optional uint32 id = 1;

        pub fn id(&self) -> u32 {
            self.id.unwrap_or(0)
        }

        pub fn clear_id(&mut self) {
            self.id = ::std::option::Option::None;
        }

        pub fn has_id(&self) -> bool {
            self.id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_id(&mut self, v: u32) {
            self.id = ::std::option::Option::Some(v);
        }

        // optional string name = 2;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string url = 3;

        pub fn url(&self) -> &str {
            match self.url.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_url(&mut self) {
            self.url = ::std::option::Option::None;
        }

        pub fn has_url(&self) -> bool {
            self.url.is_some()
        }

        // Param is passed by value, moved
        pub fn set_url(&mut self, v: ::std::string::String) {
            self.url = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_url(&mut self) -> &mut ::std::string::String {
            if self.url.is_none() {
                self.url = ::std::option::Option::Some(::std::string::String::new());
            }
            self.url.as_mut().unwrap()
        }

        // Take field
        pub fn take_url(&mut self) -> ::std::string::String {
            self.url.take().unwrap_or_else(|| ::std::string::String::new())
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for Team {
        const NAME: &'static str = "Team";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    26 => {
                        self.url = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.name.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
            }
            if let Some(v) = self.url.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(3, &v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.name.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.url.as_ref() {
                os.write_string(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Team {
            Team::new()
        }

        fn clear(&mut self) {
            self.id = ::std::option::Option::None;
            self.name = ::std::option::Option::None;
            self.url = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Team {
            static instance: Team = Team {
                id: ::std::option::Option::None,
                name: ::std::option::Option::None,
                url: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgDOTADPCSearchResults.League)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct League {
        // message fields
        // @@protoc_insertion_point(field:CMsgDOTADPCSearchResults.League.id)
        pub id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTADPCSearchResults.League.name)
        pub name: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDOTADPCSearchResults.League.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a League {
        fn default() -> &'a League {
            <League as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl League {
        pub fn new() -> League {
            ::std::default::Default::default()
        }

        // optional uint32 id = 1;

        pub fn id(&self) -> u32 {
            self.id.unwrap_or(0)
        }

        pub fn clear_id(&mut self) {
            self.id = ::std::option::Option::None;
        }

        pub fn has_id(&self) -> bool {
            self.id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_id(&mut self, v: u32) {
            self.id = ::std::option::Option::Some(v);
        }

        // optional string name = 2;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for League {
        const NAME: &'static str = "League";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.name.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.name.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> League {
            League::new()
        }

        fn clear(&mut self) {
            self.id = ::std::option::Option::None;
            self.name = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static League {
            static instance: League = League {
                id: ::std::option::Option::None,
                name: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgDOTADPCSearchResults.ESearchResultsDesired)
    pub enum ESearchResultsDesired {
        // @@protoc_insertion_point(enum_value:CMsgDOTADPCSearchResults.ESearchResultsDesired.k_ESearchResultsDesired_Players)
        k_ESearchResultsDesired_Players = 1,
        // @@protoc_insertion_point(enum_value:CMsgDOTADPCSearchResults.ESearchResultsDesired.k_ESearchResultsDesired_Teams)
        k_ESearchResultsDesired_Teams = 2,
        // @@protoc_insertion_point(enum_value:CMsgDOTADPCSearchResults.ESearchResultsDesired.k_ESearchResultsDesired_Leagues)
        k_ESearchResultsDesired_Leagues = 4,
        // @@protoc_insertion_point(enum_value:CMsgDOTADPCSearchResults.ESearchResultsDesired.k_ESearchResultsDesired_All)
        k_ESearchResultsDesired_All = 7,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for ESearchResultsDesired {
        const NAME: &'static str = "ESearchResultsDesired";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<ESearchResultsDesired> {
            match value {
                1 => ::std::option::Option::Some(ESearchResultsDesired::k_ESearchResultsDesired_Players),
                2 => ::std::option::Option::Some(ESearchResultsDesired::k_ESearchResultsDesired_Teams),
                4 => ::std::option::Option::Some(ESearchResultsDesired::k_ESearchResultsDesired_Leagues),
                7 => ::std::option::Option::Some(ESearchResultsDesired::k_ESearchResultsDesired_All),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<ESearchResultsDesired> {
            match str {
                "k_ESearchResultsDesired_Players" => ::std::option::Option::Some(ESearchResultsDesired::k_ESearchResultsDesired_Players),
                "k_ESearchResultsDesired_Teams" => ::std::option::Option::Some(ESearchResultsDesired::k_ESearchResultsDesired_Teams),
                "k_ESearchResultsDesired_Leagues" => ::std::option::Option::Some(ESearchResultsDesired::k_ESearchResultsDesired_Leagues),
                "k_ESearchResultsDesired_All" => ::std::option::Option::Some(ESearchResultsDesired::k_ESearchResultsDesired_All),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [ESearchResultsDesired] = &[
            ESearchResultsDesired::k_ESearchResultsDesired_Players,
            ESearchResultsDesired::k_ESearchResultsDesired_Teams,
            ESearchResultsDesired::k_ESearchResultsDesired_Leagues,
            ESearchResultsDesired::k_ESearchResultsDesired_All,
        ];
    }

    // Note, `Default` is implemented although default value is not 0
    impl ::std::default::Default for ESearchResultsDesired {
        fn default() -> Self {
            ESearchResultsDesired::k_ESearchResultsDesired_Players
        }
    }

}

// @@protoc_insertion_point(message:CMsgDOTADPCTeamFavoriteRankings)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTADPCTeamFavoriteRankings {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTADPCTeamFavoriteRankings.teams)
    pub teams: ::std::vec::Vec<cmsg_dotadpcteam_favorite_rankings::Team>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTADPCTeamFavoriteRankings.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTADPCTeamFavoriteRankings {
    fn default() -> &'a CMsgDOTADPCTeamFavoriteRankings {
        <CMsgDOTADPCTeamFavoriteRankings as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTADPCTeamFavoriteRankings {
    pub fn new() -> CMsgDOTADPCTeamFavoriteRankings {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTADPCTeamFavoriteRankings {
    const NAME: &'static str = "CMsgDOTADPCTeamFavoriteRankings";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.teams.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.teams {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.teams {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTADPCTeamFavoriteRankings {
        CMsgDOTADPCTeamFavoriteRankings::new()
    }

    fn clear(&mut self) {
        self.teams.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTADPCTeamFavoriteRankings {
        static instance: CMsgDOTADPCTeamFavoriteRankings = CMsgDOTADPCTeamFavoriteRankings {
            teams: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgDOTADPCTeamFavoriteRankings`
pub mod cmsg_dotadpcteam_favorite_rankings {
    // @@protoc_insertion_point(message:CMsgDOTADPCTeamFavoriteRankings.Team)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Team {
        // message fields
        // @@protoc_insertion_point(field:CMsgDOTADPCTeamFavoriteRankings.Team.team_id)
        pub team_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTADPCTeamFavoriteRankings.Team.favorites)
        pub favorites: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDOTADPCTeamFavoriteRankings.Team.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Team {
        fn default() -> &'a Team {
            <Team as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl Team {
        pub fn new() -> Team {
            ::std::default::Default::default()
        }

        // optional uint32 team_id = 1;

        pub fn team_id(&self) -> u32 {
            self.team_id.unwrap_or(0)
        }

        pub fn clear_team_id(&mut self) {
            self.team_id = ::std::option::Option::None;
        }

        pub fn has_team_id(&self) -> bool {
            self.team_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_id(&mut self, v: u32) {
            self.team_id = ::std::option::Option::Some(v);
        }

        // optional uint32 favorites = 2;

        pub fn favorites(&self) -> u32 {
            self.favorites.unwrap_or(0)
        }

        pub fn clear_favorites(&mut self) {
            self.favorites = ::std::option::Option::None;
        }

        pub fn has_favorites(&self) -> bool {
            self.favorites.is_some()
        }

        // Param is passed by value, moved
        pub fn set_favorites(&mut self, v: u32) {
            self.favorites = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for Team {
        const NAME: &'static str = "Team";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.favorites = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.team_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.favorites {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.team_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.favorites {
                os.write_uint32(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Team {
            Team::new()
        }

        fn clear(&mut self) {
            self.team_id = ::std::option::Option::None;
            self.favorites = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Team {
            static instance: Team = Team {
                team_id: ::std::option::Option::None,
                favorites: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgDotaFantasyCraftingTabletPeriodData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDotaFantasyCraftingTabletPeriodData {
    // message fields
    // @@protoc_insertion_point(field:CMsgDotaFantasyCraftingTabletPeriodData.fantasy_period)
    pub fantasy_period: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDotaFantasyCraftingTabletPeriodData.tablets)
    pub tablets: ::std::vec::Vec<cmsg_dota_fantasy_crafting_tablet_period_data::Tablet>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDotaFantasyCraftingTabletPeriodData.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDotaFantasyCraftingTabletPeriodData {
    fn default() -> &'a CMsgDotaFantasyCraftingTabletPeriodData {
        <CMsgDotaFantasyCraftingTabletPeriodData as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDotaFantasyCraftingTabletPeriodData {
    pub fn new() -> CMsgDotaFantasyCraftingTabletPeriodData {
        ::std::default::Default::default()
    }

    // optional uint32 fantasy_period = 1;

    pub fn fantasy_period(&self) -> u32 {
        self.fantasy_period.unwrap_or(4294967295u32)
    }

    pub fn clear_fantasy_period(&mut self) {
        self.fantasy_period = ::std::option::Option::None;
    }

    pub fn has_fantasy_period(&self) -> bool {
        self.fantasy_period.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fantasy_period(&mut self, v: u32) {
        self.fantasy_period = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDotaFantasyCraftingTabletPeriodData {
    const NAME: &'static str = "CMsgDotaFantasyCraftingTabletPeriodData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.fantasy_period = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.tablets.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.fantasy_period {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        for value in &self.tablets {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.fantasy_period {
            os.write_uint32(1, v)?;
        }
        for v in &self.tablets {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDotaFantasyCraftingTabletPeriodData {
        CMsgDotaFantasyCraftingTabletPeriodData::new()
    }

    fn clear(&mut self) {
        self.fantasy_period = ::std::option::Option::None;
        self.tablets.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDotaFantasyCraftingTabletPeriodData {
        static instance: CMsgDotaFantasyCraftingTabletPeriodData = CMsgDotaFantasyCraftingTabletPeriodData {
            fantasy_period: ::std::option::Option::None,
            tablets: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgDotaFantasyCraftingTabletPeriodData`
pub mod cmsg_dota_fantasy_crafting_tablet_period_data {
    // @@protoc_insertion_point(message:CMsgDotaFantasyCraftingTabletPeriodData.Gem)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Gem {
        // message fields
        // @@protoc_insertion_point(field:CMsgDotaFantasyCraftingTabletPeriodData.Gem.type)
        pub type_: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<super::super::dota_shared_enums::Fantasy_Gem_Type>>,
        // @@protoc_insertion_point(field:CMsgDotaFantasyCraftingTabletPeriodData.Gem.slot)
        pub slot: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDotaFantasyCraftingTabletPeriodData.Gem.shape)
        pub shape: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDotaFantasyCraftingTabletPeriodData.Gem.quality)
        pub quality: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDotaFantasyCraftingTabletPeriodData.Gem.stat)
        pub stat: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<super::super::dota_shared_enums::Fantasy_Scoring>>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDotaFantasyCraftingTabletPeriodData.Gem.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Gem {
        fn default() -> &'a Gem {
            <Gem as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl Gem {
        pub fn new() -> Gem {
            ::std::default::Default::default()
        }

        // optional .Fantasy_Gem_Type type = 1;

        pub fn type_(&self) -> super::super::dota_shared_enums::Fantasy_Gem_Type {
            match self.type_ {
                Some(e) => e.enum_value_or(super::super::dota_shared_enums::Fantasy_Gem_Type::FANTASY_GEM_TYPE_RUBY),
                None => super::super::dota_shared_enums::Fantasy_Gem_Type::FANTASY_GEM_TYPE_RUBY,
            }
        }

        pub fn clear_type_(&mut self) {
            self.type_ = ::std::option::Option::None;
        }

        pub fn has_type(&self) -> bool {
            self.type_.is_some()
        }

        // Param is passed by value, moved
        pub fn set_type(&mut self, v: super::super::dota_shared_enums::Fantasy_Gem_Type) {
            self.type_ = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
        }

        // optional uint32 slot = 2;

        pub fn slot(&self) -> u32 {
            self.slot.unwrap_or(0)
        }

        pub fn clear_slot(&mut self) {
            self.slot = ::std::option::Option::None;
        }

        pub fn has_slot(&self) -> bool {
            self.slot.is_some()
        }

        // Param is passed by value, moved
        pub fn set_slot(&mut self, v: u32) {
            self.slot = ::std::option::Option::Some(v);
        }

        // optional uint32 shape = 3;

        pub fn shape(&self) -> u32 {
            self.shape.unwrap_or(0)
        }

        pub fn clear_shape(&mut self) {
            self.shape = ::std::option::Option::None;
        }

        pub fn has_shape(&self) -> bool {
            self.shape.is_some()
        }

        // Param is passed by value, moved
        pub fn set_shape(&mut self, v: u32) {
            self.shape = ::std::option::Option::Some(v);
        }

        // optional uint32 quality = 4;

        pub fn quality(&self) -> u32 {
            self.quality.unwrap_or(0)
        }

        pub fn clear_quality(&mut self) {
            self.quality = ::std::option::Option::None;
        }

        pub fn has_quality(&self) -> bool {
            self.quality.is_some()
        }

        // Param is passed by value, moved
        pub fn set_quality(&mut self, v: u32) {
            self.quality = ::std::option::Option::Some(v);
        }

        // optional .Fantasy_Scoring stat = 5;

        pub fn stat(&self) -> super::super::dota_shared_enums::Fantasy_Scoring {
            match self.stat {
                Some(e) => e.enum_value_or(super::super::dota_shared_enums::Fantasy_Scoring::FANTASY_SCORING_KILLS),
                None => super::super::dota_shared_enums::Fantasy_Scoring::FANTASY_SCORING_KILLS,
            }
        }

        pub fn clear_stat(&mut self) {
            self.stat = ::std::option::Option::None;
        }

        pub fn has_stat(&self) -> bool {
            self.stat.is_some()
        }

        // Param is passed by value, moved
        pub fn set_stat(&mut self, v: super::super::dota_shared_enums::Fantasy_Scoring) {
            self.stat = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for Gem {
        const NAME: &'static str = "Gem";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.type_ = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    16 => {
                        self.slot = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.shape = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.quality = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    40 => {
                        self.stat = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.type_ {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
            }
            if let Some(v) = self.slot {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.shape {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.quality {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
            }
            if let Some(v) = self.stat {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(5, v.value());
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.type_ {
                os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
            }
            if let Some(v) = self.slot {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.shape {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.quality {
                os.write_uint32(4, v)?;
            }
            if let Some(v) = self.stat {
                os.write_enum(5, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Gem {
            Gem::new()
        }

        fn clear(&mut self) {
            self.type_ = ::std::option::Option::None;
            self.slot = ::std::option::Option::None;
            self.shape = ::std::option::Option::None;
            self.quality = ::std::option::Option::None;
            self.stat = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Gem {
            static instance: Gem = Gem {
                type_: ::std::option::Option::None,
                slot: ::std::option::Option::None,
                shape: ::std::option::Option::None,
                quality: ::std::option::Option::None,
                stat: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgDotaFantasyCraftingTabletPeriodData.Tablet)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Tablet {
        // message fields
        // @@protoc_insertion_point(field:CMsgDotaFantasyCraftingTabletPeriodData.Tablet.tablet_id)
        pub tablet_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDotaFantasyCraftingTabletPeriodData.Tablet.tablet_level)
        pub tablet_level: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDotaFantasyCraftingTabletPeriodData.Tablet.fantasy_role)
        pub fantasy_role: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<super::super::dota_shared_enums::Fantasy_Roles>>,
        // @@protoc_insertion_point(field:CMsgDotaFantasyCraftingTabletPeriodData.Tablet.account_id)
        pub account_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDotaFantasyCraftingTabletPeriodData.Tablet.prefix)
        pub prefix: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDotaFantasyCraftingTabletPeriodData.Tablet.suffix)
        pub suffix: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDotaFantasyCraftingTabletPeriodData.Tablet.gems)
        pub gems: ::std::vec::Vec<Gem>,
        // @@protoc_insertion_point(field:CMsgDotaFantasyCraftingTabletPeriodData.Tablet.score)
        pub score: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgDotaFantasyCraftingTabletPeriodData.Tablet.best_series)
        pub best_series: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDotaFantasyCraftingTabletPeriodData.Tablet.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Tablet {
        fn default() -> &'a Tablet {
            <Tablet as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl Tablet {
        pub fn new() -> Tablet {
            ::std::default::Default::default()
        }

        // optional uint32 tablet_id = 1;

        pub fn tablet_id(&self) -> u32 {
            self.tablet_id.unwrap_or(0)
        }

        pub fn clear_tablet_id(&mut self) {
            self.tablet_id = ::std::option::Option::None;
        }

        pub fn has_tablet_id(&self) -> bool {
            self.tablet_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_tablet_id(&mut self, v: u32) {
            self.tablet_id = ::std::option::Option::Some(v);
        }

        // optional uint32 tablet_level = 2;

        pub fn tablet_level(&self) -> u32 {
            self.tablet_level.unwrap_or(0)
        }

        pub fn clear_tablet_level(&mut self) {
            self.tablet_level = ::std::option::Option::None;
        }

        pub fn has_tablet_level(&self) -> bool {
            self.tablet_level.is_some()
        }

        // Param is passed by value, moved
        pub fn set_tablet_level(&mut self, v: u32) {
            self.tablet_level = ::std::option::Option::Some(v);
        }

        // optional .Fantasy_Roles fantasy_role = 3;

        pub fn fantasy_role(&self) -> super::super::dota_shared_enums::Fantasy_Roles {
            match self.fantasy_role {
                Some(e) => e.enum_value_or(super::super::dota_shared_enums::Fantasy_Roles::FANTASY_ROLE_UNDEFINED),
                None => super::super::dota_shared_enums::Fantasy_Roles::FANTASY_ROLE_UNDEFINED,
            }
        }

        pub fn clear_fantasy_role(&mut self) {
            self.fantasy_role = ::std::option::Option::None;
        }

        pub fn has_fantasy_role(&self) -> bool {
            self.fantasy_role.is_some()
        }

        // Param is passed by value, moved
        pub fn set_fantasy_role(&mut self, v: super::super::dota_shared_enums::Fantasy_Roles) {
            self.fantasy_role = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
        }

        // optional uint32 account_id = 4;

        pub fn account_id(&self) -> u32 {
            self.account_id.unwrap_or(0)
        }

        pub fn clear_account_id(&mut self) {
            self.account_id = ::std::option::Option::None;
        }

        pub fn has_account_id(&self) -> bool {
            self.account_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_account_id(&mut self, v: u32) {
            self.account_id = ::std::option::Option::Some(v);
        }

        // optional uint32 prefix = 5;

        pub fn prefix(&self) -> u32 {
            self.prefix.unwrap_or(0)
        }

        pub fn clear_prefix(&mut self) {
            self.prefix = ::std::option::Option::None;
        }

        pub fn has_prefix(&self) -> bool {
            self.prefix.is_some()
        }

        // Param is passed by value, moved
        pub fn set_prefix(&mut self, v: u32) {
            self.prefix = ::std::option::Option::Some(v);
        }

        // optional uint32 suffix = 6;

        pub fn suffix(&self) -> u32 {
            self.suffix.unwrap_or(0)
        }

        pub fn clear_suffix(&mut self) {
            self.suffix = ::std::option::Option::None;
        }

        pub fn has_suffix(&self) -> bool {
            self.suffix.is_some()
        }

        // Param is passed by value, moved
        pub fn set_suffix(&mut self, v: u32) {
            self.suffix = ::std::option::Option::Some(v);
        }

        // optional float score = 8;

        pub fn score(&self) -> f32 {
            self.score.unwrap_or(0.)
        }

        pub fn clear_score(&mut self) {
            self.score = ::std::option::Option::None;
        }

        pub fn has_score(&self) -> bool {
            self.score.is_some()
        }

        // Param is passed by value, moved
        pub fn set_score(&mut self, v: f32) {
            self.score = ::std::option::Option::Some(v);
        }

        // optional uint32 best_series = 9;

        pub fn best_series(&self) -> u32 {
            self.best_series.unwrap_or(0)
        }

        pub fn clear_best_series(&mut self) {
            self.best_series = ::std::option::Option::None;
        }

        pub fn has_best_series(&self) -> bool {
            self.best_series.is_some()
        }

        // Param is passed by value, moved
        pub fn set_best_series(&mut self, v: u32) {
            self.best_series = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for Tablet {
        const NAME: &'static str = "Tablet";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.tablet_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.tablet_level = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.fantasy_role = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    32 => {
                        self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    40 => {
                        self.prefix = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    48 => {
                        self.suffix = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    58 => {
                        self.gems.push(is.read_message()?);
                    },
                    69 => {
                        self.score = ::std::option::Option::Some(is.read_float()?);
                    },
                    72 => {
                        self.best_series = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.tablet_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.tablet_level {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.fantasy_role {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(3, v.value());
            }
            if let Some(v) = self.account_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
            }
            if let Some(v) = self.prefix {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
            }
            if let Some(v) = self.suffix {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(6, v);
            }
            for value in &self.gems {
                let len = value.compute_size();
                my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            if let Some(v) = self.score {
                my_size += 1 + 4;
            }
            if let Some(v) = self.best_series {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(9, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.tablet_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.tablet_level {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.fantasy_role {
                os.write_enum(3, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
            }
            if let Some(v) = self.account_id {
                os.write_uint32(4, v)?;
            }
            if let Some(v) = self.prefix {
                os.write_uint32(5, v)?;
            }
            if let Some(v) = self.suffix {
                os.write_uint32(6, v)?;
            }
            for v in &self.gems {
                ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
            };
            if let Some(v) = self.score {
                os.write_float(8, v)?;
            }
            if let Some(v) = self.best_series {
                os.write_uint32(9, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Tablet {
            Tablet::new()
        }

        fn clear(&mut self) {
            self.tablet_id = ::std::option::Option::None;
            self.tablet_level = ::std::option::Option::None;
            self.fantasy_role = ::std::option::Option::None;
            self.account_id = ::std::option::Option::None;
            self.prefix = ::std::option::Option::None;
            self.suffix = ::std::option::Option::None;
            self.gems.clear();
            self.score = ::std::option::Option::None;
            self.best_series = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Tablet {
            static instance: Tablet = Tablet {
                tablet_id: ::std::option::Option::None,
                tablet_level: ::std::option::Option::None,
                fantasy_role: ::std::option::Option::None,
                account_id: ::std::option::Option::None,
                prefix: ::std::option::Option::None,
                suffix: ::std::option::Option::None,
                gems: ::std::vec::Vec::new(),
                score: ::std::option::Option::None,
                best_series: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgDotaFantasyCraftingTabletData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDotaFantasyCraftingTabletData {
    // message fields
    // @@protoc_insertion_point(field:CMsgDotaFantasyCraftingTabletData.tablet_period_data)
    pub tablet_period_data: ::std::vec::Vec<cmsg_dota_fantasy_crafting_tablet_data::TabletPeriodDataEntry>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDotaFantasyCraftingTabletData.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDotaFantasyCraftingTabletData {
    fn default() -> &'a CMsgDotaFantasyCraftingTabletData {
        <CMsgDotaFantasyCraftingTabletData as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDotaFantasyCraftingTabletData {
    pub fn new() -> CMsgDotaFantasyCraftingTabletData {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDotaFantasyCraftingTabletData {
    const NAME: &'static str = "CMsgDotaFantasyCraftingTabletData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.tablet_period_data.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.tablet_period_data {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.tablet_period_data {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDotaFantasyCraftingTabletData {
        CMsgDotaFantasyCraftingTabletData::new()
    }

    fn clear(&mut self) {
        self.tablet_period_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDotaFantasyCraftingTabletData {
        static instance: CMsgDotaFantasyCraftingTabletData = CMsgDotaFantasyCraftingTabletData {
            tablet_period_data: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgDotaFantasyCraftingTabletData`
pub mod cmsg_dota_fantasy_crafting_tablet_data {
    // @@protoc_insertion_point(message:CMsgDotaFantasyCraftingTabletData.TabletPeriodDataEntry)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct TabletPeriodDataEntry {
        // message fields
        // @@protoc_insertion_point(field:CMsgDotaFantasyCraftingTabletData.TabletPeriodDataEntry.key)
        pub key: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDotaFantasyCraftingTabletData.TabletPeriodDataEntry.value)
        pub value: ::steam_vent_proto_common::protobuf::MessageField<super::CMsgDotaFantasyCraftingTabletPeriodData>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDotaFantasyCraftingTabletData.TabletPeriodDataEntry.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a TabletPeriodDataEntry {
        fn default() -> &'a TabletPeriodDataEntry {
            <TabletPeriodDataEntry as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl TabletPeriodDataEntry {
        pub fn new() -> TabletPeriodDataEntry {
            ::std::default::Default::default()
        }

        // optional uint32 key = 1;

        pub fn key(&self) -> u32 {
            self.key.unwrap_or(0)
        }

        pub fn clear_key(&mut self) {
            self.key = ::std::option::Option::None;
        }

        pub fn has_key(&self) -> bool {
            self.key.is_some()
        }

        // Param is passed by value, moved
        pub fn set_key(&mut self, v: u32) {
            self.key = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for TabletPeriodDataEntry {
        const NAME: &'static str = "TabletPeriodDataEntry";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.key = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.value)?;
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.key {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.value.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.key {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.value.as_ref() {
                ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> TabletPeriodDataEntry {
            TabletPeriodDataEntry::new()
        }

        fn clear(&mut self) {
            self.key = ::std::option::Option::None;
            self.value.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static TabletPeriodDataEntry {
            static instance: TabletPeriodDataEntry = TabletPeriodDataEntry {
                key: ::std::option::Option::None,
                value: ::steam_vent_proto_common::protobuf::MessageField::none(),
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgDotaFantasyCraftingUserData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDotaFantasyCraftingUserData {
    // message fields
    // @@protoc_insertion_point(field:CMsgDotaFantasyCraftingUserData.available_rolls)
    pub available_rolls: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CMsgDotaFantasyCraftingUserData.period_roll_tokens)
    pub period_roll_tokens: ::std::vec::Vec<cmsg_dota_fantasy_crafting_user_data::PeriodRollTokensEntry>,
    // @@protoc_insertion_point(field:CMsgDotaFantasyCraftingUserData.period_scores)
    pub period_scores: ::std::vec::Vec<cmsg_dota_fantasy_crafting_user_data::PeriodScoresEntry>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDotaFantasyCraftingUserData.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDotaFantasyCraftingUserData {
    fn default() -> &'a CMsgDotaFantasyCraftingUserData {
        <CMsgDotaFantasyCraftingUserData as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDotaFantasyCraftingUserData {
    pub fn new() -> CMsgDotaFantasyCraftingUserData {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDotaFantasyCraftingUserData {
    const NAME: &'static str = "CMsgDotaFantasyCraftingUserData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.available_rolls)?;
                },
                8 => {
                    self.available_rolls.push(is.read_uint32()?);
                },
                18 => {
                    self.period_roll_tokens.push(is.read_message()?);
                },
                26 => {
                    self.period_scores.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.available_rolls {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, *value);
        };
        for value in &self.period_roll_tokens {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.period_scores {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.available_rolls {
            os.write_uint32(1, *v)?;
        };
        for v in &self.period_roll_tokens {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.period_scores {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDotaFantasyCraftingUserData {
        CMsgDotaFantasyCraftingUserData::new()
    }

    fn clear(&mut self) {
        self.available_rolls.clear();
        self.period_roll_tokens.clear();
        self.period_scores.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDotaFantasyCraftingUserData {
        static instance: CMsgDotaFantasyCraftingUserData = CMsgDotaFantasyCraftingUserData {
            available_rolls: ::std::vec::Vec::new(),
            period_roll_tokens: ::std::vec::Vec::new(),
            period_scores: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgDotaFantasyCraftingUserData`
pub mod cmsg_dota_fantasy_crafting_user_data {
    // @@protoc_insertion_point(message:CMsgDotaFantasyCraftingUserData.PeriodScore)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PeriodScore {
        // message fields
        // @@protoc_insertion_point(field:CMsgDotaFantasyCraftingUserData.PeriodScore.total_score)
        pub total_score: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgDotaFantasyCraftingUserData.PeriodScore.percentile)
        pub percentile: ::std::option::Option<f32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDotaFantasyCraftingUserData.PeriodScore.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PeriodScore {
        fn default() -> &'a PeriodScore {
            <PeriodScore as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl PeriodScore {
        pub fn new() -> PeriodScore {
            ::std::default::Default::default()
        }

        // optional float total_score = 1;

        pub fn total_score(&self) -> f32 {
            self.total_score.unwrap_or(0.)
        }

        pub fn clear_total_score(&mut self) {
            self.total_score = ::std::option::Option::None;
        }

        pub fn has_total_score(&self) -> bool {
            self.total_score.is_some()
        }

        // Param is passed by value, moved
        pub fn set_total_score(&mut self, v: f32) {
            self.total_score = ::std::option::Option::Some(v);
        }

        // optional float percentile = 2;

        pub fn percentile(&self) -> f32 {
            self.percentile.unwrap_or(0.)
        }

        pub fn clear_percentile(&mut self) {
            self.percentile = ::std::option::Option::None;
        }

        pub fn has_percentile(&self) -> bool {
            self.percentile.is_some()
        }

        // Param is passed by value, moved
        pub fn set_percentile(&mut self, v: f32) {
            self.percentile = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for PeriodScore {
        const NAME: &'static str = "PeriodScore";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    13 => {
                        self.total_score = ::std::option::Option::Some(is.read_float()?);
                    },
                    21 => {
                        self.percentile = ::std::option::Option::Some(is.read_float()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.total_score {
                my_size += 1 + 4;
            }
            if let Some(v) = self.percentile {
                my_size += 1 + 4;
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.total_score {
                os.write_float(1, v)?;
            }
            if let Some(v) = self.percentile {
                os.write_float(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PeriodScore {
            PeriodScore::new()
        }

        fn clear(&mut self) {
            self.total_score = ::std::option::Option::None;
            self.percentile = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PeriodScore {
            static instance: PeriodScore = PeriodScore {
                total_score: ::std::option::Option::None,
                percentile: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgDotaFantasyCraftingUserData.PeriodRollTokensEntry)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PeriodRollTokensEntry {
        // message fields
        // @@protoc_insertion_point(field:CMsgDotaFantasyCraftingUserData.PeriodRollTokensEntry.key)
        pub key: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDotaFantasyCraftingUserData.PeriodRollTokensEntry.value)
        pub value: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDotaFantasyCraftingUserData.PeriodRollTokensEntry.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PeriodRollTokensEntry {
        fn default() -> &'a PeriodRollTokensEntry {
            <PeriodRollTokensEntry as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl PeriodRollTokensEntry {
        pub fn new() -> PeriodRollTokensEntry {
            ::std::default::Default::default()
        }

        // optional uint32 key = 1;

        pub fn key(&self) -> u32 {
            self.key.unwrap_or(0)
        }

        pub fn clear_key(&mut self) {
            self.key = ::std::option::Option::None;
        }

        pub fn has_key(&self) -> bool {
            self.key.is_some()
        }

        // Param is passed by value, moved
        pub fn set_key(&mut self, v: u32) {
            self.key = ::std::option::Option::Some(v);
        }

        // optional uint32 value = 2;

        pub fn value(&self) -> u32 {
            self.value.unwrap_or(0)
        }

        pub fn clear_value(&mut self) {
            self.value = ::std::option::Option::None;
        }

        pub fn has_value(&self) -> bool {
            self.value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_value(&mut self, v: u32) {
            self.value = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for PeriodRollTokensEntry {
        const NAME: &'static str = "PeriodRollTokensEntry";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.key = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.value = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.key {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.value {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.key {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.value {
                os.write_uint32(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PeriodRollTokensEntry {
            PeriodRollTokensEntry::new()
        }

        fn clear(&mut self) {
            self.key = ::std::option::Option::None;
            self.value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PeriodRollTokensEntry {
            static instance: PeriodRollTokensEntry = PeriodRollTokensEntry {
                key: ::std::option::Option::None,
                value: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgDotaFantasyCraftingUserData.PeriodScoresEntry)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PeriodScoresEntry {
        // message fields
        // @@protoc_insertion_point(field:CMsgDotaFantasyCraftingUserData.PeriodScoresEntry.key)
        pub key: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDotaFantasyCraftingUserData.PeriodScoresEntry.value)
        pub value: ::steam_vent_proto_common::protobuf::MessageField<PeriodScore>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDotaFantasyCraftingUserData.PeriodScoresEntry.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PeriodScoresEntry {
        fn default() -> &'a PeriodScoresEntry {
            <PeriodScoresEntry as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl PeriodScoresEntry {
        pub fn new() -> PeriodScoresEntry {
            ::std::default::Default::default()
        }

        // optional uint32 key = 1;

        pub fn key(&self) -> u32 {
            self.key.unwrap_or(0)
        }

        pub fn clear_key(&mut self) {
            self.key = ::std::option::Option::None;
        }

        pub fn has_key(&self) -> bool {
            self.key.is_some()
        }

        // Param is passed by value, moved
        pub fn set_key(&mut self, v: u32) {
            self.key = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for PeriodScoresEntry {
        const NAME: &'static str = "PeriodScoresEntry";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.key = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.value)?;
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.key {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.value.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.key {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.value.as_ref() {
                ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PeriodScoresEntry {
            PeriodScoresEntry::new()
        }

        fn clear(&mut self) {
            self.key = ::std::option::Option::None;
            self.value.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PeriodScoresEntry {
            static instance: PeriodScoresEntry = PeriodScoresEntry {
                key: ::std::option::Option::None,
                value: ::steam_vent_proto_common::protobuf::MessageField::none(),
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgDotaFantasyCraftingDataCache)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDotaFantasyCraftingDataCache {
    // message fields
    // @@protoc_insertion_point(field:CMsgDotaFantasyCraftingDataCache.cache_entries)
    pub cache_entries: ::std::vec::Vec<cmsg_dota_fantasy_crafting_data_cache::CacheEntry>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDotaFantasyCraftingDataCache.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDotaFantasyCraftingDataCache {
    fn default() -> &'a CMsgDotaFantasyCraftingDataCache {
        <CMsgDotaFantasyCraftingDataCache as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDotaFantasyCraftingDataCache {
    pub fn new() -> CMsgDotaFantasyCraftingDataCache {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDotaFantasyCraftingDataCache {
    const NAME: &'static str = "CMsgDotaFantasyCraftingDataCache";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.cache_entries.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.cache_entries {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.cache_entries {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDotaFantasyCraftingDataCache {
        CMsgDotaFantasyCraftingDataCache::new()
    }

    fn clear(&mut self) {
        self.cache_entries.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDotaFantasyCraftingDataCache {
        static instance: CMsgDotaFantasyCraftingDataCache = CMsgDotaFantasyCraftingDataCache {
            cache_entries: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgDotaFantasyCraftingDataCache`
pub mod cmsg_dota_fantasy_crafting_data_cache {
    // @@protoc_insertion_point(message:CMsgDotaFantasyCraftingDataCache.CacheEntry)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct CacheEntry {
        // message fields
        // @@protoc_insertion_point(field:CMsgDotaFantasyCraftingDataCache.CacheEntry.account_id)
        pub account_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDotaFantasyCraftingDataCache.CacheEntry.fantasy_league)
        pub fantasy_league: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDotaFantasyCraftingDataCache.CacheEntry.cache_data)
        pub cache_data: ::steam_vent_proto_common::protobuf::MessageField<super::CMsgGCToClientFantasyCraftingDataUpdated>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDotaFantasyCraftingDataCache.CacheEntry.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a CacheEntry {
        fn default() -> &'a CacheEntry {
            <CacheEntry as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl CacheEntry {
        pub fn new() -> CacheEntry {
            ::std::default::Default::default()
        }

        // optional uint32 account_id = 1;

        pub fn account_id(&self) -> u32 {
            self.account_id.unwrap_or(0)
        }

        pub fn clear_account_id(&mut self) {
            self.account_id = ::std::option::Option::None;
        }

        pub fn has_account_id(&self) -> bool {
            self.account_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_account_id(&mut self, v: u32) {
            self.account_id = ::std::option::Option::Some(v);
        }

        // optional uint32 fantasy_league = 2;

        pub fn fantasy_league(&self) -> u32 {
            self.fantasy_league.unwrap_or(0)
        }

        pub fn clear_fantasy_league(&mut self) {
            self.fantasy_league = ::std::option::Option::None;
        }

        pub fn has_fantasy_league(&self) -> bool {
            self.fantasy_league.is_some()
        }

        // Param is passed by value, moved
        pub fn set_fantasy_league(&mut self, v: u32) {
            self.fantasy_league = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for CacheEntry {
        const NAME: &'static str = "CacheEntry";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.fantasy_league = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    26 => {
                        ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.cache_data)?;
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.account_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.fantasy_league {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.cache_data.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.account_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.fantasy_league {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.cache_data.as_ref() {
                ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> CacheEntry {
            CacheEntry::new()
        }

        fn clear(&mut self) {
            self.account_id = ::std::option::Option::None;
            self.fantasy_league = ::std::option::Option::None;
            self.cache_data.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static CacheEntry {
            static instance: CacheEntry = CacheEntry {
                account_id: ::std::option::Option::None,
                fantasy_league: ::std::option::Option::None,
                cache_data: ::steam_vent_proto_common::protobuf::MessageField::none(),
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCFantasyCraftingGetData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCFantasyCraftingGetData {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingGetData.fantasy_league)
    pub fantasy_league: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingGetData.account_id)
    pub account_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCFantasyCraftingGetData.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCFantasyCraftingGetData {
    fn default() -> &'a CMsgClientToGCFantasyCraftingGetData {
        <CMsgClientToGCFantasyCraftingGetData as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCFantasyCraftingGetData {
    pub fn new() -> CMsgClientToGCFantasyCraftingGetData {
        ::std::default::Default::default()
    }

    // optional uint32 fantasy_league = 1;

    pub fn fantasy_league(&self) -> u32 {
        self.fantasy_league.unwrap_or(0)
    }

    pub fn clear_fantasy_league(&mut self) {
        self.fantasy_league = ::std::option::Option::None;
    }

    pub fn has_fantasy_league(&self) -> bool {
        self.fantasy_league.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fantasy_league(&mut self, v: u32) {
        self.fantasy_league = ::std::option::Option::Some(v);
    }

    // optional uint32 account_id = 2;

    pub fn account_id(&self) -> u32 {
        self.account_id.unwrap_or(0)
    }

    pub fn clear_account_id(&mut self) {
        self.account_id = ::std::option::Option::None;
    }

    pub fn has_account_id(&self) -> bool {
        self.account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: u32) {
        self.account_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCFantasyCraftingGetData {
    const NAME: &'static str = "CMsgClientToGCFantasyCraftingGetData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.fantasy_league = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.fantasy_league {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.fantasy_league {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.account_id {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCFantasyCraftingGetData {
        CMsgClientToGCFantasyCraftingGetData::new()
    }

    fn clear(&mut self) {
        self.fantasy_league = ::std::option::Option::None;
        self.account_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCFantasyCraftingGetData {
        static instance: CMsgClientToGCFantasyCraftingGetData = CMsgClientToGCFantasyCraftingGetData {
            fantasy_league: ::std::option::Option::None,
            account_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCFantasyCraftingGetDataResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCFantasyCraftingGetDataResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingGetDataResponse.response)
    pub response: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_client_to_gcfantasy_crafting_get_data_response::EResponse>>,
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingGetDataResponse.user_data)
    pub user_data: ::steam_vent_proto_common::protobuf::MessageField<CMsgDotaFantasyCraftingUserData>,
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingGetDataResponse.tablet_data)
    pub tablet_data: ::steam_vent_proto_common::protobuf::MessageField<CMsgDotaFantasyCraftingTabletData>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCFantasyCraftingGetDataResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCFantasyCraftingGetDataResponse {
    fn default() -> &'a CMsgClientToGCFantasyCraftingGetDataResponse {
        <CMsgClientToGCFantasyCraftingGetDataResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCFantasyCraftingGetDataResponse {
    pub fn new() -> CMsgClientToGCFantasyCraftingGetDataResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgClientToGCFantasyCraftingGetDataResponse.EResponse response = 1;

    pub fn response(&self) -> cmsg_client_to_gcfantasy_crafting_get_data_response::EResponse {
        match self.response {
            Some(e) => e.enum_value_or(cmsg_client_to_gcfantasy_crafting_get_data_response::EResponse::k_eInternalError),
            None => cmsg_client_to_gcfantasy_crafting_get_data_response::EResponse::k_eInternalError,
        }
    }

    pub fn clear_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: cmsg_client_to_gcfantasy_crafting_get_data_response::EResponse) {
        self.response = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCFantasyCraftingGetDataResponse {
    const NAME: &'static str = "CMsgClientToGCFantasyCraftingGetDataResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.response = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.user_data)?;
                },
                34 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.tablet_data)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.response {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.user_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.tablet_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.response {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.user_data.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.tablet_data.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCFantasyCraftingGetDataResponse {
        CMsgClientToGCFantasyCraftingGetDataResponse::new()
    }

    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.user_data.clear();
        self.tablet_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCFantasyCraftingGetDataResponse {
        static instance: CMsgClientToGCFantasyCraftingGetDataResponse = CMsgClientToGCFantasyCraftingGetDataResponse {
            response: ::std::option::Option::None,
            user_data: ::steam_vent_proto_common::protobuf::MessageField::none(),
            tablet_data: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientToGCFantasyCraftingGetDataResponse`
pub mod cmsg_client_to_gcfantasy_crafting_get_data_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgClientToGCFantasyCraftingGetDataResponse.EResponse)
    pub enum EResponse {
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingGetDataResponse.EResponse.k_eInternalError)
        k_eInternalError = 0,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingGetDataResponse.EResponse.k_eSuccess)
        k_eSuccess = 1,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingGetDataResponse.EResponse.k_eTooBusy)
        k_eTooBusy = 2,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingGetDataResponse.EResponse.k_eDisabled)
        k_eDisabled = 3,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingGetDataResponse.EResponse.k_eTimeout)
        k_eTimeout = 4,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingGetDataResponse.EResponse.k_eInvalidLeague)
        k_eInvalidLeague = 5,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for EResponse {
        const NAME: &'static str = "EResponse";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EResponse> {
            match value {
                0 => ::std::option::Option::Some(EResponse::k_eInternalError),
                1 => ::std::option::Option::Some(EResponse::k_eSuccess),
                2 => ::std::option::Option::Some(EResponse::k_eTooBusy),
                3 => ::std::option::Option::Some(EResponse::k_eDisabled),
                4 => ::std::option::Option::Some(EResponse::k_eTimeout),
                5 => ::std::option::Option::Some(EResponse::k_eInvalidLeague),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EResponse> {
            match str {
                "k_eInternalError" => ::std::option::Option::Some(EResponse::k_eInternalError),
                "k_eSuccess" => ::std::option::Option::Some(EResponse::k_eSuccess),
                "k_eTooBusy" => ::std::option::Option::Some(EResponse::k_eTooBusy),
                "k_eDisabled" => ::std::option::Option::Some(EResponse::k_eDisabled),
                "k_eTimeout" => ::std::option::Option::Some(EResponse::k_eTimeout),
                "k_eInvalidLeague" => ::std::option::Option::Some(EResponse::k_eInvalidLeague),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EResponse] = &[
            EResponse::k_eInternalError,
            EResponse::k_eSuccess,
            EResponse::k_eTooBusy,
            EResponse::k_eDisabled,
            EResponse::k_eTimeout,
            EResponse::k_eInvalidLeague,
        ];
    }

    impl ::std::default::Default for EResponse {
        fn default() -> Self {
            EResponse::k_eInternalError
        }
    }

}

// @@protoc_insertion_point(message:CMsgClientToGCFantasyCraftingPerformOperation)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCFantasyCraftingPerformOperation {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingPerformOperation.fantasy_league)
    pub fantasy_league: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingPerformOperation.tablet_id)
    pub tablet_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingPerformOperation.operation_id)
    pub operation_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingPerformOperation.extra_data)
    pub extra_data: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCFantasyCraftingPerformOperation.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCFantasyCraftingPerformOperation {
    fn default() -> &'a CMsgClientToGCFantasyCraftingPerformOperation {
        <CMsgClientToGCFantasyCraftingPerformOperation as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCFantasyCraftingPerformOperation {
    pub fn new() -> CMsgClientToGCFantasyCraftingPerformOperation {
        ::std::default::Default::default()
    }

    // optional uint32 fantasy_league = 1;

    pub fn fantasy_league(&self) -> u32 {
        self.fantasy_league.unwrap_or(0)
    }

    pub fn clear_fantasy_league(&mut self) {
        self.fantasy_league = ::std::option::Option::None;
    }

    pub fn has_fantasy_league(&self) -> bool {
        self.fantasy_league.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fantasy_league(&mut self, v: u32) {
        self.fantasy_league = ::std::option::Option::Some(v);
    }

    // optional uint32 tablet_id = 2;

    pub fn tablet_id(&self) -> u32 {
        self.tablet_id.unwrap_or(0)
    }

    pub fn clear_tablet_id(&mut self) {
        self.tablet_id = ::std::option::Option::None;
    }

    pub fn has_tablet_id(&self) -> bool {
        self.tablet_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tablet_id(&mut self, v: u32) {
        self.tablet_id = ::std::option::Option::Some(v);
    }

    // optional uint32 operation_id = 3;

    pub fn operation_id(&self) -> u32 {
        self.operation_id.unwrap_or(0)
    }

    pub fn clear_operation_id(&mut self) {
        self.operation_id = ::std::option::Option::None;
    }

    pub fn has_operation_id(&self) -> bool {
        self.operation_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_operation_id(&mut self, v: u32) {
        self.operation_id = ::std::option::Option::Some(v);
    }

    // optional uint64 extra_data = 4;

    pub fn extra_data(&self) -> u64 {
        self.extra_data.unwrap_or(0)
    }

    pub fn clear_extra_data(&mut self) {
        self.extra_data = ::std::option::Option::None;
    }

    pub fn has_extra_data(&self) -> bool {
        self.extra_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_extra_data(&mut self, v: u64) {
        self.extra_data = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCFantasyCraftingPerformOperation {
    const NAME: &'static str = "CMsgClientToGCFantasyCraftingPerformOperation";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.fantasy_league = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.tablet_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.operation_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.extra_data = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.fantasy_league {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.tablet_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.operation_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.extra_data {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(4, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.fantasy_league {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.tablet_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.operation_id {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.extra_data {
            os.write_uint64(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCFantasyCraftingPerformOperation {
        CMsgClientToGCFantasyCraftingPerformOperation::new()
    }

    fn clear(&mut self) {
        self.fantasy_league = ::std::option::Option::None;
        self.tablet_id = ::std::option::Option::None;
        self.operation_id = ::std::option::Option::None;
        self.extra_data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCFantasyCraftingPerformOperation {
        static instance: CMsgClientToGCFantasyCraftingPerformOperation = CMsgClientToGCFantasyCraftingPerformOperation {
            fantasy_league: ::std::option::Option::None,
            tablet_id: ::std::option::Option::None,
            operation_id: ::std::option::Option::None,
            extra_data: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCFantasyCraftingPerformOperationResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCFantasyCraftingPerformOperationResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingPerformOperationResponse.response)
    pub response: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_client_to_gcfantasy_crafting_perform_operation_response::EResponse>>,
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingPerformOperationResponse.operation_id)
    pub operation_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingPerformOperationResponse.tablet_id)
    pub tablet_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingPerformOperationResponse.user_data)
    pub user_data: ::steam_vent_proto_common::protobuf::MessageField<CMsgDotaFantasyCraftingUserData>,
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingPerformOperationResponse.tablet_data)
    pub tablet_data: ::steam_vent_proto_common::protobuf::MessageField<CMsgDotaFantasyCraftingTabletData>,
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingPerformOperationResponse.player_choices)
    pub player_choices: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingPerformOperationResponse.prefix_choices)
    pub prefix_choices: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingPerformOperationResponse.suffix_choices)
    pub suffix_choices: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingPerformOperationResponse.title_choices)
    pub title_choices: ::std::vec::Vec<cmsg_client_to_gcfantasy_crafting_perform_operation_response::TitleChoice>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCFantasyCraftingPerformOperationResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCFantasyCraftingPerformOperationResponse {
    fn default() -> &'a CMsgClientToGCFantasyCraftingPerformOperationResponse {
        <CMsgClientToGCFantasyCraftingPerformOperationResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCFantasyCraftingPerformOperationResponse {
    pub fn new() -> CMsgClientToGCFantasyCraftingPerformOperationResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgClientToGCFantasyCraftingPerformOperationResponse.EResponse response = 1;

    pub fn response(&self) -> cmsg_client_to_gcfantasy_crafting_perform_operation_response::EResponse {
        match self.response {
            Some(e) => e.enum_value_or(cmsg_client_to_gcfantasy_crafting_perform_operation_response::EResponse::k_eInternalError),
            None => cmsg_client_to_gcfantasy_crafting_perform_operation_response::EResponse::k_eInternalError,
        }
    }

    pub fn clear_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: cmsg_client_to_gcfantasy_crafting_perform_operation_response::EResponse) {
        self.response = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint32 operation_id = 2;

    pub fn operation_id(&self) -> u32 {
        self.operation_id.unwrap_or(0)
    }

    pub fn clear_operation_id(&mut self) {
        self.operation_id = ::std::option::Option::None;
    }

    pub fn has_operation_id(&self) -> bool {
        self.operation_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_operation_id(&mut self, v: u32) {
        self.operation_id = ::std::option::Option::Some(v);
    }

    // optional uint32 tablet_id = 7;

    pub fn tablet_id(&self) -> u32 {
        self.tablet_id.unwrap_or(0)
    }

    pub fn clear_tablet_id(&mut self) {
        self.tablet_id = ::std::option::Option::None;
    }

    pub fn has_tablet_id(&self) -> bool {
        self.tablet_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tablet_id(&mut self, v: u32) {
        self.tablet_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCFantasyCraftingPerformOperationResponse {
    const NAME: &'static str = "CMsgClientToGCFantasyCraftingPerformOperationResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.response = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                16 => {
                    self.operation_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.tablet_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                66 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.user_data)?;
                },
                74 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.tablet_data)?;
                },
                26 => {
                    is.read_repeated_packed_uint32_into(&mut self.player_choices)?;
                },
                24 => {
                    self.player_choices.push(is.read_uint32()?);
                },
                34 => {
                    is.read_repeated_packed_uint32_into(&mut self.prefix_choices)?;
                },
                32 => {
                    self.prefix_choices.push(is.read_uint32()?);
                },
                42 => {
                    is.read_repeated_packed_uint32_into(&mut self.suffix_choices)?;
                },
                40 => {
                    self.suffix_choices.push(is.read_uint32()?);
                },
                50 => {
                    self.title_choices.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.response {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.operation_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.tablet_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(7, v);
        }
        if let Some(v) = self.user_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.tablet_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.player_choices {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, *value);
        };
        for value in &self.prefix_choices {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, *value);
        };
        for value in &self.suffix_choices {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, *value);
        };
        for value in &self.title_choices {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.response {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.operation_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.tablet_id {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.user_data.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if let Some(v) = self.tablet_data.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        for v in &self.player_choices {
            os.write_uint32(3, *v)?;
        };
        for v in &self.prefix_choices {
            os.write_uint32(4, *v)?;
        };
        for v in &self.suffix_choices {
            os.write_uint32(5, *v)?;
        };
        for v in &self.title_choices {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCFantasyCraftingPerformOperationResponse {
        CMsgClientToGCFantasyCraftingPerformOperationResponse::new()
    }

    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.operation_id = ::std::option::Option::None;
        self.tablet_id = ::std::option::Option::None;
        self.user_data.clear();
        self.tablet_data.clear();
        self.player_choices.clear();
        self.prefix_choices.clear();
        self.suffix_choices.clear();
        self.title_choices.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCFantasyCraftingPerformOperationResponse {
        static instance: CMsgClientToGCFantasyCraftingPerformOperationResponse = CMsgClientToGCFantasyCraftingPerformOperationResponse {
            response: ::std::option::Option::None,
            operation_id: ::std::option::Option::None,
            tablet_id: ::std::option::Option::None,
            user_data: ::steam_vent_proto_common::protobuf::MessageField::none(),
            tablet_data: ::steam_vent_proto_common::protobuf::MessageField::none(),
            player_choices: ::std::vec::Vec::new(),
            prefix_choices: ::std::vec::Vec::new(),
            suffix_choices: ::std::vec::Vec::new(),
            title_choices: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientToGCFantasyCraftingPerformOperationResponse`
pub mod cmsg_client_to_gcfantasy_crafting_perform_operation_response {
    // @@protoc_insertion_point(message:CMsgClientToGCFantasyCraftingPerformOperationResponse.TitleChoice)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct TitleChoice {
        // message fields
        // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingPerformOperationResponse.TitleChoice.prefix_choice)
        pub prefix_choice: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingPerformOperationResponse.TitleChoice.suffix_choice)
        pub suffix_choice: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgClientToGCFantasyCraftingPerformOperationResponse.TitleChoice.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a TitleChoice {
        fn default() -> &'a TitleChoice {
            <TitleChoice as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl TitleChoice {
        pub fn new() -> TitleChoice {
            ::std::default::Default::default()
        }

        // optional uint32 prefix_choice = 1;

        pub fn prefix_choice(&self) -> u32 {
            self.prefix_choice.unwrap_or(0)
        }

        pub fn clear_prefix_choice(&mut self) {
            self.prefix_choice = ::std::option::Option::None;
        }

        pub fn has_prefix_choice(&self) -> bool {
            self.prefix_choice.is_some()
        }

        // Param is passed by value, moved
        pub fn set_prefix_choice(&mut self, v: u32) {
            self.prefix_choice = ::std::option::Option::Some(v);
        }

        // optional uint32 suffix_choice = 2;

        pub fn suffix_choice(&self) -> u32 {
            self.suffix_choice.unwrap_or(0)
        }

        pub fn clear_suffix_choice(&mut self) {
            self.suffix_choice = ::std::option::Option::None;
        }

        pub fn has_suffix_choice(&self) -> bool {
            self.suffix_choice.is_some()
        }

        // Param is passed by value, moved
        pub fn set_suffix_choice(&mut self, v: u32) {
            self.suffix_choice = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for TitleChoice {
        const NAME: &'static str = "TitleChoice";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.prefix_choice = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.suffix_choice = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.prefix_choice {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.suffix_choice {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.prefix_choice {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.suffix_choice {
                os.write_uint32(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> TitleChoice {
            TitleChoice::new()
        }

        fn clear(&mut self) {
            self.prefix_choice = ::std::option::Option::None;
            self.suffix_choice = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static TitleChoice {
            static instance: TitleChoice = TitleChoice {
                prefix_choice: ::std::option::Option::None,
                suffix_choice: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgClientToGCFantasyCraftingPerformOperationResponse.EResponse)
    pub enum EResponse {
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingPerformOperationResponse.EResponse.k_eInternalError)
        k_eInternalError = 0,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingPerformOperationResponse.EResponse.k_eSuccess)
        k_eSuccess = 1,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingPerformOperationResponse.EResponse.k_eTooBusy)
        k_eTooBusy = 2,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingPerformOperationResponse.EResponse.k_eDisabled)
        k_eDisabled = 3,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingPerformOperationResponse.EResponse.k_eTimeout)
        k_eTimeout = 4,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingPerformOperationResponse.EResponse.k_eInvalidLeague)
        k_eInvalidLeague = 5,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingPerformOperationResponse.EResponse.k_eNoTokens)
        k_eNoTokens = 6,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingPerformOperationResponse.EResponse.k_eMoreInfo)
        k_eMoreInfo = 7,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for EResponse {
        const NAME: &'static str = "EResponse";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EResponse> {
            match value {
                0 => ::std::option::Option::Some(EResponse::k_eInternalError),
                1 => ::std::option::Option::Some(EResponse::k_eSuccess),
                2 => ::std::option::Option::Some(EResponse::k_eTooBusy),
                3 => ::std::option::Option::Some(EResponse::k_eDisabled),
                4 => ::std::option::Option::Some(EResponse::k_eTimeout),
                5 => ::std::option::Option::Some(EResponse::k_eInvalidLeague),
                6 => ::std::option::Option::Some(EResponse::k_eNoTokens),
                7 => ::std::option::Option::Some(EResponse::k_eMoreInfo),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EResponse> {
            match str {
                "k_eInternalError" => ::std::option::Option::Some(EResponse::k_eInternalError),
                "k_eSuccess" => ::std::option::Option::Some(EResponse::k_eSuccess),
                "k_eTooBusy" => ::std::option::Option::Some(EResponse::k_eTooBusy),
                "k_eDisabled" => ::std::option::Option::Some(EResponse::k_eDisabled),
                "k_eTimeout" => ::std::option::Option::Some(EResponse::k_eTimeout),
                "k_eInvalidLeague" => ::std::option::Option::Some(EResponse::k_eInvalidLeague),
                "k_eNoTokens" => ::std::option::Option::Some(EResponse::k_eNoTokens),
                "k_eMoreInfo" => ::std::option::Option::Some(EResponse::k_eMoreInfo),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EResponse] = &[
            EResponse::k_eInternalError,
            EResponse::k_eSuccess,
            EResponse::k_eTooBusy,
            EResponse::k_eDisabled,
            EResponse::k_eTimeout,
            EResponse::k_eInvalidLeague,
            EResponse::k_eNoTokens,
            EResponse::k_eMoreInfo,
        ];
    }

    impl ::std::default::Default for EResponse {
        fn default() -> Self {
            EResponse::k_eInternalError
        }
    }

}

// @@protoc_insertion_point(message:CMsgGCToClientFantasyCraftingDataUpdated)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCToClientFantasyCraftingDataUpdated {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCToClientFantasyCraftingDataUpdated.fantasy_league)
    pub fantasy_league: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCToClientFantasyCraftingDataUpdated.user_data)
    pub user_data: ::steam_vent_proto_common::protobuf::MessageField<CMsgDotaFantasyCraftingUserData>,
    // @@protoc_insertion_point(field:CMsgGCToClientFantasyCraftingDataUpdated.tablet_data)
    pub tablet_data: ::steam_vent_proto_common::protobuf::MessageField<CMsgDotaFantasyCraftingTabletData>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCToClientFantasyCraftingDataUpdated.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCToClientFantasyCraftingDataUpdated {
    fn default() -> &'a CMsgGCToClientFantasyCraftingDataUpdated {
        <CMsgGCToClientFantasyCraftingDataUpdated as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCToClientFantasyCraftingDataUpdated {
    pub fn new() -> CMsgGCToClientFantasyCraftingDataUpdated {
        ::std::default::Default::default()
    }

    // optional uint32 fantasy_league = 1;

    pub fn fantasy_league(&self) -> u32 {
        self.fantasy_league.unwrap_or(0)
    }

    pub fn clear_fantasy_league(&mut self) {
        self.fantasy_league = ::std::option::Option::None;
    }

    pub fn has_fantasy_league(&self) -> bool {
        self.fantasy_league.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fantasy_league(&mut self, v: u32) {
        self.fantasy_league = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCToClientFantasyCraftingDataUpdated {
    const NAME: &'static str = "CMsgGCToClientFantasyCraftingDataUpdated";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.fantasy_league = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.user_data)?;
                },
                34 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.tablet_data)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.fantasy_league {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.user_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.tablet_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.fantasy_league {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.user_data.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.tablet_data.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCToClientFantasyCraftingDataUpdated {
        CMsgGCToClientFantasyCraftingDataUpdated::new()
    }

    fn clear(&mut self) {
        self.fantasy_league = ::std::option::Option::None;
        self.user_data.clear();
        self.tablet_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCToClientFantasyCraftingDataUpdated {
        static instance: CMsgGCToClientFantasyCraftingDataUpdated = CMsgGCToClientFantasyCraftingDataUpdated {
            fantasy_league: ::std::option::Option::None,
            user_data: ::steam_vent_proto_common::protobuf::MessageField::none(),
            tablet_data: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCFantasyCraftingDevModifyTablet)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCFantasyCraftingDevModifyTablet {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingDevModifyTablet.fantasy_league)
    pub fantasy_league: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingDevModifyTablet.reset_tablet)
    pub reset_tablet: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingDevModifyTablet.modify_tokens)
    pub modify_tokens: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingDevModifyTablet.upgrade_tablets)
    pub upgrade_tablets: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingDevModifyTablet.fantasy_period)
    pub fantasy_period: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCFantasyCraftingDevModifyTablet.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCFantasyCraftingDevModifyTablet {
    fn default() -> &'a CMsgClientToGCFantasyCraftingDevModifyTablet {
        <CMsgClientToGCFantasyCraftingDevModifyTablet as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCFantasyCraftingDevModifyTablet {
    pub fn new() -> CMsgClientToGCFantasyCraftingDevModifyTablet {
        ::std::default::Default::default()
    }

    // optional uint32 fantasy_league = 1;

    pub fn fantasy_league(&self) -> u32 {
        self.fantasy_league.unwrap_or(0)
    }

    pub fn clear_fantasy_league(&mut self) {
        self.fantasy_league = ::std::option::Option::None;
    }

    pub fn has_fantasy_league(&self) -> bool {
        self.fantasy_league.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fantasy_league(&mut self, v: u32) {
        self.fantasy_league = ::std::option::Option::Some(v);
    }

    // optional bool reset_tablet = 2;

    pub fn reset_tablet(&self) -> bool {
        self.reset_tablet.unwrap_or(false)
    }

    pub fn clear_reset_tablet(&mut self) {
        self.reset_tablet = ::std::option::Option::None;
    }

    pub fn has_reset_tablet(&self) -> bool {
        self.reset_tablet.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reset_tablet(&mut self, v: bool) {
        self.reset_tablet = ::std::option::Option::Some(v);
    }

    // optional uint32 modify_tokens = 3;

    pub fn modify_tokens(&self) -> u32 {
        self.modify_tokens.unwrap_or(0)
    }

    pub fn clear_modify_tokens(&mut self) {
        self.modify_tokens = ::std::option::Option::None;
    }

    pub fn has_modify_tokens(&self) -> bool {
        self.modify_tokens.is_some()
    }

    // Param is passed by value, moved
    pub fn set_modify_tokens(&mut self, v: u32) {
        self.modify_tokens = ::std::option::Option::Some(v);
    }

    // optional bool upgrade_tablets = 6;

    pub fn upgrade_tablets(&self) -> bool {
        self.upgrade_tablets.unwrap_or(false)
    }

    pub fn clear_upgrade_tablets(&mut self) {
        self.upgrade_tablets = ::std::option::Option::None;
    }

    pub fn has_upgrade_tablets(&self) -> bool {
        self.upgrade_tablets.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upgrade_tablets(&mut self, v: bool) {
        self.upgrade_tablets = ::std::option::Option::Some(v);
    }

    // optional uint32 fantasy_period = 5;

    pub fn fantasy_period(&self) -> u32 {
        self.fantasy_period.unwrap_or(4294967295u32)
    }

    pub fn clear_fantasy_period(&mut self) {
        self.fantasy_period = ::std::option::Option::None;
    }

    pub fn has_fantasy_period(&self) -> bool {
        self.fantasy_period.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fantasy_period(&mut self, v: u32) {
        self.fantasy_period = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCFantasyCraftingDevModifyTablet {
    const NAME: &'static str = "CMsgClientToGCFantasyCraftingDevModifyTablet";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.fantasy_league = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.reset_tablet = ::std::option::Option::Some(is.read_bool()?);
                },
                24 => {
                    self.modify_tokens = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.upgrade_tablets = ::std::option::Option::Some(is.read_bool()?);
                },
                40 => {
                    self.fantasy_period = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.fantasy_league {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.reset_tablet {
            my_size += 1 + 1;
        }
        if let Some(v) = self.modify_tokens {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.upgrade_tablets {
            my_size += 1 + 1;
        }
        if let Some(v) = self.fantasy_period {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.fantasy_league {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.reset_tablet {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.modify_tokens {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.upgrade_tablets {
            os.write_bool(6, v)?;
        }
        if let Some(v) = self.fantasy_period {
            os.write_uint32(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCFantasyCraftingDevModifyTablet {
        CMsgClientToGCFantasyCraftingDevModifyTablet::new()
    }

    fn clear(&mut self) {
        self.fantasy_league = ::std::option::Option::None;
        self.reset_tablet = ::std::option::Option::None;
        self.modify_tokens = ::std::option::Option::None;
        self.upgrade_tablets = ::std::option::Option::None;
        self.fantasy_period = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCFantasyCraftingDevModifyTablet {
        static instance: CMsgClientToGCFantasyCraftingDevModifyTablet = CMsgClientToGCFantasyCraftingDevModifyTablet {
            fantasy_league: ::std::option::Option::None,
            reset_tablet: ::std::option::Option::None,
            modify_tokens: ::std::option::Option::None,
            upgrade_tablets: ::std::option::Option::None,
            fantasy_period: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCFantasyCraftingDevModifyTabletResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCFantasyCraftingDevModifyTabletResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingDevModifyTabletResponse.response)
    pub response: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_client_to_gcfantasy_crafting_dev_modify_tablet_response::EResponse>>,
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingDevModifyTabletResponse.user_data)
    pub user_data: ::steam_vent_proto_common::protobuf::MessageField<CMsgDotaFantasyCraftingUserData>,
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingDevModifyTabletResponse.tablet_data)
    pub tablet_data: ::steam_vent_proto_common::protobuf::MessageField<CMsgDotaFantasyCraftingTabletData>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCFantasyCraftingDevModifyTabletResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCFantasyCraftingDevModifyTabletResponse {
    fn default() -> &'a CMsgClientToGCFantasyCraftingDevModifyTabletResponse {
        <CMsgClientToGCFantasyCraftingDevModifyTabletResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCFantasyCraftingDevModifyTabletResponse {
    pub fn new() -> CMsgClientToGCFantasyCraftingDevModifyTabletResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgClientToGCFantasyCraftingDevModifyTabletResponse.EResponse response = 1;

    pub fn response(&self) -> cmsg_client_to_gcfantasy_crafting_dev_modify_tablet_response::EResponse {
        match self.response {
            Some(e) => e.enum_value_or(cmsg_client_to_gcfantasy_crafting_dev_modify_tablet_response::EResponse::k_eInternalError),
            None => cmsg_client_to_gcfantasy_crafting_dev_modify_tablet_response::EResponse::k_eInternalError,
        }
    }

    pub fn clear_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: cmsg_client_to_gcfantasy_crafting_dev_modify_tablet_response::EResponse) {
        self.response = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCFantasyCraftingDevModifyTabletResponse {
    const NAME: &'static str = "CMsgClientToGCFantasyCraftingDevModifyTabletResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.response = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.user_data)?;
                },
                26 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.tablet_data)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.response {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.user_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.tablet_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.response {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.user_data.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.tablet_data.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCFantasyCraftingDevModifyTabletResponse {
        CMsgClientToGCFantasyCraftingDevModifyTabletResponse::new()
    }

    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.user_data.clear();
        self.tablet_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCFantasyCraftingDevModifyTabletResponse {
        static instance: CMsgClientToGCFantasyCraftingDevModifyTabletResponse = CMsgClientToGCFantasyCraftingDevModifyTabletResponse {
            response: ::std::option::Option::None,
            user_data: ::steam_vent_proto_common::protobuf::MessageField::none(),
            tablet_data: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientToGCFantasyCraftingDevModifyTabletResponse`
pub mod cmsg_client_to_gcfantasy_crafting_dev_modify_tablet_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgClientToGCFantasyCraftingDevModifyTabletResponse.EResponse)
    pub enum EResponse {
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingDevModifyTabletResponse.EResponse.k_eInternalError)
        k_eInternalError = 0,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingDevModifyTabletResponse.EResponse.k_eSuccess)
        k_eSuccess = 1,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingDevModifyTabletResponse.EResponse.k_eTooBusy)
        k_eTooBusy = 2,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingDevModifyTabletResponse.EResponse.k_eDisabled)
        k_eDisabled = 3,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingDevModifyTabletResponse.EResponse.k_eTimeout)
        k_eTimeout = 4,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingDevModifyTabletResponse.EResponse.k_eInvalidLeague)
        k_eInvalidLeague = 5,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for EResponse {
        const NAME: &'static str = "EResponse";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EResponse> {
            match value {
                0 => ::std::option::Option::Some(EResponse::k_eInternalError),
                1 => ::std::option::Option::Some(EResponse::k_eSuccess),
                2 => ::std::option::Option::Some(EResponse::k_eTooBusy),
                3 => ::std::option::Option::Some(EResponse::k_eDisabled),
                4 => ::std::option::Option::Some(EResponse::k_eTimeout),
                5 => ::std::option::Option::Some(EResponse::k_eInvalidLeague),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EResponse> {
            match str {
                "k_eInternalError" => ::std::option::Option::Some(EResponse::k_eInternalError),
                "k_eSuccess" => ::std::option::Option::Some(EResponse::k_eSuccess),
                "k_eTooBusy" => ::std::option::Option::Some(EResponse::k_eTooBusy),
                "k_eDisabled" => ::std::option::Option::Some(EResponse::k_eDisabled),
                "k_eTimeout" => ::std::option::Option::Some(EResponse::k_eTimeout),
                "k_eInvalidLeague" => ::std::option::Option::Some(EResponse::k_eInvalidLeague),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EResponse] = &[
            EResponse::k_eInternalError,
            EResponse::k_eSuccess,
            EResponse::k_eTooBusy,
            EResponse::k_eDisabled,
            EResponse::k_eTimeout,
            EResponse::k_eInvalidLeague,
        ];
    }

    impl ::std::default::Default for EResponse {
        fn default() -> Self {
            EResponse::k_eInternalError
        }
    }

}

// @@protoc_insertion_point(message:CMsgClientToGCFantasyCraftingSelectPlayer)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCFantasyCraftingSelectPlayer {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingSelectPlayer.fantasy_league)
    pub fantasy_league: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingSelectPlayer.account_id)
    pub account_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCFantasyCraftingSelectPlayer.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCFantasyCraftingSelectPlayer {
    fn default() -> &'a CMsgClientToGCFantasyCraftingSelectPlayer {
        <CMsgClientToGCFantasyCraftingSelectPlayer as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCFantasyCraftingSelectPlayer {
    pub fn new() -> CMsgClientToGCFantasyCraftingSelectPlayer {
        ::std::default::Default::default()
    }

    // optional uint32 fantasy_league = 1;

    pub fn fantasy_league(&self) -> u32 {
        self.fantasy_league.unwrap_or(0)
    }

    pub fn clear_fantasy_league(&mut self) {
        self.fantasy_league = ::std::option::Option::None;
    }

    pub fn has_fantasy_league(&self) -> bool {
        self.fantasy_league.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fantasy_league(&mut self, v: u32) {
        self.fantasy_league = ::std::option::Option::Some(v);
    }

    // optional uint32 account_id = 2;

    pub fn account_id(&self) -> u32 {
        self.account_id.unwrap_or(0)
    }

    pub fn clear_account_id(&mut self) {
        self.account_id = ::std::option::Option::None;
    }

    pub fn has_account_id(&self) -> bool {
        self.account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: u32) {
        self.account_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCFantasyCraftingSelectPlayer {
    const NAME: &'static str = "CMsgClientToGCFantasyCraftingSelectPlayer";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.fantasy_league = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.fantasy_league {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.fantasy_league {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.account_id {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCFantasyCraftingSelectPlayer {
        CMsgClientToGCFantasyCraftingSelectPlayer::new()
    }

    fn clear(&mut self) {
        self.fantasy_league = ::std::option::Option::None;
        self.account_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCFantasyCraftingSelectPlayer {
        static instance: CMsgClientToGCFantasyCraftingSelectPlayer = CMsgClientToGCFantasyCraftingSelectPlayer {
            fantasy_league: ::std::option::Option::None,
            account_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCFantasyCraftingSelectPlayerResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCFantasyCraftingSelectPlayerResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingSelectPlayerResponse.response)
    pub response: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_client_to_gcfantasy_crafting_select_player_response::EResponse>>,
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingSelectPlayerResponse.tablet_data)
    pub tablet_data: ::steam_vent_proto_common::protobuf::MessageField<CMsgDotaFantasyCraftingTabletData>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCFantasyCraftingSelectPlayerResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCFantasyCraftingSelectPlayerResponse {
    fn default() -> &'a CMsgClientToGCFantasyCraftingSelectPlayerResponse {
        <CMsgClientToGCFantasyCraftingSelectPlayerResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCFantasyCraftingSelectPlayerResponse {
    pub fn new() -> CMsgClientToGCFantasyCraftingSelectPlayerResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgClientToGCFantasyCraftingSelectPlayerResponse.EResponse response = 1;

    pub fn response(&self) -> cmsg_client_to_gcfantasy_crafting_select_player_response::EResponse {
        match self.response {
            Some(e) => e.enum_value_or(cmsg_client_to_gcfantasy_crafting_select_player_response::EResponse::k_eInternalError),
            None => cmsg_client_to_gcfantasy_crafting_select_player_response::EResponse::k_eInternalError,
        }
    }

    pub fn clear_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: cmsg_client_to_gcfantasy_crafting_select_player_response::EResponse) {
        self.response = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCFantasyCraftingSelectPlayerResponse {
    const NAME: &'static str = "CMsgClientToGCFantasyCraftingSelectPlayerResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.response = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.tablet_data)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.response {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.tablet_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.response {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.tablet_data.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCFantasyCraftingSelectPlayerResponse {
        CMsgClientToGCFantasyCraftingSelectPlayerResponse::new()
    }

    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.tablet_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCFantasyCraftingSelectPlayerResponse {
        static instance: CMsgClientToGCFantasyCraftingSelectPlayerResponse = CMsgClientToGCFantasyCraftingSelectPlayerResponse {
            response: ::std::option::Option::None,
            tablet_data: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientToGCFantasyCraftingSelectPlayerResponse`
pub mod cmsg_client_to_gcfantasy_crafting_select_player_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgClientToGCFantasyCraftingSelectPlayerResponse.EResponse)
    pub enum EResponse {
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingSelectPlayerResponse.EResponse.k_eInternalError)
        k_eInternalError = 0,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingSelectPlayerResponse.EResponse.k_eSuccess)
        k_eSuccess = 1,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingSelectPlayerResponse.EResponse.k_eTooBusy)
        k_eTooBusy = 2,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingSelectPlayerResponse.EResponse.k_eDisabled)
        k_eDisabled = 3,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingSelectPlayerResponse.EResponse.k_eTimeout)
        k_eTimeout = 4,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingSelectPlayerResponse.EResponse.k_eInvalidLeague)
        k_eInvalidLeague = 5,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingSelectPlayerResponse.EResponse.k_eInvalidPlayer)
        k_eInvalidPlayer = 6,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for EResponse {
        const NAME: &'static str = "EResponse";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EResponse> {
            match value {
                0 => ::std::option::Option::Some(EResponse::k_eInternalError),
                1 => ::std::option::Option::Some(EResponse::k_eSuccess),
                2 => ::std::option::Option::Some(EResponse::k_eTooBusy),
                3 => ::std::option::Option::Some(EResponse::k_eDisabled),
                4 => ::std::option::Option::Some(EResponse::k_eTimeout),
                5 => ::std::option::Option::Some(EResponse::k_eInvalidLeague),
                6 => ::std::option::Option::Some(EResponse::k_eInvalidPlayer),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EResponse> {
            match str {
                "k_eInternalError" => ::std::option::Option::Some(EResponse::k_eInternalError),
                "k_eSuccess" => ::std::option::Option::Some(EResponse::k_eSuccess),
                "k_eTooBusy" => ::std::option::Option::Some(EResponse::k_eTooBusy),
                "k_eDisabled" => ::std::option::Option::Some(EResponse::k_eDisabled),
                "k_eTimeout" => ::std::option::Option::Some(EResponse::k_eTimeout),
                "k_eInvalidLeague" => ::std::option::Option::Some(EResponse::k_eInvalidLeague),
                "k_eInvalidPlayer" => ::std::option::Option::Some(EResponse::k_eInvalidPlayer),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EResponse] = &[
            EResponse::k_eInternalError,
            EResponse::k_eSuccess,
            EResponse::k_eTooBusy,
            EResponse::k_eDisabled,
            EResponse::k_eTimeout,
            EResponse::k_eInvalidLeague,
            EResponse::k_eInvalidPlayer,
        ];
    }

    impl ::std::default::Default for EResponse {
        fn default() -> Self {
            EResponse::k_eInternalError
        }
    }

}

// @@protoc_insertion_point(message:CMsgClientToGCFantasyCraftingGenerateTablets)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCFantasyCraftingGenerateTablets {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingGenerateTablets.fantasy_league)
    pub fantasy_league: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingGenerateTablets.account_ids)
    pub account_ids: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCFantasyCraftingGenerateTablets.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCFantasyCraftingGenerateTablets {
    fn default() -> &'a CMsgClientToGCFantasyCraftingGenerateTablets {
        <CMsgClientToGCFantasyCraftingGenerateTablets as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCFantasyCraftingGenerateTablets {
    pub fn new() -> CMsgClientToGCFantasyCraftingGenerateTablets {
        ::std::default::Default::default()
    }

    // optional uint32 fantasy_league = 1;

    pub fn fantasy_league(&self) -> u32 {
        self.fantasy_league.unwrap_or(0)
    }

    pub fn clear_fantasy_league(&mut self) {
        self.fantasy_league = ::std::option::Option::None;
    }

    pub fn has_fantasy_league(&self) -> bool {
        self.fantasy_league.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fantasy_league(&mut self, v: u32) {
        self.fantasy_league = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCFantasyCraftingGenerateTablets {
    const NAME: &'static str = "CMsgClientToGCFantasyCraftingGenerateTablets";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.fantasy_league = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    is.read_repeated_packed_uint32_into(&mut self.account_ids)?;
                },
                16 => {
                    self.account_ids.push(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.fantasy_league {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        for value in &self.account_ids {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, *value);
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.fantasy_league {
            os.write_uint32(1, v)?;
        }
        for v in &self.account_ids {
            os.write_uint32(2, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCFantasyCraftingGenerateTablets {
        CMsgClientToGCFantasyCraftingGenerateTablets::new()
    }

    fn clear(&mut self) {
        self.fantasy_league = ::std::option::Option::None;
        self.account_ids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCFantasyCraftingGenerateTablets {
        static instance: CMsgClientToGCFantasyCraftingGenerateTablets = CMsgClientToGCFantasyCraftingGenerateTablets {
            fantasy_league: ::std::option::Option::None,
            account_ids: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCFantasyCraftingGenerateTabletsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCFantasyCraftingGenerateTabletsResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingGenerateTabletsResponse.response)
    pub response: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_client_to_gcfantasy_crafting_generate_tablets_response::EResponse>>,
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingGenerateTabletsResponse.user_data)
    pub user_data: ::steam_vent_proto_common::protobuf::MessageField<CMsgDotaFantasyCraftingUserData>,
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingGenerateTabletsResponse.tablet_data)
    pub tablet_data: ::steam_vent_proto_common::protobuf::MessageField<CMsgDotaFantasyCraftingTabletData>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCFantasyCraftingGenerateTabletsResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCFantasyCraftingGenerateTabletsResponse {
    fn default() -> &'a CMsgClientToGCFantasyCraftingGenerateTabletsResponse {
        <CMsgClientToGCFantasyCraftingGenerateTabletsResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCFantasyCraftingGenerateTabletsResponse {
    pub fn new() -> CMsgClientToGCFantasyCraftingGenerateTabletsResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgClientToGCFantasyCraftingGenerateTabletsResponse.EResponse response = 1;

    pub fn response(&self) -> cmsg_client_to_gcfantasy_crafting_generate_tablets_response::EResponse {
        match self.response {
            Some(e) => e.enum_value_or(cmsg_client_to_gcfantasy_crafting_generate_tablets_response::EResponse::k_eInternalError),
            None => cmsg_client_to_gcfantasy_crafting_generate_tablets_response::EResponse::k_eInternalError,
        }
    }

    pub fn clear_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: cmsg_client_to_gcfantasy_crafting_generate_tablets_response::EResponse) {
        self.response = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCFantasyCraftingGenerateTabletsResponse {
    const NAME: &'static str = "CMsgClientToGCFantasyCraftingGenerateTabletsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.response = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.user_data)?;
                },
                26 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.tablet_data)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.response {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.user_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.tablet_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.response {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.user_data.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.tablet_data.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCFantasyCraftingGenerateTabletsResponse {
        CMsgClientToGCFantasyCraftingGenerateTabletsResponse::new()
    }

    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.user_data.clear();
        self.tablet_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCFantasyCraftingGenerateTabletsResponse {
        static instance: CMsgClientToGCFantasyCraftingGenerateTabletsResponse = CMsgClientToGCFantasyCraftingGenerateTabletsResponse {
            response: ::std::option::Option::None,
            user_data: ::steam_vent_proto_common::protobuf::MessageField::none(),
            tablet_data: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientToGCFantasyCraftingGenerateTabletsResponse`
pub mod cmsg_client_to_gcfantasy_crafting_generate_tablets_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgClientToGCFantasyCraftingGenerateTabletsResponse.EResponse)
    pub enum EResponse {
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingGenerateTabletsResponse.EResponse.k_eInternalError)
        k_eInternalError = 0,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingGenerateTabletsResponse.EResponse.k_eSuccess)
        k_eSuccess = 1,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingGenerateTabletsResponse.EResponse.k_eTooBusy)
        k_eTooBusy = 2,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingGenerateTabletsResponse.EResponse.k_eDisabled)
        k_eDisabled = 3,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingGenerateTabletsResponse.EResponse.k_eTimeout)
        k_eTimeout = 4,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingGenerateTabletsResponse.EResponse.k_eInvalidLeague)
        k_eInvalidLeague = 5,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingGenerateTabletsResponse.EResponse.k_eInvalidPlayer)
        k_eInvalidPlayer = 6,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for EResponse {
        const NAME: &'static str = "EResponse";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EResponse> {
            match value {
                0 => ::std::option::Option::Some(EResponse::k_eInternalError),
                1 => ::std::option::Option::Some(EResponse::k_eSuccess),
                2 => ::std::option::Option::Some(EResponse::k_eTooBusy),
                3 => ::std::option::Option::Some(EResponse::k_eDisabled),
                4 => ::std::option::Option::Some(EResponse::k_eTimeout),
                5 => ::std::option::Option::Some(EResponse::k_eInvalidLeague),
                6 => ::std::option::Option::Some(EResponse::k_eInvalidPlayer),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EResponse> {
            match str {
                "k_eInternalError" => ::std::option::Option::Some(EResponse::k_eInternalError),
                "k_eSuccess" => ::std::option::Option::Some(EResponse::k_eSuccess),
                "k_eTooBusy" => ::std::option::Option::Some(EResponse::k_eTooBusy),
                "k_eDisabled" => ::std::option::Option::Some(EResponse::k_eDisabled),
                "k_eTimeout" => ::std::option::Option::Some(EResponse::k_eTimeout),
                "k_eInvalidLeague" => ::std::option::Option::Some(EResponse::k_eInvalidLeague),
                "k_eInvalidPlayer" => ::std::option::Option::Some(EResponse::k_eInvalidPlayer),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EResponse] = &[
            EResponse::k_eInternalError,
            EResponse::k_eSuccess,
            EResponse::k_eTooBusy,
            EResponse::k_eDisabled,
            EResponse::k_eTimeout,
            EResponse::k_eInvalidLeague,
            EResponse::k_eInvalidPlayer,
        ];
    }

    impl ::std::default::Default for EResponse {
        fn default() -> Self {
            EResponse::k_eInternalError
        }
    }

}

// @@protoc_insertion_point(message:CMsgClientToGcFantasyCraftingUpgradeTablets)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGcFantasyCraftingUpgradeTablets {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGcFantasyCraftingUpgradeTablets.fantasy_league)
    pub fantasy_league: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGcFantasyCraftingUpgradeTablets.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGcFantasyCraftingUpgradeTablets {
    fn default() -> &'a CMsgClientToGcFantasyCraftingUpgradeTablets {
        <CMsgClientToGcFantasyCraftingUpgradeTablets as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGcFantasyCraftingUpgradeTablets {
    pub fn new() -> CMsgClientToGcFantasyCraftingUpgradeTablets {
        ::std::default::Default::default()
    }

    // optional uint32 fantasy_league = 1;

    pub fn fantasy_league(&self) -> u32 {
        self.fantasy_league.unwrap_or(0)
    }

    pub fn clear_fantasy_league(&mut self) {
        self.fantasy_league = ::std::option::Option::None;
    }

    pub fn has_fantasy_league(&self) -> bool {
        self.fantasy_league.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fantasy_league(&mut self, v: u32) {
        self.fantasy_league = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGcFantasyCraftingUpgradeTablets {
    const NAME: &'static str = "CMsgClientToGcFantasyCraftingUpgradeTablets";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.fantasy_league = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.fantasy_league {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.fantasy_league {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGcFantasyCraftingUpgradeTablets {
        CMsgClientToGcFantasyCraftingUpgradeTablets::new()
    }

    fn clear(&mut self) {
        self.fantasy_league = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGcFantasyCraftingUpgradeTablets {
        static instance: CMsgClientToGcFantasyCraftingUpgradeTablets = CMsgClientToGcFantasyCraftingUpgradeTablets {
            fantasy_league: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGcFantasyCraftingUpgradeTabletsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGcFantasyCraftingUpgradeTabletsResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGcFantasyCraftingUpgradeTabletsResponse.response)
    pub response: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_client_to_gc_fantasy_crafting_upgrade_tablets_response::EResponse>>,
    // @@protoc_insertion_point(field:CMsgClientToGcFantasyCraftingUpgradeTabletsResponse.tablet_data)
    pub tablet_data: ::steam_vent_proto_common::protobuf::MessageField<CMsgDotaFantasyCraftingTabletData>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGcFantasyCraftingUpgradeTabletsResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGcFantasyCraftingUpgradeTabletsResponse {
    fn default() -> &'a CMsgClientToGcFantasyCraftingUpgradeTabletsResponse {
        <CMsgClientToGcFantasyCraftingUpgradeTabletsResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGcFantasyCraftingUpgradeTabletsResponse {
    pub fn new() -> CMsgClientToGcFantasyCraftingUpgradeTabletsResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgClientToGcFantasyCraftingUpgradeTabletsResponse.EResponse response = 1;

    pub fn response(&self) -> cmsg_client_to_gc_fantasy_crafting_upgrade_tablets_response::EResponse {
        match self.response {
            Some(e) => e.enum_value_or(cmsg_client_to_gc_fantasy_crafting_upgrade_tablets_response::EResponse::k_eInternalError),
            None => cmsg_client_to_gc_fantasy_crafting_upgrade_tablets_response::EResponse::k_eInternalError,
        }
    }

    pub fn clear_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: cmsg_client_to_gc_fantasy_crafting_upgrade_tablets_response::EResponse) {
        self.response = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGcFantasyCraftingUpgradeTabletsResponse {
    const NAME: &'static str = "CMsgClientToGcFantasyCraftingUpgradeTabletsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.response = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                26 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.tablet_data)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.response {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.tablet_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.response {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.tablet_data.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGcFantasyCraftingUpgradeTabletsResponse {
        CMsgClientToGcFantasyCraftingUpgradeTabletsResponse::new()
    }

    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.tablet_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGcFantasyCraftingUpgradeTabletsResponse {
        static instance: CMsgClientToGcFantasyCraftingUpgradeTabletsResponse = CMsgClientToGcFantasyCraftingUpgradeTabletsResponse {
            response: ::std::option::Option::None,
            tablet_data: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientToGcFantasyCraftingUpgradeTabletsResponse`
pub mod cmsg_client_to_gc_fantasy_crafting_upgrade_tablets_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgClientToGcFantasyCraftingUpgradeTabletsResponse.EResponse)
    pub enum EResponse {
        // @@protoc_insertion_point(enum_value:CMsgClientToGcFantasyCraftingUpgradeTabletsResponse.EResponse.k_eInternalError)
        k_eInternalError = 0,
        // @@protoc_insertion_point(enum_value:CMsgClientToGcFantasyCraftingUpgradeTabletsResponse.EResponse.k_eSuccess)
        k_eSuccess = 1,
        // @@protoc_insertion_point(enum_value:CMsgClientToGcFantasyCraftingUpgradeTabletsResponse.EResponse.k_eTooBusy)
        k_eTooBusy = 2,
        // @@protoc_insertion_point(enum_value:CMsgClientToGcFantasyCraftingUpgradeTabletsResponse.EResponse.k_eDisabled)
        k_eDisabled = 3,
        // @@protoc_insertion_point(enum_value:CMsgClientToGcFantasyCraftingUpgradeTabletsResponse.EResponse.k_eTimeout)
        k_eTimeout = 4,
        // @@protoc_insertion_point(enum_value:CMsgClientToGcFantasyCraftingUpgradeTabletsResponse.EResponse.k_eInvalidLeague)
        k_eInvalidLeague = 5,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for EResponse {
        const NAME: &'static str = "EResponse";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EResponse> {
            match value {
                0 => ::std::option::Option::Some(EResponse::k_eInternalError),
                1 => ::std::option::Option::Some(EResponse::k_eSuccess),
                2 => ::std::option::Option::Some(EResponse::k_eTooBusy),
                3 => ::std::option::Option::Some(EResponse::k_eDisabled),
                4 => ::std::option::Option::Some(EResponse::k_eTimeout),
                5 => ::std::option::Option::Some(EResponse::k_eInvalidLeague),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EResponse> {
            match str {
                "k_eInternalError" => ::std::option::Option::Some(EResponse::k_eInternalError),
                "k_eSuccess" => ::std::option::Option::Some(EResponse::k_eSuccess),
                "k_eTooBusy" => ::std::option::Option::Some(EResponse::k_eTooBusy),
                "k_eDisabled" => ::std::option::Option::Some(EResponse::k_eDisabled),
                "k_eTimeout" => ::std::option::Option::Some(EResponse::k_eTimeout),
                "k_eInvalidLeague" => ::std::option::Option::Some(EResponse::k_eInvalidLeague),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EResponse] = &[
            EResponse::k_eInternalError,
            EResponse::k_eSuccess,
            EResponse::k_eTooBusy,
            EResponse::k_eDisabled,
            EResponse::k_eTimeout,
            EResponse::k_eInvalidLeague,
        ];
    }

    impl ::std::default::Default for EResponse {
        fn default() -> Self {
            EResponse::k_eInternalError
        }
    }

}

// @@protoc_insertion_point(message:CMsgClientToGCFantasyCraftingRerollOptions)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCFantasyCraftingRerollOptions {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingRerollOptions.fantasy_league)
    pub fantasy_league: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCFantasyCraftingRerollOptions.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCFantasyCraftingRerollOptions {
    fn default() -> &'a CMsgClientToGCFantasyCraftingRerollOptions {
        <CMsgClientToGCFantasyCraftingRerollOptions as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCFantasyCraftingRerollOptions {
    pub fn new() -> CMsgClientToGCFantasyCraftingRerollOptions {
        ::std::default::Default::default()
    }

    // optional uint32 fantasy_league = 1;

    pub fn fantasy_league(&self) -> u32 {
        self.fantasy_league.unwrap_or(0)
    }

    pub fn clear_fantasy_league(&mut self) {
        self.fantasy_league = ::std::option::Option::None;
    }

    pub fn has_fantasy_league(&self) -> bool {
        self.fantasy_league.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fantasy_league(&mut self, v: u32) {
        self.fantasy_league = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCFantasyCraftingRerollOptions {
    const NAME: &'static str = "CMsgClientToGCFantasyCraftingRerollOptions";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.fantasy_league = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.fantasy_league {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.fantasy_league {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCFantasyCraftingRerollOptions {
        CMsgClientToGCFantasyCraftingRerollOptions::new()
    }

    fn clear(&mut self) {
        self.fantasy_league = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCFantasyCraftingRerollOptions {
        static instance: CMsgClientToGCFantasyCraftingRerollOptions = CMsgClientToGCFantasyCraftingRerollOptions {
            fantasy_league: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCFantasyCraftingRerollOptionsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCFantasyCraftingRerollOptionsResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingRerollOptionsResponse.response)
    pub response: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_client_to_gcfantasy_crafting_reroll_options_response::EResponse>>,
    // @@protoc_insertion_point(field:CMsgClientToGCFantasyCraftingRerollOptionsResponse.user_data)
    pub user_data: ::steam_vent_proto_common::protobuf::MessageField<CMsgDotaFantasyCraftingUserData>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCFantasyCraftingRerollOptionsResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCFantasyCraftingRerollOptionsResponse {
    fn default() -> &'a CMsgClientToGCFantasyCraftingRerollOptionsResponse {
        <CMsgClientToGCFantasyCraftingRerollOptionsResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCFantasyCraftingRerollOptionsResponse {
    pub fn new() -> CMsgClientToGCFantasyCraftingRerollOptionsResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgClientToGCFantasyCraftingRerollOptionsResponse.EResponse response = 1;

    pub fn response(&self) -> cmsg_client_to_gcfantasy_crafting_reroll_options_response::EResponse {
        match self.response {
            Some(e) => e.enum_value_or(cmsg_client_to_gcfantasy_crafting_reroll_options_response::EResponse::k_eInternalError),
            None => cmsg_client_to_gcfantasy_crafting_reroll_options_response::EResponse::k_eInternalError,
        }
    }

    pub fn clear_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: cmsg_client_to_gcfantasy_crafting_reroll_options_response::EResponse) {
        self.response = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCFantasyCraftingRerollOptionsResponse {
    const NAME: &'static str = "CMsgClientToGCFantasyCraftingRerollOptionsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.response = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.user_data)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.response {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.user_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.response {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.user_data.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCFantasyCraftingRerollOptionsResponse {
        CMsgClientToGCFantasyCraftingRerollOptionsResponse::new()
    }

    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.user_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCFantasyCraftingRerollOptionsResponse {
        static instance: CMsgClientToGCFantasyCraftingRerollOptionsResponse = CMsgClientToGCFantasyCraftingRerollOptionsResponse {
            response: ::std::option::Option::None,
            user_data: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientToGCFantasyCraftingRerollOptionsResponse`
pub mod cmsg_client_to_gcfantasy_crafting_reroll_options_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgClientToGCFantasyCraftingRerollOptionsResponse.EResponse)
    pub enum EResponse {
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingRerollOptionsResponse.EResponse.k_eInternalError)
        k_eInternalError = 0,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingRerollOptionsResponse.EResponse.k_eSuccess)
        k_eSuccess = 1,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingRerollOptionsResponse.EResponse.k_eTooBusy)
        k_eTooBusy = 2,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingRerollOptionsResponse.EResponse.k_eDisabled)
        k_eDisabled = 3,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingRerollOptionsResponse.EResponse.k_eTimeout)
        k_eTimeout = 4,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingRerollOptionsResponse.EResponse.k_eInvalidLeague)
        k_eInvalidLeague = 5,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFantasyCraftingRerollOptionsResponse.EResponse.k_eInsufficientTokens)
        k_eInsufficientTokens = 6,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for EResponse {
        const NAME: &'static str = "EResponse";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EResponse> {
            match value {
                0 => ::std::option::Option::Some(EResponse::k_eInternalError),
                1 => ::std::option::Option::Some(EResponse::k_eSuccess),
                2 => ::std::option::Option::Some(EResponse::k_eTooBusy),
                3 => ::std::option::Option::Some(EResponse::k_eDisabled),
                4 => ::std::option::Option::Some(EResponse::k_eTimeout),
                5 => ::std::option::Option::Some(EResponse::k_eInvalidLeague),
                6 => ::std::option::Option::Some(EResponse::k_eInsufficientTokens),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EResponse> {
            match str {
                "k_eInternalError" => ::std::option::Option::Some(EResponse::k_eInternalError),
                "k_eSuccess" => ::std::option::Option::Some(EResponse::k_eSuccess),
                "k_eTooBusy" => ::std::option::Option::Some(EResponse::k_eTooBusy),
                "k_eDisabled" => ::std::option::Option::Some(EResponse::k_eDisabled),
                "k_eTimeout" => ::std::option::Option::Some(EResponse::k_eTimeout),
                "k_eInvalidLeague" => ::std::option::Option::Some(EResponse::k_eInvalidLeague),
                "k_eInsufficientTokens" => ::std::option::Option::Some(EResponse::k_eInsufficientTokens),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EResponse] = &[
            EResponse::k_eInternalError,
            EResponse::k_eSuccess,
            EResponse::k_eTooBusy,
            EResponse::k_eDisabled,
            EResponse::k_eTimeout,
            EResponse::k_eInvalidLeague,
            EResponse::k_eInsufficientTokens,
        ];
    }

    impl ::std::default::Default for EResponse {
        fn default() -> Self {
            EResponse::k_eInternalError
        }
    }

}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:DOTA_2013PassportSelectionIndices)
pub enum DOTA_2013PassportSelectionIndices {
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_0)
    PP13_SEL_ALLSTAR_PLAYER_0 = 0,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_1)
    PP13_SEL_ALLSTAR_PLAYER_1 = 1,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_2)
    PP13_SEL_ALLSTAR_PLAYER_2 = 2,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_3)
    PP13_SEL_ALLSTAR_PLAYER_3 = 3,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_4)
    PP13_SEL_ALLSTAR_PLAYER_4 = 4,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_5)
    PP13_SEL_ALLSTAR_PLAYER_5 = 5,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_6)
    PP13_SEL_ALLSTAR_PLAYER_6 = 6,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_7)
    PP13_SEL_ALLSTAR_PLAYER_7 = 7,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_8)
    PP13_SEL_ALLSTAR_PLAYER_8 = 8,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_9)
    PP13_SEL_ALLSTAR_PLAYER_9 = 9,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_0)
    PP13_SEL_QUALPRED_WEST_0 = 10,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_1)
    PP13_SEL_QUALPRED_WEST_1 = 11,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_2)
    PP13_SEL_QUALPRED_WEST_2 = 12,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_3)
    PP13_SEL_QUALPRED_WEST_3 = 13,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_4)
    PP13_SEL_QUALPRED_WEST_4 = 14,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_5)
    PP13_SEL_QUALPRED_WEST_5 = 15,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_6)
    PP13_SEL_QUALPRED_WEST_6 = 16,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_7)
    PP13_SEL_QUALPRED_WEST_7 = 17,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_8)
    PP13_SEL_QUALPRED_WEST_8 = 18,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_9)
    PP13_SEL_QUALPRED_WEST_9 = 19,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_10)
    PP13_SEL_QUALPRED_WEST_10 = 20,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_11)
    PP13_SEL_QUALPRED_WEST_11 = 21,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_12)
    PP13_SEL_QUALPRED_WEST_12 = 22,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_13)
    PP13_SEL_QUALPRED_WEST_13 = 23,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_14)
    PP13_SEL_QUALPRED_WEST_14 = 24,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_0)
    PP13_SEL_QUALPRED_EAST_0 = 25,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_1)
    PP13_SEL_QUALPRED_EAST_1 = 26,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_2)
    PP13_SEL_QUALPRED_EAST_2 = 27,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_3)
    PP13_SEL_QUALPRED_EAST_3 = 28,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_4)
    PP13_SEL_QUALPRED_EAST_4 = 29,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_5)
    PP13_SEL_QUALPRED_EAST_5 = 30,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_6)
    PP13_SEL_QUALPRED_EAST_6 = 31,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_7)
    PP13_SEL_QUALPRED_EAST_7 = 32,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_8)
    PP13_SEL_QUALPRED_EAST_8 = 33,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_9)
    PP13_SEL_QUALPRED_EAST_9 = 34,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_10)
    PP13_SEL_QUALPRED_EAST_10 = 35,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_11)
    PP13_SEL_QUALPRED_EAST_11 = 36,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_12)
    PP13_SEL_QUALPRED_EAST_12 = 37,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_13)
    PP13_SEL_QUALPRED_EAST_13 = 38,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_14)
    PP13_SEL_QUALPRED_EAST_14 = 39,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_TEAMCUP_TEAM)
    PP13_SEL_TEAMCUP_TEAM = 40,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_TEAMCUP_PLAYER)
    PP13_SEL_TEAMCUP_PLAYER = 41,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_TEAMCUP_TEAM_LOCK)
    PP13_SEL_TEAMCUP_TEAM_LOCK = 42,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_TEAMCUP_PLAYER_LOCK)
    PP13_SEL_TEAMCUP_PLAYER_LOCK = 43,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_0)
    PP13_SEL_EVENTPRED_0 = 44,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_1)
    PP13_SEL_EVENTPRED_1 = 45,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_2)
    PP13_SEL_EVENTPRED_2 = 46,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_3)
    PP13_SEL_EVENTPRED_3 = 47,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_4)
    PP13_SEL_EVENTPRED_4 = 48,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_5)
    PP13_SEL_EVENTPRED_5 = 49,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_6)
    PP13_SEL_EVENTPRED_6 = 50,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_7)
    PP13_SEL_EVENTPRED_7 = 51,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_8)
    PP13_SEL_EVENTPRED_8 = 52,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_9)
    PP13_SEL_EVENTPRED_9 = 53,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_10)
    PP13_SEL_EVENTPRED_10 = 54,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_11)
    PP13_SEL_EVENTPRED_11 = 55,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_12)
    PP13_SEL_EVENTPRED_12 = 56,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_13)
    PP13_SEL_EVENTPRED_13 = 57,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_14)
    PP13_SEL_EVENTPRED_14 = 58,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_15)
    PP13_SEL_EVENTPRED_15 = 59,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_16)
    PP13_SEL_EVENTPRED_16 = 60,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_17)
    PP13_SEL_EVENTPRED_17 = 61,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_18)
    PP13_SEL_EVENTPRED_18 = 62,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_19)
    PP13_SEL_EVENTPRED_19 = 63,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_20)
    PP13_SEL_EVENTPRED_20 = 64,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_21)
    PP13_SEL_EVENTPRED_21 = 65,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_22)
    PP13_SEL_EVENTPRED_22 = 66,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_23)
    PP13_SEL_EVENTPRED_23 = 67,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_24)
    PP13_SEL_EVENTPRED_24 = 68,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_25)
    PP13_SEL_EVENTPRED_25 = 69,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_26)
    PP13_SEL_EVENTPRED_26 = 70,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_27)
    PP13_SEL_EVENTPRED_27 = 71,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_28)
    PP13_SEL_EVENTPRED_28 = 72,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_29)
    PP13_SEL_EVENTPRED_29 = 73,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_30)
    PP13_SEL_EVENTPRED_30 = 74,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_31)
    PP13_SEL_EVENTPRED_31 = 75,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_32)
    PP13_SEL_EVENTPRED_32 = 76,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_33)
    PP13_SEL_EVENTPRED_33 = 77,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_34)
    PP13_SEL_EVENTPRED_34 = 78,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_35)
    PP13_SEL_EVENTPRED_35 = 79,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_36)
    PP13_SEL_EVENTPRED_36 = 80,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_37)
    PP13_SEL_EVENTPRED_37 = 81,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_38)
    PP13_SEL_EVENTPRED_38 = 82,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_39)
    PP13_SEL_EVENTPRED_39 = 83,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_40)
    PP13_SEL_EVENTPRED_40 = 84,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_41)
    PP13_SEL_EVENTPRED_41 = 85,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_42)
    PP13_SEL_EVENTPRED_42 = 86,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_EVENTPRED_43)
    PP13_SEL_EVENTPRED_43 = 87,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_SOLO_0)
    PP13_SEL_SOLO_0 = 88,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_SOLO_1)
    PP13_SEL_SOLO_1 = 89,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_SOLO_2)
    PP13_SEL_SOLO_2 = 90,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_SOLO_3)
    PP13_SEL_SOLO_3 = 91,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_SOLO_4)
    PP13_SEL_SOLO_4 = 92,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_SOLO_5)
    PP13_SEL_SOLO_5 = 93,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_SOLO_6)
    PP13_SEL_SOLO_6 = 94,
    // @@protoc_insertion_point(enum_value:DOTA_2013PassportSelectionIndices.PP13_SEL_SOLO_7)
    PP13_SEL_SOLO_7 = 95,
}

impl ::steam_vent_proto_common::protobuf::Enum for DOTA_2013PassportSelectionIndices {
    const NAME: &'static str = "DOTA_2013PassportSelectionIndices";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DOTA_2013PassportSelectionIndices> {
        match value {
            0 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_0),
            1 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_1),
            2 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_2),
            3 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_3),
            4 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_4),
            5 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_5),
            6 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_6),
            7 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_7),
            8 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_8),
            9 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_9),
            10 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_0),
            11 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_1),
            12 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_2),
            13 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_3),
            14 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_4),
            15 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_5),
            16 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_6),
            17 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_7),
            18 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_8),
            19 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_9),
            20 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_10),
            21 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_11),
            22 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_12),
            23 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_13),
            24 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_14),
            25 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_0),
            26 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_1),
            27 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_2),
            28 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_3),
            29 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_4),
            30 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_5),
            31 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_6),
            32 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_7),
            33 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_8),
            34 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_9),
            35 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_10),
            36 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_11),
            37 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_12),
            38 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_13),
            39 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_14),
            40 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_TEAMCUP_TEAM),
            41 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_TEAMCUP_PLAYER),
            42 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_TEAMCUP_TEAM_LOCK),
            43 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_TEAMCUP_PLAYER_LOCK),
            44 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_0),
            45 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_1),
            46 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_2),
            47 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_3),
            48 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_4),
            49 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_5),
            50 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_6),
            51 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_7),
            52 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_8),
            53 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_9),
            54 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_10),
            55 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_11),
            56 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_12),
            57 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_13),
            58 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_14),
            59 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_15),
            60 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_16),
            61 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_17),
            62 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_18),
            63 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_19),
            64 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_20),
            65 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_21),
            66 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_22),
            67 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_23),
            68 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_24),
            69 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_25),
            70 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_26),
            71 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_27),
            72 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_28),
            73 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_29),
            74 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_30),
            75 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_31),
            76 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_32),
            77 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_33),
            78 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_34),
            79 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_35),
            80 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_36),
            81 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_37),
            82 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_38),
            83 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_39),
            84 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_40),
            85 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_41),
            86 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_42),
            87 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_43),
            88 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_0),
            89 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_1),
            90 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_2),
            91 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_3),
            92 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_4),
            93 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_5),
            94 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_6),
            95 => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_7),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<DOTA_2013PassportSelectionIndices> {
        match str {
            "PP13_SEL_ALLSTAR_PLAYER_0" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_0),
            "PP13_SEL_ALLSTAR_PLAYER_1" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_1),
            "PP13_SEL_ALLSTAR_PLAYER_2" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_2),
            "PP13_SEL_ALLSTAR_PLAYER_3" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_3),
            "PP13_SEL_ALLSTAR_PLAYER_4" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_4),
            "PP13_SEL_ALLSTAR_PLAYER_5" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_5),
            "PP13_SEL_ALLSTAR_PLAYER_6" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_6),
            "PP13_SEL_ALLSTAR_PLAYER_7" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_7),
            "PP13_SEL_ALLSTAR_PLAYER_8" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_8),
            "PP13_SEL_ALLSTAR_PLAYER_9" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_9),
            "PP13_SEL_QUALPRED_WEST_0" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_0),
            "PP13_SEL_QUALPRED_WEST_1" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_1),
            "PP13_SEL_QUALPRED_WEST_2" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_2),
            "PP13_SEL_QUALPRED_WEST_3" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_3),
            "PP13_SEL_QUALPRED_WEST_4" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_4),
            "PP13_SEL_QUALPRED_WEST_5" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_5),
            "PP13_SEL_QUALPRED_WEST_6" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_6),
            "PP13_SEL_QUALPRED_WEST_7" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_7),
            "PP13_SEL_QUALPRED_WEST_8" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_8),
            "PP13_SEL_QUALPRED_WEST_9" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_9),
            "PP13_SEL_QUALPRED_WEST_10" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_10),
            "PP13_SEL_QUALPRED_WEST_11" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_11),
            "PP13_SEL_QUALPRED_WEST_12" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_12),
            "PP13_SEL_QUALPRED_WEST_13" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_13),
            "PP13_SEL_QUALPRED_WEST_14" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_14),
            "PP13_SEL_QUALPRED_EAST_0" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_0),
            "PP13_SEL_QUALPRED_EAST_1" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_1),
            "PP13_SEL_QUALPRED_EAST_2" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_2),
            "PP13_SEL_QUALPRED_EAST_3" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_3),
            "PP13_SEL_QUALPRED_EAST_4" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_4),
            "PP13_SEL_QUALPRED_EAST_5" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_5),
            "PP13_SEL_QUALPRED_EAST_6" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_6),
            "PP13_SEL_QUALPRED_EAST_7" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_7),
            "PP13_SEL_QUALPRED_EAST_8" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_8),
            "PP13_SEL_QUALPRED_EAST_9" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_9),
            "PP13_SEL_QUALPRED_EAST_10" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_10),
            "PP13_SEL_QUALPRED_EAST_11" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_11),
            "PP13_SEL_QUALPRED_EAST_12" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_12),
            "PP13_SEL_QUALPRED_EAST_13" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_13),
            "PP13_SEL_QUALPRED_EAST_14" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_14),
            "PP13_SEL_TEAMCUP_TEAM" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_TEAMCUP_TEAM),
            "PP13_SEL_TEAMCUP_PLAYER" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_TEAMCUP_PLAYER),
            "PP13_SEL_TEAMCUP_TEAM_LOCK" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_TEAMCUP_TEAM_LOCK),
            "PP13_SEL_TEAMCUP_PLAYER_LOCK" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_TEAMCUP_PLAYER_LOCK),
            "PP13_SEL_EVENTPRED_0" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_0),
            "PP13_SEL_EVENTPRED_1" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_1),
            "PP13_SEL_EVENTPRED_2" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_2),
            "PP13_SEL_EVENTPRED_3" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_3),
            "PP13_SEL_EVENTPRED_4" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_4),
            "PP13_SEL_EVENTPRED_5" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_5),
            "PP13_SEL_EVENTPRED_6" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_6),
            "PP13_SEL_EVENTPRED_7" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_7),
            "PP13_SEL_EVENTPRED_8" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_8),
            "PP13_SEL_EVENTPRED_9" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_9),
            "PP13_SEL_EVENTPRED_10" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_10),
            "PP13_SEL_EVENTPRED_11" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_11),
            "PP13_SEL_EVENTPRED_12" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_12),
            "PP13_SEL_EVENTPRED_13" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_13),
            "PP13_SEL_EVENTPRED_14" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_14),
            "PP13_SEL_EVENTPRED_15" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_15),
            "PP13_SEL_EVENTPRED_16" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_16),
            "PP13_SEL_EVENTPRED_17" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_17),
            "PP13_SEL_EVENTPRED_18" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_18),
            "PP13_SEL_EVENTPRED_19" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_19),
            "PP13_SEL_EVENTPRED_20" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_20),
            "PP13_SEL_EVENTPRED_21" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_21),
            "PP13_SEL_EVENTPRED_22" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_22),
            "PP13_SEL_EVENTPRED_23" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_23),
            "PP13_SEL_EVENTPRED_24" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_24),
            "PP13_SEL_EVENTPRED_25" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_25),
            "PP13_SEL_EVENTPRED_26" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_26),
            "PP13_SEL_EVENTPRED_27" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_27),
            "PP13_SEL_EVENTPRED_28" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_28),
            "PP13_SEL_EVENTPRED_29" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_29),
            "PP13_SEL_EVENTPRED_30" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_30),
            "PP13_SEL_EVENTPRED_31" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_31),
            "PP13_SEL_EVENTPRED_32" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_32),
            "PP13_SEL_EVENTPRED_33" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_33),
            "PP13_SEL_EVENTPRED_34" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_34),
            "PP13_SEL_EVENTPRED_35" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_35),
            "PP13_SEL_EVENTPRED_36" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_36),
            "PP13_SEL_EVENTPRED_37" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_37),
            "PP13_SEL_EVENTPRED_38" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_38),
            "PP13_SEL_EVENTPRED_39" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_39),
            "PP13_SEL_EVENTPRED_40" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_40),
            "PP13_SEL_EVENTPRED_41" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_41),
            "PP13_SEL_EVENTPRED_42" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_42),
            "PP13_SEL_EVENTPRED_43" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_43),
            "PP13_SEL_SOLO_0" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_0),
            "PP13_SEL_SOLO_1" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_1),
            "PP13_SEL_SOLO_2" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_2),
            "PP13_SEL_SOLO_3" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_3),
            "PP13_SEL_SOLO_4" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_4),
            "PP13_SEL_SOLO_5" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_5),
            "PP13_SEL_SOLO_6" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_6),
            "PP13_SEL_SOLO_7" => ::std::option::Option::Some(DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_7),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [DOTA_2013PassportSelectionIndices] = &[
        DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_0,
        DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_1,
        DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_2,
        DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_3,
        DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_4,
        DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_5,
        DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_6,
        DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_7,
        DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_8,
        DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_9,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_0,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_1,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_2,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_3,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_4,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_5,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_6,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_7,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_8,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_9,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_10,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_11,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_12,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_13,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_WEST_14,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_0,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_1,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_2,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_3,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_4,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_5,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_6,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_7,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_8,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_9,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_10,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_11,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_12,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_13,
        DOTA_2013PassportSelectionIndices::PP13_SEL_QUALPRED_EAST_14,
        DOTA_2013PassportSelectionIndices::PP13_SEL_TEAMCUP_TEAM,
        DOTA_2013PassportSelectionIndices::PP13_SEL_TEAMCUP_PLAYER,
        DOTA_2013PassportSelectionIndices::PP13_SEL_TEAMCUP_TEAM_LOCK,
        DOTA_2013PassportSelectionIndices::PP13_SEL_TEAMCUP_PLAYER_LOCK,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_0,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_1,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_2,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_3,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_4,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_5,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_6,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_7,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_8,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_9,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_10,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_11,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_12,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_13,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_14,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_15,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_16,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_17,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_18,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_19,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_20,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_21,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_22,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_23,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_24,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_25,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_26,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_27,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_28,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_29,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_30,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_31,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_32,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_33,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_34,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_35,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_36,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_37,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_38,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_39,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_40,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_41,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_42,
        DOTA_2013PassportSelectionIndices::PP13_SEL_EVENTPRED_43,
        DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_0,
        DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_1,
        DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_2,
        DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_3,
        DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_4,
        DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_5,
        DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_6,
        DOTA_2013PassportSelectionIndices::PP13_SEL_SOLO_7,
    ];
}

impl ::std::default::Default for DOTA_2013PassportSelectionIndices {
    fn default() -> Self {
        DOTA_2013PassportSelectionIndices::PP13_SEL_ALLSTAR_PLAYER_0
    }
}



const _VENT_PROTO_VERSION_CHECK: () = ::steam_vent_proto_common::VERSION_0_5_0;

#[allow(unused_imports)]
use crate::dota_shared_enums::*;
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTAPlayerInfo {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTAPlayerInfoList {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTATeamRoster {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTADPCProfileInfo {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTALeaderboards {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTAPassportVoteTeamGuess {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTAPassportVoteGenericSelection {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTAPassportStampedPlayer {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTAPassportPlayerCardChallenge {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTAPassportVote {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgClientToGCGetPlayerCardRosterRequest {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCGetPlayerCardRosterRequest {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCGetPlayerCardRosterRequest;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCGetPlayerCardRosterResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCGetPlayerCardRosterResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCGetPlayerCardRosterResponse;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCBatchGetPlayerCardRosterRequest {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCBatchGetPlayerCardRosterRequest {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCBatchGetPlayerCardRosterRequest;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCBatchGetPlayerCardRosterResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCBatchGetPlayerCardRosterResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCBatchGetPlayerCardRosterResponse;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgClientToGCSetPlayerCardRosterRequest {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCSetPlayerCardRosterRequest {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCSetPlayerCardRosterRequest;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCSetPlayerCardRosterResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCSetPlayerCardRosterResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCSetPlayerCardRosterResponse;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTAFantasyDPCLeagueStatus {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTADPCSearchResults {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTADPCTeamFavoriteRankings {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDotaFantasyCraftingTabletPeriodData {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDotaFantasyCraftingTabletData {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDotaFantasyCraftingUserData {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDotaFantasyCraftingDataCache {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgClientToGCFantasyCraftingGetData {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCFantasyCraftingGetData {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCFantasyCraftingGetData;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCFantasyCraftingGetDataResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCFantasyCraftingGetDataResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCFantasyCraftingGetDataResponse;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCFantasyCraftingPerformOperation {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCFantasyCraftingPerformOperation {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCFantasyCraftingPerformOperation;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCFantasyCraftingPerformOperationResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCFantasyCraftingPerformOperationResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCFantasyCraftingPerformOperationResponse;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCToClientFantasyCraftingDataUpdated {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCFantasyCraftingDevModifyTablet {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCFantasyCraftingDevModifyTablet {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCFantasyCraftingDevModifyTablet;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCFantasyCraftingDevModifyTabletResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCFantasyCraftingDevModifyTabletResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCFantasyCraftingDevModifyTabletResponse;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCFantasyCraftingSelectPlayer {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCFantasyCraftingSelectPlayer {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCFantasyCraftingSelectPlayer;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCFantasyCraftingSelectPlayerResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCFantasyCraftingSelectPlayerResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCFantasyCraftingSelectPlayerResponse;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCFantasyCraftingGenerateTablets {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCFantasyCraftingGenerateTablets {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCFantasyCraftingGenerateTablets;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCFantasyCraftingGenerateTabletsResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCFantasyCraftingGenerateTabletsResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCFantasyCraftingGenerateTabletsResponse;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGcFantasyCraftingUpgradeTablets {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGcFantasyCraftingUpgradeTablets {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGcFantasyCraftingUpgradeTablets;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGcFantasyCraftingUpgradeTabletsResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGcFantasyCraftingUpgradeTabletsResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGcFantasyCraftingUpgradeTabletsResponse;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCFantasyCraftingRerollOptions {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCFantasyCraftingRerollOptions {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCFantasyCraftingRerollOptions;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCFantasyCraftingRerollOptionsResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCFantasyCraftingRerollOptionsResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCFantasyCraftingRerollOptionsResponse;
}

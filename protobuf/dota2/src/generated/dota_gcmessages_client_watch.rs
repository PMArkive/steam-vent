// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `dota_gcmessages_client_watch.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::steam_vent_proto_common::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:CSourceTVGameSmall)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSourceTVGameSmall {
    // message fields
    // @@protoc_insertion_point(field:CSourceTVGameSmall.activate_time)
    pub activate_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSourceTVGameSmall.deactivate_time)
    pub deactivate_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSourceTVGameSmall.server_steam_id)
    pub server_steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CSourceTVGameSmall.lobby_id)
    pub lobby_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CSourceTVGameSmall.league_id)
    pub league_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSourceTVGameSmall.lobby_type)
    pub lobby_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSourceTVGameSmall.game_time)
    pub game_time: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CSourceTVGameSmall.delay)
    pub delay: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSourceTVGameSmall.spectators)
    pub spectators: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSourceTVGameSmall.game_mode)
    pub game_mode: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSourceTVGameSmall.average_mmr)
    pub average_mmr: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSourceTVGameSmall.match_id)
    pub match_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CSourceTVGameSmall.series_id)
    pub series_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSourceTVGameSmall.team_name_radiant)
    pub team_name_radiant: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CSourceTVGameSmall.team_name_dire)
    pub team_name_dire: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CSourceTVGameSmall.team_logo_radiant)
    pub team_logo_radiant: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CSourceTVGameSmall.team_logo_dire)
    pub team_logo_dire: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CSourceTVGameSmall.team_id_radiant)
    pub team_id_radiant: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSourceTVGameSmall.team_id_dire)
    pub team_id_dire: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSourceTVGameSmall.sort_score)
    pub sort_score: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSourceTVGameSmall.last_update_time)
    pub last_update_time: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CSourceTVGameSmall.radiant_lead)
    pub radiant_lead: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CSourceTVGameSmall.radiant_score)
    pub radiant_score: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSourceTVGameSmall.dire_score)
    pub dire_score: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSourceTVGameSmall.players)
    pub players: ::std::vec::Vec<csource_tvgame_small::Player>,
    // @@protoc_insertion_point(field:CSourceTVGameSmall.building_state)
    pub building_state: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSourceTVGameSmall.weekend_tourney_tournament_id)
    pub weekend_tourney_tournament_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSourceTVGameSmall.weekend_tourney_division)
    pub weekend_tourney_division: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSourceTVGameSmall.weekend_tourney_skill_level)
    pub weekend_tourney_skill_level: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSourceTVGameSmall.weekend_tourney_bracket_round)
    pub weekend_tourney_bracket_round: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSourceTVGameSmall.custom_game_difficulty)
    pub custom_game_difficulty: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CSourceTVGameSmall.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSourceTVGameSmall {
    fn default() -> &'a CSourceTVGameSmall {
        <CSourceTVGameSmall as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CSourceTVGameSmall {
    pub fn new() -> CSourceTVGameSmall {
        ::std::default::Default::default()
    }

    // optional uint32 activate_time = 1;

    pub fn activate_time(&self) -> u32 {
        self.activate_time.unwrap_or(0)
    }

    pub fn clear_activate_time(&mut self) {
        self.activate_time = ::std::option::Option::None;
    }

    pub fn has_activate_time(&self) -> bool {
        self.activate_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_activate_time(&mut self, v: u32) {
        self.activate_time = ::std::option::Option::Some(v);
    }

    // optional uint32 deactivate_time = 2;

    pub fn deactivate_time(&self) -> u32 {
        self.deactivate_time.unwrap_or(0)
    }

    pub fn clear_deactivate_time(&mut self) {
        self.deactivate_time = ::std::option::Option::None;
    }

    pub fn has_deactivate_time(&self) -> bool {
        self.deactivate_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deactivate_time(&mut self, v: u32) {
        self.deactivate_time = ::std::option::Option::Some(v);
    }

    // optional uint64 server_steam_id = 3;

    pub fn server_steam_id(&self) -> u64 {
        self.server_steam_id.unwrap_or(0)
    }

    pub fn clear_server_steam_id(&mut self) {
        self.server_steam_id = ::std::option::Option::None;
    }

    pub fn has_server_steam_id(&self) -> bool {
        self.server_steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_steam_id(&mut self, v: u64) {
        self.server_steam_id = ::std::option::Option::Some(v);
    }

    // optional uint64 lobby_id = 4;

    pub fn lobby_id(&self) -> u64 {
        self.lobby_id.unwrap_or(0)
    }

    pub fn clear_lobby_id(&mut self) {
        self.lobby_id = ::std::option::Option::None;
    }

    pub fn has_lobby_id(&self) -> bool {
        self.lobby_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lobby_id(&mut self, v: u64) {
        self.lobby_id = ::std::option::Option::Some(v);
    }

    // optional uint32 league_id = 5;

    pub fn league_id(&self) -> u32 {
        self.league_id.unwrap_or(0)
    }

    pub fn clear_league_id(&mut self) {
        self.league_id = ::std::option::Option::None;
    }

    pub fn has_league_id(&self) -> bool {
        self.league_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_league_id(&mut self, v: u32) {
        self.league_id = ::std::option::Option::Some(v);
    }

    // optional uint32 lobby_type = 6;

    pub fn lobby_type(&self) -> u32 {
        self.lobby_type.unwrap_or(0)
    }

    pub fn clear_lobby_type(&mut self) {
        self.lobby_type = ::std::option::Option::None;
    }

    pub fn has_lobby_type(&self) -> bool {
        self.lobby_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lobby_type(&mut self, v: u32) {
        self.lobby_type = ::std::option::Option::Some(v);
    }

    // optional int32 game_time = 7;

    pub fn game_time(&self) -> i32 {
        self.game_time.unwrap_or(0)
    }

    pub fn clear_game_time(&mut self) {
        self.game_time = ::std::option::Option::None;
    }

    pub fn has_game_time(&self) -> bool {
        self.game_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_time(&mut self, v: i32) {
        self.game_time = ::std::option::Option::Some(v);
    }

    // optional uint32 delay = 8;

    pub fn delay(&self) -> u32 {
        self.delay.unwrap_or(0)
    }

    pub fn clear_delay(&mut self) {
        self.delay = ::std::option::Option::None;
    }

    pub fn has_delay(&self) -> bool {
        self.delay.is_some()
    }

    // Param is passed by value, moved
    pub fn set_delay(&mut self, v: u32) {
        self.delay = ::std::option::Option::Some(v);
    }

    // optional uint32 spectators = 9;

    pub fn spectators(&self) -> u32 {
        self.spectators.unwrap_or(0)
    }

    pub fn clear_spectators(&mut self) {
        self.spectators = ::std::option::Option::None;
    }

    pub fn has_spectators(&self) -> bool {
        self.spectators.is_some()
    }

    // Param is passed by value, moved
    pub fn set_spectators(&mut self, v: u32) {
        self.spectators = ::std::option::Option::Some(v);
    }

    // optional uint32 game_mode = 10;

    pub fn game_mode(&self) -> u32 {
        self.game_mode.unwrap_or(0)
    }

    pub fn clear_game_mode(&mut self) {
        self.game_mode = ::std::option::Option::None;
    }

    pub fn has_game_mode(&self) -> bool {
        self.game_mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_mode(&mut self, v: u32) {
        self.game_mode = ::std::option::Option::Some(v);
    }

    // optional uint32 average_mmr = 11;

    pub fn average_mmr(&self) -> u32 {
        self.average_mmr.unwrap_or(0)
    }

    pub fn clear_average_mmr(&mut self) {
        self.average_mmr = ::std::option::Option::None;
    }

    pub fn has_average_mmr(&self) -> bool {
        self.average_mmr.is_some()
    }

    // Param is passed by value, moved
    pub fn set_average_mmr(&mut self, v: u32) {
        self.average_mmr = ::std::option::Option::Some(v);
    }

    // optional uint64 match_id = 12;

    pub fn match_id(&self) -> u64 {
        self.match_id.unwrap_or(0)
    }

    pub fn clear_match_id(&mut self) {
        self.match_id = ::std::option::Option::None;
    }

    pub fn has_match_id(&self) -> bool {
        self.match_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_match_id(&mut self, v: u64) {
        self.match_id = ::std::option::Option::Some(v);
    }

    // optional uint32 series_id = 13;

    pub fn series_id(&self) -> u32 {
        self.series_id.unwrap_or(0)
    }

    pub fn clear_series_id(&mut self) {
        self.series_id = ::std::option::Option::None;
    }

    pub fn has_series_id(&self) -> bool {
        self.series_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_series_id(&mut self, v: u32) {
        self.series_id = ::std::option::Option::Some(v);
    }

    // optional string team_name_radiant = 15;

    pub fn team_name_radiant(&self) -> &str {
        match self.team_name_radiant.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_team_name_radiant(&mut self) {
        self.team_name_radiant = ::std::option::Option::None;
    }

    pub fn has_team_name_radiant(&self) -> bool {
        self.team_name_radiant.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_name_radiant(&mut self, v: ::std::string::String) {
        self.team_name_radiant = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_team_name_radiant(&mut self) -> &mut ::std::string::String {
        if self.team_name_radiant.is_none() {
            self.team_name_radiant = ::std::option::Option::Some(::std::string::String::new());
        }
        self.team_name_radiant.as_mut().unwrap()
    }

    // Take field
    pub fn take_team_name_radiant(&mut self) -> ::std::string::String {
        self.team_name_radiant.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string team_name_dire = 16;

    pub fn team_name_dire(&self) -> &str {
        match self.team_name_dire.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_team_name_dire(&mut self) {
        self.team_name_dire = ::std::option::Option::None;
    }

    pub fn has_team_name_dire(&self) -> bool {
        self.team_name_dire.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_name_dire(&mut self, v: ::std::string::String) {
        self.team_name_dire = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_team_name_dire(&mut self) -> &mut ::std::string::String {
        if self.team_name_dire.is_none() {
            self.team_name_dire = ::std::option::Option::Some(::std::string::String::new());
        }
        self.team_name_dire.as_mut().unwrap()
    }

    // Take field
    pub fn take_team_name_dire(&mut self) -> ::std::string::String {
        self.team_name_dire.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed64 team_logo_radiant = 24;

    pub fn team_logo_radiant(&self) -> u64 {
        self.team_logo_radiant.unwrap_or(0)
    }

    pub fn clear_team_logo_radiant(&mut self) {
        self.team_logo_radiant = ::std::option::Option::None;
    }

    pub fn has_team_logo_radiant(&self) -> bool {
        self.team_logo_radiant.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_logo_radiant(&mut self, v: u64) {
        self.team_logo_radiant = ::std::option::Option::Some(v);
    }

    // optional fixed64 team_logo_dire = 25;

    pub fn team_logo_dire(&self) -> u64 {
        self.team_logo_dire.unwrap_or(0)
    }

    pub fn clear_team_logo_dire(&mut self) {
        self.team_logo_dire = ::std::option::Option::None;
    }

    pub fn has_team_logo_dire(&self) -> bool {
        self.team_logo_dire.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_logo_dire(&mut self, v: u64) {
        self.team_logo_dire = ::std::option::Option::Some(v);
    }

    // optional uint32 team_id_radiant = 30;

    pub fn team_id_radiant(&self) -> u32 {
        self.team_id_radiant.unwrap_or(0)
    }

    pub fn clear_team_id_radiant(&mut self) {
        self.team_id_radiant = ::std::option::Option::None;
    }

    pub fn has_team_id_radiant(&self) -> bool {
        self.team_id_radiant.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_id_radiant(&mut self, v: u32) {
        self.team_id_radiant = ::std::option::Option::Some(v);
    }

    // optional uint32 team_id_dire = 31;

    pub fn team_id_dire(&self) -> u32 {
        self.team_id_dire.unwrap_or(0)
    }

    pub fn clear_team_id_dire(&mut self) {
        self.team_id_dire = ::std::option::Option::None;
    }

    pub fn has_team_id_dire(&self) -> bool {
        self.team_id_dire.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_id_dire(&mut self, v: u32) {
        self.team_id_dire = ::std::option::Option::Some(v);
    }

    // optional uint32 sort_score = 17;

    pub fn sort_score(&self) -> u32 {
        self.sort_score.unwrap_or(0)
    }

    pub fn clear_sort_score(&mut self) {
        self.sort_score = ::std::option::Option::None;
    }

    pub fn has_sort_score(&self) -> bool {
        self.sort_score.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sort_score(&mut self, v: u32) {
        self.sort_score = ::std::option::Option::Some(v);
    }

    // optional float last_update_time = 18;

    pub fn last_update_time(&self) -> f32 {
        self.last_update_time.unwrap_or(0.)
    }

    pub fn clear_last_update_time(&mut self) {
        self.last_update_time = ::std::option::Option::None;
    }

    pub fn has_last_update_time(&self) -> bool {
        self.last_update_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_update_time(&mut self, v: f32) {
        self.last_update_time = ::std::option::Option::Some(v);
    }

    // optional int32 radiant_lead = 19;

    pub fn radiant_lead(&self) -> i32 {
        self.radiant_lead.unwrap_or(0)
    }

    pub fn clear_radiant_lead(&mut self) {
        self.radiant_lead = ::std::option::Option::None;
    }

    pub fn has_radiant_lead(&self) -> bool {
        self.radiant_lead.is_some()
    }

    // Param is passed by value, moved
    pub fn set_radiant_lead(&mut self, v: i32) {
        self.radiant_lead = ::std::option::Option::Some(v);
    }

    // optional uint32 radiant_score = 20;

    pub fn radiant_score(&self) -> u32 {
        self.radiant_score.unwrap_or(0)
    }

    pub fn clear_radiant_score(&mut self) {
        self.radiant_score = ::std::option::Option::None;
    }

    pub fn has_radiant_score(&self) -> bool {
        self.radiant_score.is_some()
    }

    // Param is passed by value, moved
    pub fn set_radiant_score(&mut self, v: u32) {
        self.radiant_score = ::std::option::Option::Some(v);
    }

    // optional uint32 dire_score = 21;

    pub fn dire_score(&self) -> u32 {
        self.dire_score.unwrap_or(0)
    }

    pub fn clear_dire_score(&mut self) {
        self.dire_score = ::std::option::Option::None;
    }

    pub fn has_dire_score(&self) -> bool {
        self.dire_score.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dire_score(&mut self, v: u32) {
        self.dire_score = ::std::option::Option::Some(v);
    }

    // optional fixed32 building_state = 23;

    pub fn building_state(&self) -> u32 {
        self.building_state.unwrap_or(0)
    }

    pub fn clear_building_state(&mut self) {
        self.building_state = ::std::option::Option::None;
    }

    pub fn has_building_state(&self) -> bool {
        self.building_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_building_state(&mut self, v: u32) {
        self.building_state = ::std::option::Option::Some(v);
    }

    // optional uint32 weekend_tourney_tournament_id = 26;

    pub fn weekend_tourney_tournament_id(&self) -> u32 {
        self.weekend_tourney_tournament_id.unwrap_or(0)
    }

    pub fn clear_weekend_tourney_tournament_id(&mut self) {
        self.weekend_tourney_tournament_id = ::std::option::Option::None;
    }

    pub fn has_weekend_tourney_tournament_id(&self) -> bool {
        self.weekend_tourney_tournament_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_weekend_tourney_tournament_id(&mut self, v: u32) {
        self.weekend_tourney_tournament_id = ::std::option::Option::Some(v);
    }

    // optional uint32 weekend_tourney_division = 27;

    pub fn weekend_tourney_division(&self) -> u32 {
        self.weekend_tourney_division.unwrap_or(0)
    }

    pub fn clear_weekend_tourney_division(&mut self) {
        self.weekend_tourney_division = ::std::option::Option::None;
    }

    pub fn has_weekend_tourney_division(&self) -> bool {
        self.weekend_tourney_division.is_some()
    }

    // Param is passed by value, moved
    pub fn set_weekend_tourney_division(&mut self, v: u32) {
        self.weekend_tourney_division = ::std::option::Option::Some(v);
    }

    // optional uint32 weekend_tourney_skill_level = 28;

    pub fn weekend_tourney_skill_level(&self) -> u32 {
        self.weekend_tourney_skill_level.unwrap_or(0)
    }

    pub fn clear_weekend_tourney_skill_level(&mut self) {
        self.weekend_tourney_skill_level = ::std::option::Option::None;
    }

    pub fn has_weekend_tourney_skill_level(&self) -> bool {
        self.weekend_tourney_skill_level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_weekend_tourney_skill_level(&mut self, v: u32) {
        self.weekend_tourney_skill_level = ::std::option::Option::Some(v);
    }

    // optional uint32 weekend_tourney_bracket_round = 29;

    pub fn weekend_tourney_bracket_round(&self) -> u32 {
        self.weekend_tourney_bracket_round.unwrap_or(0)
    }

    pub fn clear_weekend_tourney_bracket_round(&mut self) {
        self.weekend_tourney_bracket_round = ::std::option::Option::None;
    }

    pub fn has_weekend_tourney_bracket_round(&self) -> bool {
        self.weekend_tourney_bracket_round.is_some()
    }

    // Param is passed by value, moved
    pub fn set_weekend_tourney_bracket_round(&mut self, v: u32) {
        self.weekend_tourney_bracket_round = ::std::option::Option::Some(v);
    }

    // optional uint32 custom_game_difficulty = 32;

    pub fn custom_game_difficulty(&self) -> u32 {
        self.custom_game_difficulty.unwrap_or(0)
    }

    pub fn clear_custom_game_difficulty(&mut self) {
        self.custom_game_difficulty = ::std::option::Option::None;
    }

    pub fn has_custom_game_difficulty(&self) -> bool {
        self.custom_game_difficulty.is_some()
    }

    // Param is passed by value, moved
    pub fn set_custom_game_difficulty(&mut self, v: u32) {
        self.custom_game_difficulty = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CSourceTVGameSmall {
    const NAME: &'static str = "CSourceTVGameSmall";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.activate_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.deactivate_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.server_steam_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                32 => {
                    self.lobby_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                40 => {
                    self.league_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.lobby_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.game_time = ::std::option::Option::Some(is.read_int32()?);
                },
                64 => {
                    self.delay = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.spectators = ::std::option::Option::Some(is.read_uint32()?);
                },
                80 => {
                    self.game_mode = ::std::option::Option::Some(is.read_uint32()?);
                },
                88 => {
                    self.average_mmr = ::std::option::Option::Some(is.read_uint32()?);
                },
                96 => {
                    self.match_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                104 => {
                    self.series_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                122 => {
                    self.team_name_radiant = ::std::option::Option::Some(is.read_string()?);
                },
                130 => {
                    self.team_name_dire = ::std::option::Option::Some(is.read_string()?);
                },
                193 => {
                    self.team_logo_radiant = ::std::option::Option::Some(is.read_fixed64()?);
                },
                201 => {
                    self.team_logo_dire = ::std::option::Option::Some(is.read_fixed64()?);
                },
                240 => {
                    self.team_id_radiant = ::std::option::Option::Some(is.read_uint32()?);
                },
                248 => {
                    self.team_id_dire = ::std::option::Option::Some(is.read_uint32()?);
                },
                136 => {
                    self.sort_score = ::std::option::Option::Some(is.read_uint32()?);
                },
                149 => {
                    self.last_update_time = ::std::option::Option::Some(is.read_float()?);
                },
                152 => {
                    self.radiant_lead = ::std::option::Option::Some(is.read_int32()?);
                },
                160 => {
                    self.radiant_score = ::std::option::Option::Some(is.read_uint32()?);
                },
                168 => {
                    self.dire_score = ::std::option::Option::Some(is.read_uint32()?);
                },
                178 => {
                    self.players.push(is.read_message()?);
                },
                189 => {
                    self.building_state = ::std::option::Option::Some(is.read_fixed32()?);
                },
                208 => {
                    self.weekend_tourney_tournament_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                216 => {
                    self.weekend_tourney_division = ::std::option::Option::Some(is.read_uint32()?);
                },
                224 => {
                    self.weekend_tourney_skill_level = ::std::option::Option::Some(is.read_uint32()?);
                },
                232 => {
                    self.weekend_tourney_bracket_round = ::std::option::Option::Some(is.read_uint32()?);
                },
                256 => {
                    self.custom_game_difficulty = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.activate_time {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.deactivate_time {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.server_steam_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(3, v);
        }
        if let Some(v) = self.lobby_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(4, v);
        }
        if let Some(v) = self.league_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.lobby_type {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.game_time {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(7, v);
        }
        if let Some(v) = self.delay {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.spectators {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(9, v);
        }
        if let Some(v) = self.game_mode {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(10, v);
        }
        if let Some(v) = self.average_mmr {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(11, v);
        }
        if let Some(v) = self.match_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(12, v);
        }
        if let Some(v) = self.series_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(13, v);
        }
        if let Some(v) = self.team_name_radiant.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(15, &v);
        }
        if let Some(v) = self.team_name_dire.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(16, &v);
        }
        if let Some(v) = self.team_logo_radiant {
            my_size += 2 + 8;
        }
        if let Some(v) = self.team_logo_dire {
            my_size += 2 + 8;
        }
        if let Some(v) = self.team_id_radiant {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(30, v);
        }
        if let Some(v) = self.team_id_dire {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(31, v);
        }
        if let Some(v) = self.sort_score {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(17, v);
        }
        if let Some(v) = self.last_update_time {
            my_size += 2 + 4;
        }
        if let Some(v) = self.radiant_lead {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(19, v);
        }
        if let Some(v) = self.radiant_score {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(20, v);
        }
        if let Some(v) = self.dire_score {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(21, v);
        }
        for value in &self.players {
            let len = value.compute_size();
            my_size += 2 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.building_state {
            my_size += 2 + 4;
        }
        if let Some(v) = self.weekend_tourney_tournament_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(26, v);
        }
        if let Some(v) = self.weekend_tourney_division {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(27, v);
        }
        if let Some(v) = self.weekend_tourney_skill_level {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(28, v);
        }
        if let Some(v) = self.weekend_tourney_bracket_round {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(29, v);
        }
        if let Some(v) = self.custom_game_difficulty {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(32, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.activate_time {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.deactivate_time {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.server_steam_id {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.lobby_id {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.league_id {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.lobby_type {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.game_time {
            os.write_int32(7, v)?;
        }
        if let Some(v) = self.delay {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.spectators {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.game_mode {
            os.write_uint32(10, v)?;
        }
        if let Some(v) = self.average_mmr {
            os.write_uint32(11, v)?;
        }
        if let Some(v) = self.match_id {
            os.write_uint64(12, v)?;
        }
        if let Some(v) = self.series_id {
            os.write_uint32(13, v)?;
        }
        if let Some(v) = self.team_name_radiant.as_ref() {
            os.write_string(15, v)?;
        }
        if let Some(v) = self.team_name_dire.as_ref() {
            os.write_string(16, v)?;
        }
        if let Some(v) = self.team_logo_radiant {
            os.write_fixed64(24, v)?;
        }
        if let Some(v) = self.team_logo_dire {
            os.write_fixed64(25, v)?;
        }
        if let Some(v) = self.team_id_radiant {
            os.write_uint32(30, v)?;
        }
        if let Some(v) = self.team_id_dire {
            os.write_uint32(31, v)?;
        }
        if let Some(v) = self.sort_score {
            os.write_uint32(17, v)?;
        }
        if let Some(v) = self.last_update_time {
            os.write_float(18, v)?;
        }
        if let Some(v) = self.radiant_lead {
            os.write_int32(19, v)?;
        }
        if let Some(v) = self.radiant_score {
            os.write_uint32(20, v)?;
        }
        if let Some(v) = self.dire_score {
            os.write_uint32(21, v)?;
        }
        for v in &self.players {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(22, v, os)?;
        };
        if let Some(v) = self.building_state {
            os.write_fixed32(23, v)?;
        }
        if let Some(v) = self.weekend_tourney_tournament_id {
            os.write_uint32(26, v)?;
        }
        if let Some(v) = self.weekend_tourney_division {
            os.write_uint32(27, v)?;
        }
        if let Some(v) = self.weekend_tourney_skill_level {
            os.write_uint32(28, v)?;
        }
        if let Some(v) = self.weekend_tourney_bracket_round {
            os.write_uint32(29, v)?;
        }
        if let Some(v) = self.custom_game_difficulty {
            os.write_uint32(32, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSourceTVGameSmall {
        CSourceTVGameSmall::new()
    }

    fn clear(&mut self) {
        self.activate_time = ::std::option::Option::None;
        self.deactivate_time = ::std::option::Option::None;
        self.server_steam_id = ::std::option::Option::None;
        self.lobby_id = ::std::option::Option::None;
        self.league_id = ::std::option::Option::None;
        self.lobby_type = ::std::option::Option::None;
        self.game_time = ::std::option::Option::None;
        self.delay = ::std::option::Option::None;
        self.spectators = ::std::option::Option::None;
        self.game_mode = ::std::option::Option::None;
        self.average_mmr = ::std::option::Option::None;
        self.match_id = ::std::option::Option::None;
        self.series_id = ::std::option::Option::None;
        self.team_name_radiant = ::std::option::Option::None;
        self.team_name_dire = ::std::option::Option::None;
        self.team_logo_radiant = ::std::option::Option::None;
        self.team_logo_dire = ::std::option::Option::None;
        self.team_id_radiant = ::std::option::Option::None;
        self.team_id_dire = ::std::option::Option::None;
        self.sort_score = ::std::option::Option::None;
        self.last_update_time = ::std::option::Option::None;
        self.radiant_lead = ::std::option::Option::None;
        self.radiant_score = ::std::option::Option::None;
        self.dire_score = ::std::option::Option::None;
        self.players.clear();
        self.building_state = ::std::option::Option::None;
        self.weekend_tourney_tournament_id = ::std::option::Option::None;
        self.weekend_tourney_division = ::std::option::Option::None;
        self.weekend_tourney_skill_level = ::std::option::Option::None;
        self.weekend_tourney_bracket_round = ::std::option::Option::None;
        self.custom_game_difficulty = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSourceTVGameSmall {
        static instance: CSourceTVGameSmall = CSourceTVGameSmall {
            activate_time: ::std::option::Option::None,
            deactivate_time: ::std::option::Option::None,
            server_steam_id: ::std::option::Option::None,
            lobby_id: ::std::option::Option::None,
            league_id: ::std::option::Option::None,
            lobby_type: ::std::option::Option::None,
            game_time: ::std::option::Option::None,
            delay: ::std::option::Option::None,
            spectators: ::std::option::Option::None,
            game_mode: ::std::option::Option::None,
            average_mmr: ::std::option::Option::None,
            match_id: ::std::option::Option::None,
            series_id: ::std::option::Option::None,
            team_name_radiant: ::std::option::Option::None,
            team_name_dire: ::std::option::Option::None,
            team_logo_radiant: ::std::option::Option::None,
            team_logo_dire: ::std::option::Option::None,
            team_id_radiant: ::std::option::Option::None,
            team_id_dire: ::std::option::Option::None,
            sort_score: ::std::option::Option::None,
            last_update_time: ::std::option::Option::None,
            radiant_lead: ::std::option::Option::None,
            radiant_score: ::std::option::Option::None,
            dire_score: ::std::option::Option::None,
            players: ::std::vec::Vec::new(),
            building_state: ::std::option::Option::None,
            weekend_tourney_tournament_id: ::std::option::Option::None,
            weekend_tourney_division: ::std::option::Option::None,
            weekend_tourney_skill_level: ::std::option::Option::None,
            weekend_tourney_bracket_round: ::std::option::Option::None,
            custom_game_difficulty: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CSourceTVGameSmall`
pub mod csource_tvgame_small {
    // @@protoc_insertion_point(message:CSourceTVGameSmall.Player)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Player {
        // message fields
        // @@protoc_insertion_point(field:CSourceTVGameSmall.Player.account_id)
        pub account_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CSourceTVGameSmall.Player.hero_id)
        pub hero_id: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CSourceTVGameSmall.Player.team_slot)
        pub team_slot: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CSourceTVGameSmall.Player.team)
        pub team: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CSourceTVGameSmall.Player.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Player {
        fn default() -> &'a Player {
            <Player as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl Player {
        pub fn new() -> Player {
            ::std::default::Default::default()
        }

        // optional uint32 account_id = 1;

        pub fn account_id(&self) -> u32 {
            self.account_id.unwrap_or(0)
        }

        pub fn clear_account_id(&mut self) {
            self.account_id = ::std::option::Option::None;
        }

        pub fn has_account_id(&self) -> bool {
            self.account_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_account_id(&mut self, v: u32) {
            self.account_id = ::std::option::Option::Some(v);
        }

        // optional int32 hero_id = 2;

        pub fn hero_id(&self) -> i32 {
            self.hero_id.unwrap_or(0)
        }

        pub fn clear_hero_id(&mut self) {
            self.hero_id = ::std::option::Option::None;
        }

        pub fn has_hero_id(&self) -> bool {
            self.hero_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_hero_id(&mut self, v: i32) {
            self.hero_id = ::std::option::Option::Some(v);
        }

        // optional uint32 team_slot = 3;

        pub fn team_slot(&self) -> u32 {
            self.team_slot.unwrap_or(0)
        }

        pub fn clear_team_slot(&mut self) {
            self.team_slot = ::std::option::Option::None;
        }

        pub fn has_team_slot(&self) -> bool {
            self.team_slot.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_slot(&mut self, v: u32) {
            self.team_slot = ::std::option::Option::Some(v);
        }

        // optional uint32 team = 4;

        pub fn team(&self) -> u32 {
            self.team.unwrap_or(0)
        }

        pub fn clear_team(&mut self) {
            self.team = ::std::option::Option::None;
        }

        pub fn has_team(&self) -> bool {
            self.team.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team(&mut self, v: u32) {
            self.team = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for Player {
        const NAME: &'static str = "Player";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.hero_id = ::std::option::Option::Some(is.read_int32()?);
                    },
                    24 => {
                        self.team_slot = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.team = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.account_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.hero_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(2, v);
            }
            if let Some(v) = self.team_slot {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.team {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.account_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.hero_id {
                os.write_int32(2, v)?;
            }
            if let Some(v) = self.team_slot {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.team {
                os.write_uint32(4, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Player {
            Player::new()
        }

        fn clear(&mut self) {
            self.account_id = ::std::option::Option::None;
            self.hero_id = ::std::option::Option::None;
            self.team_slot = ::std::option::Option::None;
            self.team = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Player {
            static instance: Player = Player {
                account_id: ::std::option::Option::None,
                hero_id: ::std::option::Option::None,
                team_slot: ::std::option::Option::None,
                team: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCFindTopSourceTVGames)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCFindTopSourceTVGames {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCFindTopSourceTVGames.search_key)
    pub search_key: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgClientToGCFindTopSourceTVGames.league_id)
    pub league_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientToGCFindTopSourceTVGames.hero_id)
    pub hero_id: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgClientToGCFindTopSourceTVGames.start_game)
    pub start_game: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientToGCFindTopSourceTVGames.game_list_index)
    pub game_list_index: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientToGCFindTopSourceTVGames.lobby_ids)
    pub lobby_ids: ::std::vec::Vec<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCFindTopSourceTVGames.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCFindTopSourceTVGames {
    fn default() -> &'a CMsgClientToGCFindTopSourceTVGames {
        <CMsgClientToGCFindTopSourceTVGames as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCFindTopSourceTVGames {
    pub fn new() -> CMsgClientToGCFindTopSourceTVGames {
        ::std::default::Default::default()
    }

    // optional string search_key = 1;

    pub fn search_key(&self) -> &str {
        match self.search_key.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_search_key(&mut self) {
        self.search_key = ::std::option::Option::None;
    }

    pub fn has_search_key(&self) -> bool {
        self.search_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_search_key(&mut self, v: ::std::string::String) {
        self.search_key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_search_key(&mut self) -> &mut ::std::string::String {
        if self.search_key.is_none() {
            self.search_key = ::std::option::Option::Some(::std::string::String::new());
        }
        self.search_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_search_key(&mut self) -> ::std::string::String {
        self.search_key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 league_id = 2;

    pub fn league_id(&self) -> u32 {
        self.league_id.unwrap_or(0)
    }

    pub fn clear_league_id(&mut self) {
        self.league_id = ::std::option::Option::None;
    }

    pub fn has_league_id(&self) -> bool {
        self.league_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_league_id(&mut self, v: u32) {
        self.league_id = ::std::option::Option::Some(v);
    }

    // optional int32 hero_id = 3;

    pub fn hero_id(&self) -> i32 {
        self.hero_id.unwrap_or(0)
    }

    pub fn clear_hero_id(&mut self) {
        self.hero_id = ::std::option::Option::None;
    }

    pub fn has_hero_id(&self) -> bool {
        self.hero_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hero_id(&mut self, v: i32) {
        self.hero_id = ::std::option::Option::Some(v);
    }

    // optional uint32 start_game = 4;

    pub fn start_game(&self) -> u32 {
        self.start_game.unwrap_or(0)
    }

    pub fn clear_start_game(&mut self) {
        self.start_game = ::std::option::Option::None;
    }

    pub fn has_start_game(&self) -> bool {
        self.start_game.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_game(&mut self, v: u32) {
        self.start_game = ::std::option::Option::Some(v);
    }

    // optional uint32 game_list_index = 5;

    pub fn game_list_index(&self) -> u32 {
        self.game_list_index.unwrap_or(0)
    }

    pub fn clear_game_list_index(&mut self) {
        self.game_list_index = ::std::option::Option::None;
    }

    pub fn has_game_list_index(&self) -> bool {
        self.game_list_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_list_index(&mut self, v: u32) {
        self.game_list_index = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCFindTopSourceTVGames {
    const NAME: &'static str = "CMsgClientToGCFindTopSourceTVGames";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.search_key = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.league_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.hero_id = ::std::option::Option::Some(is.read_int32()?);
                },
                32 => {
                    self.start_game = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.game_list_index = ::std::option::Option::Some(is.read_uint32()?);
                },
                50 => {
                    is.read_repeated_packed_uint64_into(&mut self.lobby_ids)?;
                },
                48 => {
                    self.lobby_ids.push(is.read_uint64()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.search_key.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.league_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.hero_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(3, v);
        }
        if let Some(v) = self.start_game {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.game_list_index {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
        }
        for value in &self.lobby_ids {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(6, *value);
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.search_key.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.league_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.hero_id {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.start_game {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.game_list_index {
            os.write_uint32(5, v)?;
        }
        for v in &self.lobby_ids {
            os.write_uint64(6, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCFindTopSourceTVGames {
        CMsgClientToGCFindTopSourceTVGames::new()
    }

    fn clear(&mut self) {
        self.search_key = ::std::option::Option::None;
        self.league_id = ::std::option::Option::None;
        self.hero_id = ::std::option::Option::None;
        self.start_game = ::std::option::Option::None;
        self.game_list_index = ::std::option::Option::None;
        self.lobby_ids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCFindTopSourceTVGames {
        static instance: CMsgClientToGCFindTopSourceTVGames = CMsgClientToGCFindTopSourceTVGames {
            search_key: ::std::option::Option::None,
            league_id: ::std::option::Option::None,
            hero_id: ::std::option::Option::None,
            start_game: ::std::option::Option::None,
            game_list_index: ::std::option::Option::None,
            lobby_ids: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgGCToClientFindTopSourceTVGamesResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCToClientFindTopSourceTVGamesResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
    pub search_key: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgGCToClientFindTopSourceTVGamesResponse.league_id)
    pub league_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCToClientFindTopSourceTVGamesResponse.hero_id)
    pub hero_id: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgGCToClientFindTopSourceTVGamesResponse.start_game)
    pub start_game: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCToClientFindTopSourceTVGamesResponse.num_games)
    pub num_games: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCToClientFindTopSourceTVGamesResponse.game_list_index)
    pub game_list_index: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCToClientFindTopSourceTVGamesResponse.game_list)
    pub game_list: ::std::vec::Vec<CSourceTVGameSmall>,
    // @@protoc_insertion_point(field:CMsgGCToClientFindTopSourceTVGamesResponse.specific_games)
    pub specific_games: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgGCToClientFindTopSourceTVGamesResponse.bot_game)
    pub bot_game: ::steam_vent_proto_common::protobuf::MessageField<CSourceTVGameSmall>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCToClientFindTopSourceTVGamesResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCToClientFindTopSourceTVGamesResponse {
    fn default() -> &'a CMsgGCToClientFindTopSourceTVGamesResponse {
        <CMsgGCToClientFindTopSourceTVGamesResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCToClientFindTopSourceTVGamesResponse {
    pub fn new() -> CMsgGCToClientFindTopSourceTVGamesResponse {
        ::std::default::Default::default()
    }

    // optional string search_key = 1;

    pub fn search_key(&self) -> &str {
        match self.search_key.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_search_key(&mut self) {
        self.search_key = ::std::option::Option::None;
    }

    pub fn has_search_key(&self) -> bool {
        self.search_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_search_key(&mut self, v: ::std::string::String) {
        self.search_key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_search_key(&mut self) -> &mut ::std::string::String {
        if self.search_key.is_none() {
            self.search_key = ::std::option::Option::Some(::std::string::String::new());
        }
        self.search_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_search_key(&mut self) -> ::std::string::String {
        self.search_key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 league_id = 2;

    pub fn league_id(&self) -> u32 {
        self.league_id.unwrap_or(0)
    }

    pub fn clear_league_id(&mut self) {
        self.league_id = ::std::option::Option::None;
    }

    pub fn has_league_id(&self) -> bool {
        self.league_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_league_id(&mut self, v: u32) {
        self.league_id = ::std::option::Option::Some(v);
    }

    // optional int32 hero_id = 3;

    pub fn hero_id(&self) -> i32 {
        self.hero_id.unwrap_or(0)
    }

    pub fn clear_hero_id(&mut self) {
        self.hero_id = ::std::option::Option::None;
    }

    pub fn has_hero_id(&self) -> bool {
        self.hero_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hero_id(&mut self, v: i32) {
        self.hero_id = ::std::option::Option::Some(v);
    }

    // optional uint32 start_game = 4;

    pub fn start_game(&self) -> u32 {
        self.start_game.unwrap_or(0)
    }

    pub fn clear_start_game(&mut self) {
        self.start_game = ::std::option::Option::None;
    }

    pub fn has_start_game(&self) -> bool {
        self.start_game.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_game(&mut self, v: u32) {
        self.start_game = ::std::option::Option::Some(v);
    }

    // optional uint32 num_games = 5;

    pub fn num_games(&self) -> u32 {
        self.num_games.unwrap_or(0)
    }

    pub fn clear_num_games(&mut self) {
        self.num_games = ::std::option::Option::None;
    }

    pub fn has_num_games(&self) -> bool {
        self.num_games.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_games(&mut self, v: u32) {
        self.num_games = ::std::option::Option::Some(v);
    }

    // optional uint32 game_list_index = 6;

    pub fn game_list_index(&self) -> u32 {
        self.game_list_index.unwrap_or(0)
    }

    pub fn clear_game_list_index(&mut self) {
        self.game_list_index = ::std::option::Option::None;
    }

    pub fn has_game_list_index(&self) -> bool {
        self.game_list_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_list_index(&mut self, v: u32) {
        self.game_list_index = ::std::option::Option::Some(v);
    }

    // optional bool specific_games = 8;

    pub fn specific_games(&self) -> bool {
        self.specific_games.unwrap_or(false)
    }

    pub fn clear_specific_games(&mut self) {
        self.specific_games = ::std::option::Option::None;
    }

    pub fn has_specific_games(&self) -> bool {
        self.specific_games.is_some()
    }

    // Param is passed by value, moved
    pub fn set_specific_games(&mut self, v: bool) {
        self.specific_games = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCToClientFindTopSourceTVGamesResponse {
    const NAME: &'static str = "CMsgGCToClientFindTopSourceTVGamesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.search_key = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.league_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.hero_id = ::std::option::Option::Some(is.read_int32()?);
                },
                32 => {
                    self.start_game = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.num_games = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.game_list_index = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    self.game_list.push(is.read_message()?);
                },
                64 => {
                    self.specific_games = ::std::option::Option::Some(is.read_bool()?);
                },
                74 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.bot_game)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.search_key.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.league_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.hero_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(3, v);
        }
        if let Some(v) = self.start_game {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.num_games {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.game_list_index {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(6, v);
        }
        for value in &self.game_list {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.specific_games {
            my_size += 1 + 1;
        }
        if let Some(v) = self.bot_game.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.search_key.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.league_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.hero_id {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.start_game {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.num_games {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.game_list_index {
            os.write_uint32(6, v)?;
        }
        for v in &self.game_list {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        if let Some(v) = self.specific_games {
            os.write_bool(8, v)?;
        }
        if let Some(v) = self.bot_game.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCToClientFindTopSourceTVGamesResponse {
        CMsgGCToClientFindTopSourceTVGamesResponse::new()
    }

    fn clear(&mut self) {
        self.search_key = ::std::option::Option::None;
        self.league_id = ::std::option::Option::None;
        self.hero_id = ::std::option::Option::None;
        self.start_game = ::std::option::Option::None;
        self.num_games = ::std::option::Option::None;
        self.game_list_index = ::std::option::Option::None;
        self.game_list.clear();
        self.specific_games = ::std::option::Option::None;
        self.bot_game.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCToClientFindTopSourceTVGamesResponse {
        static instance: CMsgGCToClientFindTopSourceTVGamesResponse = CMsgGCToClientFindTopSourceTVGamesResponse {
            search_key: ::std::option::Option::None,
            league_id: ::std::option::Option::None,
            hero_id: ::std::option::Option::None,
            start_game: ::std::option::Option::None,
            num_games: ::std::option::Option::None,
            game_list_index: ::std::option::Option::None,
            game_list: ::std::vec::Vec::new(),
            specific_games: ::std::option::Option::None,
            bot_game: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgGCToClientTopWeekendTourneyGames)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCToClientTopWeekendTourneyGames {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCToClientTopWeekendTourneyGames.live_games)
    pub live_games: ::std::vec::Vec<CSourceTVGameSmall>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCToClientTopWeekendTourneyGames.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCToClientTopWeekendTourneyGames {
    fn default() -> &'a CMsgGCToClientTopWeekendTourneyGames {
        <CMsgGCToClientTopWeekendTourneyGames as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCToClientTopWeekendTourneyGames {
    pub fn new() -> CMsgGCToClientTopWeekendTourneyGames {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCToClientTopWeekendTourneyGames {
    const NAME: &'static str = "CMsgGCToClientTopWeekendTourneyGames";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.live_games.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.live_games {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.live_games {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCToClientTopWeekendTourneyGames {
        CMsgGCToClientTopWeekendTourneyGames::new()
    }

    fn clear(&mut self) {
        self.live_games.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCToClientTopWeekendTourneyGames {
        static instance: CMsgGCToClientTopWeekendTourneyGames = CMsgGCToClientTopWeekendTourneyGames {
            live_games: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCTopLeagueMatchesRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCTopLeagueMatchesRequest {
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCTopLeagueMatchesRequest.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCTopLeagueMatchesRequest {
    fn default() -> &'a CMsgClientToGCTopLeagueMatchesRequest {
        <CMsgClientToGCTopLeagueMatchesRequest as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCTopLeagueMatchesRequest {
    pub fn new() -> CMsgClientToGCTopLeagueMatchesRequest {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCTopLeagueMatchesRequest {
    const NAME: &'static str = "CMsgClientToGCTopLeagueMatchesRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCTopLeagueMatchesRequest {
        CMsgClientToGCTopLeagueMatchesRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCTopLeagueMatchesRequest {
        static instance: CMsgClientToGCTopLeagueMatchesRequest = CMsgClientToGCTopLeagueMatchesRequest {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCTopFriendMatchesRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCTopFriendMatchesRequest {
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCTopFriendMatchesRequest.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCTopFriendMatchesRequest {
    fn default() -> &'a CMsgClientToGCTopFriendMatchesRequest {
        <CMsgClientToGCTopFriendMatchesRequest as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCTopFriendMatchesRequest {
    pub fn new() -> CMsgClientToGCTopFriendMatchesRequest {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCTopFriendMatchesRequest {
    const NAME: &'static str = "CMsgClientToGCTopFriendMatchesRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCTopFriendMatchesRequest {
        CMsgClientToGCTopFriendMatchesRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCTopFriendMatchesRequest {
        static instance: CMsgClientToGCTopFriendMatchesRequest = CMsgClientToGCTopFriendMatchesRequest {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCMatchesMinimalRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCMatchesMinimalRequest {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCMatchesMinimalRequest.match_ids)
    pub match_ids: ::std::vec::Vec<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCMatchesMinimalRequest.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCMatchesMinimalRequest {
    fn default() -> &'a CMsgClientToGCMatchesMinimalRequest {
        <CMsgClientToGCMatchesMinimalRequest as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCMatchesMinimalRequest {
    pub fn new() -> CMsgClientToGCMatchesMinimalRequest {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCMatchesMinimalRequest {
    const NAME: &'static str = "CMsgClientToGCMatchesMinimalRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint64_into(&mut self.match_ids)?;
                },
                8 => {
                    self.match_ids.push(is.read_uint64()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.match_ids {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(1, *value);
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.match_ids {
            os.write_uint64(1, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCMatchesMinimalRequest {
        CMsgClientToGCMatchesMinimalRequest::new()
    }

    fn clear(&mut self) {
        self.match_ids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCMatchesMinimalRequest {
        static instance: CMsgClientToGCMatchesMinimalRequest = CMsgClientToGCMatchesMinimalRequest {
            match_ids: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCMatchesMinimalResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCMatchesMinimalResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCMatchesMinimalResponse.matches)
    pub matches: ::std::vec::Vec<super::dota_gcmessages_common::CMsgDOTAMatchMinimal>,
    // @@protoc_insertion_point(field:CMsgClientToGCMatchesMinimalResponse.last_match)
    pub last_match: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCMatchesMinimalResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCMatchesMinimalResponse {
    fn default() -> &'a CMsgClientToGCMatchesMinimalResponse {
        <CMsgClientToGCMatchesMinimalResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCMatchesMinimalResponse {
    pub fn new() -> CMsgClientToGCMatchesMinimalResponse {
        ::std::default::Default::default()
    }

    // optional bool last_match = 2;

    pub fn last_match(&self) -> bool {
        self.last_match.unwrap_or(false)
    }

    pub fn clear_last_match(&mut self) {
        self.last_match = ::std::option::Option::None;
    }

    pub fn has_last_match(&self) -> bool {
        self.last_match.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_match(&mut self, v: bool) {
        self.last_match = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCMatchesMinimalResponse {
    const NAME: &'static str = "CMsgClientToGCMatchesMinimalResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.matches.push(is.read_message()?);
                },
                16 => {
                    self.last_match = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.matches {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.last_match {
            my_size += 1 + 1;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.matches {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.last_match {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCMatchesMinimalResponse {
        CMsgClientToGCMatchesMinimalResponse::new()
    }

    fn clear(&mut self) {
        self.matches.clear();
        self.last_match = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCMatchesMinimalResponse {
        static instance: CMsgClientToGCMatchesMinimalResponse = CMsgClientToGCMatchesMinimalResponse {
            matches: ::std::vec::Vec::new(),
            last_match: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgGCToClientTopLeagueMatchesResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCToClientTopLeagueMatchesResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCToClientTopLeagueMatchesResponse.matches)
    pub matches: ::std::vec::Vec<super::dota_gcmessages_common::CMsgDOTAMatchMinimal>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCToClientTopLeagueMatchesResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCToClientTopLeagueMatchesResponse {
    fn default() -> &'a CMsgGCToClientTopLeagueMatchesResponse {
        <CMsgGCToClientTopLeagueMatchesResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCToClientTopLeagueMatchesResponse {
    pub fn new() -> CMsgGCToClientTopLeagueMatchesResponse {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCToClientTopLeagueMatchesResponse {
    const NAME: &'static str = "CMsgGCToClientTopLeagueMatchesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.matches.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.matches {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.matches {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCToClientTopLeagueMatchesResponse {
        CMsgGCToClientTopLeagueMatchesResponse::new()
    }

    fn clear(&mut self) {
        self.matches.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCToClientTopLeagueMatchesResponse {
        static instance: CMsgGCToClientTopLeagueMatchesResponse = CMsgGCToClientTopLeagueMatchesResponse {
            matches: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgGCToClientTopFriendMatchesResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCToClientTopFriendMatchesResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCToClientTopFriendMatchesResponse.matches)
    pub matches: ::std::vec::Vec<super::dota_gcmessages_common::CMsgDOTAMatchMinimal>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCToClientTopFriendMatchesResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCToClientTopFriendMatchesResponse {
    fn default() -> &'a CMsgGCToClientTopFriendMatchesResponse {
        <CMsgGCToClientTopFriendMatchesResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCToClientTopFriendMatchesResponse {
    pub fn new() -> CMsgGCToClientTopFriendMatchesResponse {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCToClientTopFriendMatchesResponse {
    const NAME: &'static str = "CMsgGCToClientTopFriendMatchesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.matches.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.matches {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.matches {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCToClientTopFriendMatchesResponse {
        CMsgGCToClientTopFriendMatchesResponse::new()
    }

    fn clear(&mut self) {
        self.matches.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCToClientTopFriendMatchesResponse {
        static instance: CMsgGCToClientTopFriendMatchesResponse = CMsgGCToClientTopFriendMatchesResponse {
            matches: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgSpectateFriendGame)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSpectateFriendGame {
    // message fields
    // @@protoc_insertion_point(field:CMsgSpectateFriendGame.steam_id)
    pub steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSpectateFriendGame.live)
    pub live: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSpectateFriendGame.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSpectateFriendGame {
    fn default() -> &'a CMsgSpectateFriendGame {
        <CMsgSpectateFriendGame as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgSpectateFriendGame {
    pub fn new() -> CMsgSpectateFriendGame {
        ::std::default::Default::default()
    }

    // optional fixed64 steam_id = 1;

    pub fn steam_id(&self) -> u64 {
        self.steam_id.unwrap_or(0)
    }

    pub fn clear_steam_id(&mut self) {
        self.steam_id = ::std::option::Option::None;
    }

    pub fn has_steam_id(&self) -> bool {
        self.steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_id(&mut self, v: u64) {
        self.steam_id = ::std::option::Option::Some(v);
    }

    // optional bool live = 2;

    pub fn live(&self) -> bool {
        self.live.unwrap_or(false)
    }

    pub fn clear_live(&mut self) {
        self.live = ::std::option::Option::None;
    }

    pub fn has_live(&self) -> bool {
        self.live.is_some()
    }

    // Param is passed by value, moved
    pub fn set_live(&mut self, v: bool) {
        self.live = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgSpectateFriendGame {
    const NAME: &'static str = "CMsgSpectateFriendGame";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.live = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.live {
            my_size += 1 + 1;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.steam_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.live {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSpectateFriendGame {
        CMsgSpectateFriendGame::new()
    }

    fn clear(&mut self) {
        self.steam_id = ::std::option::Option::None;
        self.live = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSpectateFriendGame {
        static instance: CMsgSpectateFriendGame = CMsgSpectateFriendGame {
            steam_id: ::std::option::Option::None,
            live: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgSpectateFriendGameResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSpectateFriendGameResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgSpectateFriendGameResponse.server_steamid)
    pub server_steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSpectateFriendGameResponse.watch_live_result)
    pub watch_live_result: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_spectate_friend_game_response::EWatchLiveResult>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSpectateFriendGameResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSpectateFriendGameResponse {
    fn default() -> &'a CMsgSpectateFriendGameResponse {
        <CMsgSpectateFriendGameResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgSpectateFriendGameResponse {
    pub fn new() -> CMsgSpectateFriendGameResponse {
        ::std::default::Default::default()
    }

    // optional fixed64 server_steamid = 4;

    pub fn server_steamid(&self) -> u64 {
        self.server_steamid.unwrap_or(0)
    }

    pub fn clear_server_steamid(&mut self) {
        self.server_steamid = ::std::option::Option::None;
    }

    pub fn has_server_steamid(&self) -> bool {
        self.server_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_steamid(&mut self, v: u64) {
        self.server_steamid = ::std::option::Option::Some(v);
    }

    // optional .CMsgSpectateFriendGameResponse.EWatchLiveResult watch_live_result = 5;

    pub fn watch_live_result(&self) -> cmsg_spectate_friend_game_response::EWatchLiveResult {
        match self.watch_live_result {
            Some(e) => e.enum_value_or(cmsg_spectate_friend_game_response::EWatchLiveResult::SUCCESS),
            None => cmsg_spectate_friend_game_response::EWatchLiveResult::SUCCESS,
        }
    }

    pub fn clear_watch_live_result(&mut self) {
        self.watch_live_result = ::std::option::Option::None;
    }

    pub fn has_watch_live_result(&self) -> bool {
        self.watch_live_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_watch_live_result(&mut self, v: cmsg_spectate_friend_game_response::EWatchLiveResult) {
        self.watch_live_result = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgSpectateFriendGameResponse {
    const NAME: &'static str = "CMsgSpectateFriendGameResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                33 => {
                    self.server_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                40 => {
                    self.watch_live_result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.server_steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.watch_live_result {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(5, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.server_steamid {
            os.write_fixed64(4, v)?;
        }
        if let Some(v) = self.watch_live_result {
            os.write_enum(5, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSpectateFriendGameResponse {
        CMsgSpectateFriendGameResponse::new()
    }

    fn clear(&mut self) {
        self.server_steamid = ::std::option::Option::None;
        self.watch_live_result = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSpectateFriendGameResponse {
        static instance: CMsgSpectateFriendGameResponse = CMsgSpectateFriendGameResponse {
            server_steamid: ::std::option::Option::None,
            watch_live_result: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgSpectateFriendGameResponse`
pub mod cmsg_spectate_friend_game_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgSpectateFriendGameResponse.EWatchLiveResult)
    pub enum EWatchLiveResult {
        // @@protoc_insertion_point(enum_value:CMsgSpectateFriendGameResponse.EWatchLiveResult.SUCCESS)
        SUCCESS = 0,
        // @@protoc_insertion_point(enum_value:CMsgSpectateFriendGameResponse.EWatchLiveResult.ERROR_GENERIC)
        ERROR_GENERIC = 1,
        // @@protoc_insertion_point(enum_value:CMsgSpectateFriendGameResponse.EWatchLiveResult.ERROR_NO_PLUS)
        ERROR_NO_PLUS = 2,
        // @@protoc_insertion_point(enum_value:CMsgSpectateFriendGameResponse.EWatchLiveResult.ERROR_NOT_FRIENDS)
        ERROR_NOT_FRIENDS = 3,
        // @@protoc_insertion_point(enum_value:CMsgSpectateFriendGameResponse.EWatchLiveResult.ERROR_LOBBY_NOT_FOUND)
        ERROR_LOBBY_NOT_FOUND = 4,
        // @@protoc_insertion_point(enum_value:CMsgSpectateFriendGameResponse.EWatchLiveResult.ERROR_SPECTATOR_IN_A_LOBBY)
        ERROR_SPECTATOR_IN_A_LOBBY = 5,
        // @@protoc_insertion_point(enum_value:CMsgSpectateFriendGameResponse.EWatchLiveResult.ERROR_LOBBY_IS_LAN)
        ERROR_LOBBY_IS_LAN = 6,
        // @@protoc_insertion_point(enum_value:CMsgSpectateFriendGameResponse.EWatchLiveResult.ERROR_WRONG_LOBBY_TYPE)
        ERROR_WRONG_LOBBY_TYPE = 7,
        // @@protoc_insertion_point(enum_value:CMsgSpectateFriendGameResponse.EWatchLiveResult.ERROR_WRONG_LOBBY_STATE)
        ERROR_WRONG_LOBBY_STATE = 8,
        // @@protoc_insertion_point(enum_value:CMsgSpectateFriendGameResponse.EWatchLiveResult.ERROR_PLAYER_NOT_PLAYER)
        ERROR_PLAYER_NOT_PLAYER = 9,
        // @@protoc_insertion_point(enum_value:CMsgSpectateFriendGameResponse.EWatchLiveResult.ERROR_TOO_MANY_SPECTATORS)
        ERROR_TOO_MANY_SPECTATORS = 10,
        // @@protoc_insertion_point(enum_value:CMsgSpectateFriendGameResponse.EWatchLiveResult.ERROR_SPECTATOR_SWITCHED_TEAMS)
        ERROR_SPECTATOR_SWITCHED_TEAMS = 11,
        // @@protoc_insertion_point(enum_value:CMsgSpectateFriendGameResponse.EWatchLiveResult.ERROR_FRIENDS_ON_BOTH_SIDES)
        ERROR_FRIENDS_ON_BOTH_SIDES = 12,
        // @@protoc_insertion_point(enum_value:CMsgSpectateFriendGameResponse.EWatchLiveResult.ERROR_SPECTATOR_IN_THIS_LOBBY)
        ERROR_SPECTATOR_IN_THIS_LOBBY = 13,
        // @@protoc_insertion_point(enum_value:CMsgSpectateFriendGameResponse.EWatchLiveResult.ERROR_LOBBY_IS_LEAGUE)
        ERROR_LOBBY_IS_LEAGUE = 14,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for EWatchLiveResult {
        const NAME: &'static str = "EWatchLiveResult";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EWatchLiveResult> {
            match value {
                0 => ::std::option::Option::Some(EWatchLiveResult::SUCCESS),
                1 => ::std::option::Option::Some(EWatchLiveResult::ERROR_GENERIC),
                2 => ::std::option::Option::Some(EWatchLiveResult::ERROR_NO_PLUS),
                3 => ::std::option::Option::Some(EWatchLiveResult::ERROR_NOT_FRIENDS),
                4 => ::std::option::Option::Some(EWatchLiveResult::ERROR_LOBBY_NOT_FOUND),
                5 => ::std::option::Option::Some(EWatchLiveResult::ERROR_SPECTATOR_IN_A_LOBBY),
                6 => ::std::option::Option::Some(EWatchLiveResult::ERROR_LOBBY_IS_LAN),
                7 => ::std::option::Option::Some(EWatchLiveResult::ERROR_WRONG_LOBBY_TYPE),
                8 => ::std::option::Option::Some(EWatchLiveResult::ERROR_WRONG_LOBBY_STATE),
                9 => ::std::option::Option::Some(EWatchLiveResult::ERROR_PLAYER_NOT_PLAYER),
                10 => ::std::option::Option::Some(EWatchLiveResult::ERROR_TOO_MANY_SPECTATORS),
                11 => ::std::option::Option::Some(EWatchLiveResult::ERROR_SPECTATOR_SWITCHED_TEAMS),
                12 => ::std::option::Option::Some(EWatchLiveResult::ERROR_FRIENDS_ON_BOTH_SIDES),
                13 => ::std::option::Option::Some(EWatchLiveResult::ERROR_SPECTATOR_IN_THIS_LOBBY),
                14 => ::std::option::Option::Some(EWatchLiveResult::ERROR_LOBBY_IS_LEAGUE),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EWatchLiveResult> {
            match str {
                "SUCCESS" => ::std::option::Option::Some(EWatchLiveResult::SUCCESS),
                "ERROR_GENERIC" => ::std::option::Option::Some(EWatchLiveResult::ERROR_GENERIC),
                "ERROR_NO_PLUS" => ::std::option::Option::Some(EWatchLiveResult::ERROR_NO_PLUS),
                "ERROR_NOT_FRIENDS" => ::std::option::Option::Some(EWatchLiveResult::ERROR_NOT_FRIENDS),
                "ERROR_LOBBY_NOT_FOUND" => ::std::option::Option::Some(EWatchLiveResult::ERROR_LOBBY_NOT_FOUND),
                "ERROR_SPECTATOR_IN_A_LOBBY" => ::std::option::Option::Some(EWatchLiveResult::ERROR_SPECTATOR_IN_A_LOBBY),
                "ERROR_LOBBY_IS_LAN" => ::std::option::Option::Some(EWatchLiveResult::ERROR_LOBBY_IS_LAN),
                "ERROR_WRONG_LOBBY_TYPE" => ::std::option::Option::Some(EWatchLiveResult::ERROR_WRONG_LOBBY_TYPE),
                "ERROR_WRONG_LOBBY_STATE" => ::std::option::Option::Some(EWatchLiveResult::ERROR_WRONG_LOBBY_STATE),
                "ERROR_PLAYER_NOT_PLAYER" => ::std::option::Option::Some(EWatchLiveResult::ERROR_PLAYER_NOT_PLAYER),
                "ERROR_TOO_MANY_SPECTATORS" => ::std::option::Option::Some(EWatchLiveResult::ERROR_TOO_MANY_SPECTATORS),
                "ERROR_SPECTATOR_SWITCHED_TEAMS" => ::std::option::Option::Some(EWatchLiveResult::ERROR_SPECTATOR_SWITCHED_TEAMS),
                "ERROR_FRIENDS_ON_BOTH_SIDES" => ::std::option::Option::Some(EWatchLiveResult::ERROR_FRIENDS_ON_BOTH_SIDES),
                "ERROR_SPECTATOR_IN_THIS_LOBBY" => ::std::option::Option::Some(EWatchLiveResult::ERROR_SPECTATOR_IN_THIS_LOBBY),
                "ERROR_LOBBY_IS_LEAGUE" => ::std::option::Option::Some(EWatchLiveResult::ERROR_LOBBY_IS_LEAGUE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EWatchLiveResult] = &[
            EWatchLiveResult::SUCCESS,
            EWatchLiveResult::ERROR_GENERIC,
            EWatchLiveResult::ERROR_NO_PLUS,
            EWatchLiveResult::ERROR_NOT_FRIENDS,
            EWatchLiveResult::ERROR_LOBBY_NOT_FOUND,
            EWatchLiveResult::ERROR_SPECTATOR_IN_A_LOBBY,
            EWatchLiveResult::ERROR_LOBBY_IS_LAN,
            EWatchLiveResult::ERROR_WRONG_LOBBY_TYPE,
            EWatchLiveResult::ERROR_WRONG_LOBBY_STATE,
            EWatchLiveResult::ERROR_PLAYER_NOT_PLAYER,
            EWatchLiveResult::ERROR_TOO_MANY_SPECTATORS,
            EWatchLiveResult::ERROR_SPECTATOR_SWITCHED_TEAMS,
            EWatchLiveResult::ERROR_FRIENDS_ON_BOTH_SIDES,
            EWatchLiveResult::ERROR_SPECTATOR_IN_THIS_LOBBY,
            EWatchLiveResult::ERROR_LOBBY_IS_LEAGUE,
        ];
    }

    impl ::std::default::Default for EWatchLiveResult {
        fn default() -> Self {
            EWatchLiveResult::SUCCESS
        }
    }

}

// @@protoc_insertion_point(message:CDOTAReplayDownloadInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDOTAReplayDownloadInfo {
    // message fields
    // @@protoc_insertion_point(field:CDOTAReplayDownloadInfo.match)
    pub match_: ::steam_vent_proto_common::protobuf::MessageField<super::dota_gcmessages_common::CMsgDOTAMatchMinimal>,
    // @@protoc_insertion_point(field:CDOTAReplayDownloadInfo.title)
    pub title: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CDOTAReplayDownloadInfo.description)
    pub description: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CDOTAReplayDownloadInfo.size)
    pub size: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CDOTAReplayDownloadInfo.tags)
    pub tags: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:CDOTAReplayDownloadInfo.exists_on_disk)
    pub exists_on_disk: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CDOTAReplayDownloadInfo.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDOTAReplayDownloadInfo {
    fn default() -> &'a CDOTAReplayDownloadInfo {
        <CDOTAReplayDownloadInfo as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CDOTAReplayDownloadInfo {
    pub fn new() -> CDOTAReplayDownloadInfo {
        ::std::default::Default::default()
    }

    // optional string title = 2;

    pub fn title(&self) -> &str {
        match self.title.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_title(&mut self) {
        self.title = ::std::option::Option::None;
    }

    pub fn has_title(&self) -> bool {
        self.title.is_some()
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        if self.title.is_none() {
            self.title = ::std::option::Option::Some(::std::string::String::new());
        }
        self.title.as_mut().unwrap()
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        self.title.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string description = 3;

    pub fn description(&self) -> &str {
        match self.description.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_description(&mut self) {
        self.description = ::std::option::Option::None;
    }

    pub fn has_description(&self) -> bool {
        self.description.is_some()
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        if self.description.is_none() {
            self.description = ::std::option::Option::Some(::std::string::String::new());
        }
        self.description.as_mut().unwrap()
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        self.description.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 size = 4;

    pub fn size(&self) -> u32 {
        self.size.unwrap_or(0)
    }

    pub fn clear_size(&mut self) {
        self.size = ::std::option::Option::None;
    }

    pub fn has_size(&self) -> bool {
        self.size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_size(&mut self, v: u32) {
        self.size = ::std::option::Option::Some(v);
    }

    // optional bool exists_on_disk = 6;

    pub fn exists_on_disk(&self) -> bool {
        self.exists_on_disk.unwrap_or(false)
    }

    pub fn clear_exists_on_disk(&mut self) {
        self.exists_on_disk = ::std::option::Option::None;
    }

    pub fn has_exists_on_disk(&self) -> bool {
        self.exists_on_disk.is_some()
    }

    // Param is passed by value, moved
    pub fn set_exists_on_disk(&mut self, v: bool) {
        self.exists_on_disk = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CDOTAReplayDownloadInfo {
    const NAME: &'static str = "CDOTAReplayDownloadInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.match_)?;
                },
                18 => {
                    self.title = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.description = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.size = ::std::option::Option::Some(is.read_uint32()?);
                },
                42 => {
                    self.tags.push(is.read_string()?);
                },
                48 => {
                    self.exists_on_disk = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.match_.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.title.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.description.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.size {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
        }
        for value in &self.tags {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(5, &value);
        };
        if let Some(v) = self.exists_on_disk {
            my_size += 1 + 1;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.match_.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.title.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.description.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.size {
            os.write_uint32(4, v)?;
        }
        for v in &self.tags {
            os.write_string(5, &v)?;
        };
        if let Some(v) = self.exists_on_disk {
            os.write_bool(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDOTAReplayDownloadInfo {
        CDOTAReplayDownloadInfo::new()
    }

    fn clear(&mut self) {
        self.match_.clear();
        self.title = ::std::option::Option::None;
        self.description = ::std::option::Option::None;
        self.size = ::std::option::Option::None;
        self.tags.clear();
        self.exists_on_disk = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDOTAReplayDownloadInfo {
        static instance: CDOTAReplayDownloadInfo = CDOTAReplayDownloadInfo {
            match_: ::steam_vent_proto_common::protobuf::MessageField::none(),
            title: ::std::option::Option::None,
            description: ::std::option::Option::None,
            size: ::std::option::Option::None,
            tags: ::std::vec::Vec::new(),
            exists_on_disk: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CDOTAReplayDownloadInfo`
pub mod cdotareplay_download_info {
    // @@protoc_insertion_point(message:CDOTAReplayDownloadInfo.Highlight)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Highlight {
        // message fields
        // @@protoc_insertion_point(field:CDOTAReplayDownloadInfo.Highlight.timestamp)
        pub timestamp: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CDOTAReplayDownloadInfo.Highlight.description)
        pub description: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CDOTAReplayDownloadInfo.Highlight.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Highlight {
        fn default() -> &'a Highlight {
            <Highlight as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl Highlight {
        pub fn new() -> Highlight {
            ::std::default::Default::default()
        }

        // optional uint32 timestamp = 1;

        pub fn timestamp(&self) -> u32 {
            self.timestamp.unwrap_or(0)
        }

        pub fn clear_timestamp(&mut self) {
            self.timestamp = ::std::option::Option::None;
        }

        pub fn has_timestamp(&self) -> bool {
            self.timestamp.is_some()
        }

        // Param is passed by value, moved
        pub fn set_timestamp(&mut self, v: u32) {
            self.timestamp = ::std::option::Option::Some(v);
        }

        // optional string description = 2;

        pub fn description(&self) -> &str {
            match self.description.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_description(&mut self) {
            self.description = ::std::option::Option::None;
        }

        pub fn has_description(&self) -> bool {
            self.description.is_some()
        }

        // Param is passed by value, moved
        pub fn set_description(&mut self, v: ::std::string::String) {
            self.description = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_description(&mut self) -> &mut ::std::string::String {
            if self.description.is_none() {
                self.description = ::std::option::Option::Some(::std::string::String::new());
            }
            self.description.as_mut().unwrap()
        }

        // Take field
        pub fn take_description(&mut self) -> ::std::string::String {
            self.description.take().unwrap_or_else(|| ::std::string::String::new())
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for Highlight {
        const NAME: &'static str = "Highlight";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.timestamp = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        self.description = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.timestamp {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.description.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.timestamp {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.description.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Highlight {
            Highlight::new()
        }

        fn clear(&mut self) {
            self.timestamp = ::std::option::Option::None;
            self.description = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Highlight {
            static instance: Highlight = Highlight {
                timestamp: ::std::option::Option::None,
                description: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgWatchGame)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgWatchGame {
    // message fields
    // @@protoc_insertion_point(field:CMsgWatchGame.server_steamid)
    pub server_steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgWatchGame.client_version)
    pub client_version: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgWatchGame.watch_server_steamid)
    pub watch_server_steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgWatchGame.lobby_id)
    pub lobby_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgWatchGame.regions)
    pub regions: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgWatchGame.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgWatchGame {
    fn default() -> &'a CMsgWatchGame {
        <CMsgWatchGame as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgWatchGame {
    pub fn new() -> CMsgWatchGame {
        ::std::default::Default::default()
    }

    // optional fixed64 server_steamid = 1;

    pub fn server_steamid(&self) -> u64 {
        self.server_steamid.unwrap_or(0)
    }

    pub fn clear_server_steamid(&mut self) {
        self.server_steamid = ::std::option::Option::None;
    }

    pub fn has_server_steamid(&self) -> bool {
        self.server_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_steamid(&mut self, v: u64) {
        self.server_steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 client_version = 2;

    pub fn client_version(&self) -> u32 {
        self.client_version.unwrap_or(0)
    }

    pub fn clear_client_version(&mut self) {
        self.client_version = ::std::option::Option::None;
    }

    pub fn has_client_version(&self) -> bool {
        self.client_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_version(&mut self, v: u32) {
        self.client_version = ::std::option::Option::Some(v);
    }

    // optional fixed64 watch_server_steamid = 3;

    pub fn watch_server_steamid(&self) -> u64 {
        self.watch_server_steamid.unwrap_or(0)
    }

    pub fn clear_watch_server_steamid(&mut self) {
        self.watch_server_steamid = ::std::option::Option::None;
    }

    pub fn has_watch_server_steamid(&self) -> bool {
        self.watch_server_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_watch_server_steamid(&mut self, v: u64) {
        self.watch_server_steamid = ::std::option::Option::Some(v);
    }

    // optional uint64 lobby_id = 4;

    pub fn lobby_id(&self) -> u64 {
        self.lobby_id.unwrap_or(0)
    }

    pub fn clear_lobby_id(&mut self) {
        self.lobby_id = ::std::option::Option::None;
    }

    pub fn has_lobby_id(&self) -> bool {
        self.lobby_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lobby_id(&mut self, v: u64) {
        self.lobby_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgWatchGame {
    const NAME: &'static str = "CMsgWatchGame";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.server_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.client_version = ::std::option::Option::Some(is.read_uint32()?);
                },
                25 => {
                    self.watch_server_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                32 => {
                    self.lobby_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                42 => {
                    is.read_repeated_packed_uint32_into(&mut self.regions)?;
                },
                40 => {
                    self.regions.push(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.server_steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.client_version {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.watch_server_steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.lobby_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(4, v);
        }
        for value in &self.regions {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, *value);
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.server_steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.client_version {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.watch_server_steamid {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.lobby_id {
            os.write_uint64(4, v)?;
        }
        for v in &self.regions {
            os.write_uint32(5, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgWatchGame {
        CMsgWatchGame::new()
    }

    fn clear(&mut self) {
        self.server_steamid = ::std::option::Option::None;
        self.client_version = ::std::option::Option::None;
        self.watch_server_steamid = ::std::option::Option::None;
        self.lobby_id = ::std::option::Option::None;
        self.regions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgWatchGame {
        static instance: CMsgWatchGame = CMsgWatchGame {
            server_steamid: ::std::option::Option::None,
            client_version: ::std::option::Option::None,
            watch_server_steamid: ::std::option::Option::None,
            lobby_id: ::std::option::Option::None,
            regions: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgCancelWatchGame)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgCancelWatchGame {
    // special fields
    // @@protoc_insertion_point(special_field:CMsgCancelWatchGame.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgCancelWatchGame {
    fn default() -> &'a CMsgCancelWatchGame {
        <CMsgCancelWatchGame as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgCancelWatchGame {
    pub fn new() -> CMsgCancelWatchGame {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgCancelWatchGame {
    const NAME: &'static str = "CMsgCancelWatchGame";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgCancelWatchGame {
        CMsgCancelWatchGame::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgCancelWatchGame {
        static instance: CMsgCancelWatchGame = CMsgCancelWatchGame {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgWatchGameResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgWatchGameResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgWatchGameResponse.watch_game_result)
    pub watch_game_result: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_watch_game_response::WatchGameResult>>,
    // @@protoc_insertion_point(field:CMsgWatchGameResponse.source_tv_public_addr)
    pub source_tv_public_addr: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgWatchGameResponse.source_tv_private_addr)
    pub source_tv_private_addr: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgWatchGameResponse.source_tv_port)
    pub source_tv_port: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgWatchGameResponse.game_server_steamid)
    pub game_server_steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgWatchGameResponse.watch_server_steamid)
    pub watch_server_steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgWatchGameResponse.watch_tv_unique_secret_code)
    pub watch_tv_unique_secret_code: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgWatchGameResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgWatchGameResponse {
    fn default() -> &'a CMsgWatchGameResponse {
        <CMsgWatchGameResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgWatchGameResponse {
    pub fn new() -> CMsgWatchGameResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgWatchGameResponse.WatchGameResult watch_game_result = 1;

    pub fn watch_game_result(&self) -> cmsg_watch_game_response::WatchGameResult {
        match self.watch_game_result {
            Some(e) => e.enum_value_or(cmsg_watch_game_response::WatchGameResult::PENDING),
            None => cmsg_watch_game_response::WatchGameResult::PENDING,
        }
    }

    pub fn clear_watch_game_result(&mut self) {
        self.watch_game_result = ::std::option::Option::None;
    }

    pub fn has_watch_game_result(&self) -> bool {
        self.watch_game_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_watch_game_result(&mut self, v: cmsg_watch_game_response::WatchGameResult) {
        self.watch_game_result = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint32 source_tv_public_addr = 2;

    pub fn source_tv_public_addr(&self) -> u32 {
        self.source_tv_public_addr.unwrap_or(0)
    }

    pub fn clear_source_tv_public_addr(&mut self) {
        self.source_tv_public_addr = ::std::option::Option::None;
    }

    pub fn has_source_tv_public_addr(&self) -> bool {
        self.source_tv_public_addr.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_tv_public_addr(&mut self, v: u32) {
        self.source_tv_public_addr = ::std::option::Option::Some(v);
    }

    // optional uint32 source_tv_private_addr = 3;

    pub fn source_tv_private_addr(&self) -> u32 {
        self.source_tv_private_addr.unwrap_or(0)
    }

    pub fn clear_source_tv_private_addr(&mut self) {
        self.source_tv_private_addr = ::std::option::Option::None;
    }

    pub fn has_source_tv_private_addr(&self) -> bool {
        self.source_tv_private_addr.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_tv_private_addr(&mut self, v: u32) {
        self.source_tv_private_addr = ::std::option::Option::Some(v);
    }

    // optional uint32 source_tv_port = 4;

    pub fn source_tv_port(&self) -> u32 {
        self.source_tv_port.unwrap_or(0)
    }

    pub fn clear_source_tv_port(&mut self) {
        self.source_tv_port = ::std::option::Option::None;
    }

    pub fn has_source_tv_port(&self) -> bool {
        self.source_tv_port.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_tv_port(&mut self, v: u32) {
        self.source_tv_port = ::std::option::Option::Some(v);
    }

    // optional fixed64 game_server_steamid = 5;

    pub fn game_server_steamid(&self) -> u64 {
        self.game_server_steamid.unwrap_or(0)
    }

    pub fn clear_game_server_steamid(&mut self) {
        self.game_server_steamid = ::std::option::Option::None;
    }

    pub fn has_game_server_steamid(&self) -> bool {
        self.game_server_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_server_steamid(&mut self, v: u64) {
        self.game_server_steamid = ::std::option::Option::Some(v);
    }

    // optional fixed64 watch_server_steamid = 6;

    pub fn watch_server_steamid(&self) -> u64 {
        self.watch_server_steamid.unwrap_or(0)
    }

    pub fn clear_watch_server_steamid(&mut self) {
        self.watch_server_steamid = ::std::option::Option::None;
    }

    pub fn has_watch_server_steamid(&self) -> bool {
        self.watch_server_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_watch_server_steamid(&mut self, v: u64) {
        self.watch_server_steamid = ::std::option::Option::Some(v);
    }

    // optional fixed64 watch_tv_unique_secret_code = 7;

    pub fn watch_tv_unique_secret_code(&self) -> u64 {
        self.watch_tv_unique_secret_code.unwrap_or(0)
    }

    pub fn clear_watch_tv_unique_secret_code(&mut self) {
        self.watch_tv_unique_secret_code = ::std::option::Option::None;
    }

    pub fn has_watch_tv_unique_secret_code(&self) -> bool {
        self.watch_tv_unique_secret_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_watch_tv_unique_secret_code(&mut self, v: u64) {
        self.watch_tv_unique_secret_code = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgWatchGameResponse {
    const NAME: &'static str = "CMsgWatchGameResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.watch_game_result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                16 => {
                    self.source_tv_public_addr = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.source_tv_private_addr = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.source_tv_port = ::std::option::Option::Some(is.read_uint32()?);
                },
                41 => {
                    self.game_server_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                49 => {
                    self.watch_server_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                57 => {
                    self.watch_tv_unique_secret_code = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.watch_game_result {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.source_tv_public_addr {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.source_tv_private_addr {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.source_tv_port {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.game_server_steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.watch_server_steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.watch_tv_unique_secret_code {
            my_size += 1 + 8;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.watch_game_result {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.source_tv_public_addr {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.source_tv_private_addr {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.source_tv_port {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.game_server_steamid {
            os.write_fixed64(5, v)?;
        }
        if let Some(v) = self.watch_server_steamid {
            os.write_fixed64(6, v)?;
        }
        if let Some(v) = self.watch_tv_unique_secret_code {
            os.write_fixed64(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgWatchGameResponse {
        CMsgWatchGameResponse::new()
    }

    fn clear(&mut self) {
        self.watch_game_result = ::std::option::Option::None;
        self.source_tv_public_addr = ::std::option::Option::None;
        self.source_tv_private_addr = ::std::option::Option::None;
        self.source_tv_port = ::std::option::Option::None;
        self.game_server_steamid = ::std::option::Option::None;
        self.watch_server_steamid = ::std::option::Option::None;
        self.watch_tv_unique_secret_code = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgWatchGameResponse {
        static instance: CMsgWatchGameResponse = CMsgWatchGameResponse {
            watch_game_result: ::std::option::Option::None,
            source_tv_public_addr: ::std::option::Option::None,
            source_tv_private_addr: ::std::option::Option::None,
            source_tv_port: ::std::option::Option::None,
            game_server_steamid: ::std::option::Option::None,
            watch_server_steamid: ::std::option::Option::None,
            watch_tv_unique_secret_code: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgWatchGameResponse`
pub mod cmsg_watch_game_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgWatchGameResponse.WatchGameResult)
    pub enum WatchGameResult {
        // @@protoc_insertion_point(enum_value:CMsgWatchGameResponse.WatchGameResult.PENDING)
        PENDING = 0,
        // @@protoc_insertion_point(enum_value:CMsgWatchGameResponse.WatchGameResult.READY)
        READY = 1,
        // @@protoc_insertion_point(enum_value:CMsgWatchGameResponse.WatchGameResult.GAMESERVERNOTFOUND)
        GAMESERVERNOTFOUND = 2,
        // @@protoc_insertion_point(enum_value:CMsgWatchGameResponse.WatchGameResult.UNAVAILABLE)
        UNAVAILABLE = 3,
        // @@protoc_insertion_point(enum_value:CMsgWatchGameResponse.WatchGameResult.CANCELLED)
        CANCELLED = 4,
        // @@protoc_insertion_point(enum_value:CMsgWatchGameResponse.WatchGameResult.INCOMPATIBLEVERSION)
        INCOMPATIBLEVERSION = 5,
        // @@protoc_insertion_point(enum_value:CMsgWatchGameResponse.WatchGameResult.MISSINGLEAGUESUBSCRIPTION)
        MISSINGLEAGUESUBSCRIPTION = 6,
        // @@protoc_insertion_point(enum_value:CMsgWatchGameResponse.WatchGameResult.LOBBYNOTFOUND)
        LOBBYNOTFOUND = 7,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for WatchGameResult {
        const NAME: &'static str = "WatchGameResult";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<WatchGameResult> {
            match value {
                0 => ::std::option::Option::Some(WatchGameResult::PENDING),
                1 => ::std::option::Option::Some(WatchGameResult::READY),
                2 => ::std::option::Option::Some(WatchGameResult::GAMESERVERNOTFOUND),
                3 => ::std::option::Option::Some(WatchGameResult::UNAVAILABLE),
                4 => ::std::option::Option::Some(WatchGameResult::CANCELLED),
                5 => ::std::option::Option::Some(WatchGameResult::INCOMPATIBLEVERSION),
                6 => ::std::option::Option::Some(WatchGameResult::MISSINGLEAGUESUBSCRIPTION),
                7 => ::std::option::Option::Some(WatchGameResult::LOBBYNOTFOUND),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<WatchGameResult> {
            match str {
                "PENDING" => ::std::option::Option::Some(WatchGameResult::PENDING),
                "READY" => ::std::option::Option::Some(WatchGameResult::READY),
                "GAMESERVERNOTFOUND" => ::std::option::Option::Some(WatchGameResult::GAMESERVERNOTFOUND),
                "UNAVAILABLE" => ::std::option::Option::Some(WatchGameResult::UNAVAILABLE),
                "CANCELLED" => ::std::option::Option::Some(WatchGameResult::CANCELLED),
                "INCOMPATIBLEVERSION" => ::std::option::Option::Some(WatchGameResult::INCOMPATIBLEVERSION),
                "MISSINGLEAGUESUBSCRIPTION" => ::std::option::Option::Some(WatchGameResult::MISSINGLEAGUESUBSCRIPTION),
                "LOBBYNOTFOUND" => ::std::option::Option::Some(WatchGameResult::LOBBYNOTFOUND),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [WatchGameResult] = &[
            WatchGameResult::PENDING,
            WatchGameResult::READY,
            WatchGameResult::GAMESERVERNOTFOUND,
            WatchGameResult::UNAVAILABLE,
            WatchGameResult::CANCELLED,
            WatchGameResult::INCOMPATIBLEVERSION,
            WatchGameResult::MISSINGLEAGUESUBSCRIPTION,
            WatchGameResult::LOBBYNOTFOUND,
        ];
    }

    impl ::std::default::Default for WatchGameResult {
        fn default() -> Self {
            WatchGameResult::PENDING
        }
    }

}

// @@protoc_insertion_point(message:CMsgPartyLeaderWatchGamePrompt)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgPartyLeaderWatchGamePrompt {
    // message fields
    // @@protoc_insertion_point(field:CMsgPartyLeaderWatchGamePrompt.game_server_steamid)
    pub game_server_steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgPartyLeaderWatchGamePrompt.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgPartyLeaderWatchGamePrompt {
    fn default() -> &'a CMsgPartyLeaderWatchGamePrompt {
        <CMsgPartyLeaderWatchGamePrompt as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgPartyLeaderWatchGamePrompt {
    pub fn new() -> CMsgPartyLeaderWatchGamePrompt {
        ::std::default::Default::default()
    }

    // optional fixed64 game_server_steamid = 5;

    pub fn game_server_steamid(&self) -> u64 {
        self.game_server_steamid.unwrap_or(0)
    }

    pub fn clear_game_server_steamid(&mut self) {
        self.game_server_steamid = ::std::option::Option::None;
    }

    pub fn has_game_server_steamid(&self) -> bool {
        self.game_server_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_server_steamid(&mut self, v: u64) {
        self.game_server_steamid = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgPartyLeaderWatchGamePrompt {
    const NAME: &'static str = "CMsgPartyLeaderWatchGamePrompt";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                41 => {
                    self.game_server_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.game_server_steamid {
            my_size += 1 + 8;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.game_server_steamid {
            os.write_fixed64(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgPartyLeaderWatchGamePrompt {
        CMsgPartyLeaderWatchGamePrompt::new()
    }

    fn clear(&mut self) {
        self.game_server_steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgPartyLeaderWatchGamePrompt {
        static instance: CMsgPartyLeaderWatchGamePrompt = CMsgPartyLeaderWatchGamePrompt {
            game_server_steamid: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CDOTABroadcasterInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDOTABroadcasterInfo {
    // message fields
    // @@protoc_insertion_point(field:CDOTABroadcasterInfo.account_id)
    pub account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CDOTABroadcasterInfo.server_steam_id)
    pub server_steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CDOTABroadcasterInfo.live)
    pub live: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CDOTABroadcasterInfo.team_name_radiant)
    pub team_name_radiant: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CDOTABroadcasterInfo.team_name_dire)
    pub team_name_dire: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CDOTABroadcasterInfo.series_game)
    pub series_game: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CDOTABroadcasterInfo.upcoming_broadcast_timestamp)
    pub upcoming_broadcast_timestamp: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CDOTABroadcasterInfo.allow_live_video)
    pub allow_live_video: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CDOTABroadcasterInfo.node_type)
    pub node_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CDOTABroadcasterInfo.node_name)
    pub node_name: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CDOTABroadcasterInfo.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDOTABroadcasterInfo {
    fn default() -> &'a CDOTABroadcasterInfo {
        <CDOTABroadcasterInfo as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CDOTABroadcasterInfo {
    pub fn new() -> CDOTABroadcasterInfo {
        ::std::default::Default::default()
    }

    // optional uint32 account_id = 1;

    pub fn account_id(&self) -> u32 {
        self.account_id.unwrap_or(0)
    }

    pub fn clear_account_id(&mut self) {
        self.account_id = ::std::option::Option::None;
    }

    pub fn has_account_id(&self) -> bool {
        self.account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: u32) {
        self.account_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 server_steam_id = 2;

    pub fn server_steam_id(&self) -> u64 {
        self.server_steam_id.unwrap_or(0)
    }

    pub fn clear_server_steam_id(&mut self) {
        self.server_steam_id = ::std::option::Option::None;
    }

    pub fn has_server_steam_id(&self) -> bool {
        self.server_steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_steam_id(&mut self, v: u64) {
        self.server_steam_id = ::std::option::Option::Some(v);
    }

    // optional bool live = 3;

    pub fn live(&self) -> bool {
        self.live.unwrap_or(false)
    }

    pub fn clear_live(&mut self) {
        self.live = ::std::option::Option::None;
    }

    pub fn has_live(&self) -> bool {
        self.live.is_some()
    }

    // Param is passed by value, moved
    pub fn set_live(&mut self, v: bool) {
        self.live = ::std::option::Option::Some(v);
    }

    // optional string team_name_radiant = 4;

    pub fn team_name_radiant(&self) -> &str {
        match self.team_name_radiant.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_team_name_radiant(&mut self) {
        self.team_name_radiant = ::std::option::Option::None;
    }

    pub fn has_team_name_radiant(&self) -> bool {
        self.team_name_radiant.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_name_radiant(&mut self, v: ::std::string::String) {
        self.team_name_radiant = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_team_name_radiant(&mut self) -> &mut ::std::string::String {
        if self.team_name_radiant.is_none() {
            self.team_name_radiant = ::std::option::Option::Some(::std::string::String::new());
        }
        self.team_name_radiant.as_mut().unwrap()
    }

    // Take field
    pub fn take_team_name_radiant(&mut self) -> ::std::string::String {
        self.team_name_radiant.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string team_name_dire = 5;

    pub fn team_name_dire(&self) -> &str {
        match self.team_name_dire.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_team_name_dire(&mut self) {
        self.team_name_dire = ::std::option::Option::None;
    }

    pub fn has_team_name_dire(&self) -> bool {
        self.team_name_dire.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_name_dire(&mut self, v: ::std::string::String) {
        self.team_name_dire = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_team_name_dire(&mut self) -> &mut ::std::string::String {
        if self.team_name_dire.is_none() {
            self.team_name_dire = ::std::option::Option::Some(::std::string::String::new());
        }
        self.team_name_dire.as_mut().unwrap()
    }

    // Take field
    pub fn take_team_name_dire(&mut self) -> ::std::string::String {
        self.team_name_dire.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 series_game = 7;

    pub fn series_game(&self) -> u32 {
        self.series_game.unwrap_or(0)
    }

    pub fn clear_series_game(&mut self) {
        self.series_game = ::std::option::Option::None;
    }

    pub fn has_series_game(&self) -> bool {
        self.series_game.is_some()
    }

    // Param is passed by value, moved
    pub fn set_series_game(&mut self, v: u32) {
        self.series_game = ::std::option::Option::Some(v);
    }

    // optional uint32 upcoming_broadcast_timestamp = 9;

    pub fn upcoming_broadcast_timestamp(&self) -> u32 {
        self.upcoming_broadcast_timestamp.unwrap_or(0)
    }

    pub fn clear_upcoming_broadcast_timestamp(&mut self) {
        self.upcoming_broadcast_timestamp = ::std::option::Option::None;
    }

    pub fn has_upcoming_broadcast_timestamp(&self) -> bool {
        self.upcoming_broadcast_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upcoming_broadcast_timestamp(&mut self, v: u32) {
        self.upcoming_broadcast_timestamp = ::std::option::Option::Some(v);
    }

    // optional bool allow_live_video = 10;

    pub fn allow_live_video(&self) -> bool {
        self.allow_live_video.unwrap_or(false)
    }

    pub fn clear_allow_live_video(&mut self) {
        self.allow_live_video = ::std::option::Option::None;
    }

    pub fn has_allow_live_video(&self) -> bool {
        self.allow_live_video.is_some()
    }

    // Param is passed by value, moved
    pub fn set_allow_live_video(&mut self, v: bool) {
        self.allow_live_video = ::std::option::Option::Some(v);
    }

    // optional uint32 node_type = 11;

    pub fn node_type(&self) -> u32 {
        self.node_type.unwrap_or(0)
    }

    pub fn clear_node_type(&mut self) {
        self.node_type = ::std::option::Option::None;
    }

    pub fn has_node_type(&self) -> bool {
        self.node_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_node_type(&mut self, v: u32) {
        self.node_type = ::std::option::Option::Some(v);
    }

    // optional string node_name = 12;

    pub fn node_name(&self) -> &str {
        match self.node_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_node_name(&mut self) {
        self.node_name = ::std::option::Option::None;
    }

    pub fn has_node_name(&self) -> bool {
        self.node_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_node_name(&mut self, v: ::std::string::String) {
        self.node_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node_name(&mut self) -> &mut ::std::string::String {
        if self.node_name.is_none() {
            self.node_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.node_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_node_name(&mut self) -> ::std::string::String {
        self.node_name.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CDOTABroadcasterInfo {
    const NAME: &'static str = "CDOTABroadcasterInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                17 => {
                    self.server_steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                24 => {
                    self.live = ::std::option::Option::Some(is.read_bool()?);
                },
                34 => {
                    self.team_name_radiant = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.team_name_dire = ::std::option::Option::Some(is.read_string()?);
                },
                56 => {
                    self.series_game = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.upcoming_broadcast_timestamp = ::std::option::Option::Some(is.read_uint32()?);
                },
                80 => {
                    self.allow_live_video = ::std::option::Option::Some(is.read_bool()?);
                },
                88 => {
                    self.node_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                98 => {
                    self.node_name = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.server_steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.live {
            my_size += 1 + 1;
        }
        if let Some(v) = self.team_name_radiant.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.team_name_dire.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.series_game {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(7, v);
        }
        if let Some(v) = self.upcoming_broadcast_timestamp {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(9, v);
        }
        if let Some(v) = self.allow_live_video {
            my_size += 1 + 1;
        }
        if let Some(v) = self.node_type {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(11, v);
        }
        if let Some(v) = self.node_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(12, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.account_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.server_steam_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.live {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.team_name_radiant.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.team_name_dire.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.series_game {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.upcoming_broadcast_timestamp {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.allow_live_video {
            os.write_bool(10, v)?;
        }
        if let Some(v) = self.node_type {
            os.write_uint32(11, v)?;
        }
        if let Some(v) = self.node_name.as_ref() {
            os.write_string(12, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDOTABroadcasterInfo {
        CDOTABroadcasterInfo::new()
    }

    fn clear(&mut self) {
        self.account_id = ::std::option::Option::None;
        self.server_steam_id = ::std::option::Option::None;
        self.live = ::std::option::Option::None;
        self.team_name_radiant = ::std::option::Option::None;
        self.team_name_dire = ::std::option::Option::None;
        self.series_game = ::std::option::Option::None;
        self.upcoming_broadcast_timestamp = ::std::option::Option::None;
        self.allow_live_video = ::std::option::Option::None;
        self.node_type = ::std::option::Option::None;
        self.node_name = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDOTABroadcasterInfo {
        static instance: CDOTABroadcasterInfo = CDOTABroadcasterInfo {
            account_id: ::std::option::Option::None,
            server_steam_id: ::std::option::Option::None,
            live: ::std::option::Option::None,
            team_name_radiant: ::std::option::Option::None,
            team_name_dire: ::std::option::Option::None,
            series_game: ::std::option::Option::None,
            upcoming_broadcast_timestamp: ::std::option::Option::None,
            allow_live_video: ::std::option::Option::None,
            node_type: ::std::option::Option::None,
            node_name: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTASeries)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTASeries {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTASeries.series_id)
    pub series_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTASeries.series_type)
    pub series_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTASeries.team_1)
    pub team_1: ::steam_vent_proto_common::protobuf::MessageField<cmsg_dotaseries::TeamInfo>,
    // @@protoc_insertion_point(field:CMsgDOTASeries.team_2)
    pub team_2: ::steam_vent_proto_common::protobuf::MessageField<cmsg_dotaseries::TeamInfo>,
    // @@protoc_insertion_point(field:CMsgDOTASeries.match_minimal)
    pub match_minimal: ::std::vec::Vec<super::dota_gcmessages_common::CMsgDOTAMatchMinimal>,
    // @@protoc_insertion_point(field:CMsgDOTASeries.live_game)
    pub live_game: ::steam_vent_proto_common::protobuf::MessageField<cmsg_dotaseries::LiveGame>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTASeries.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTASeries {
    fn default() -> &'a CMsgDOTASeries {
        <CMsgDOTASeries as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTASeries {
    pub fn new() -> CMsgDOTASeries {
        ::std::default::Default::default()
    }

    // optional uint32 series_id = 1;

    pub fn series_id(&self) -> u32 {
        self.series_id.unwrap_or(0)
    }

    pub fn clear_series_id(&mut self) {
        self.series_id = ::std::option::Option::None;
    }

    pub fn has_series_id(&self) -> bool {
        self.series_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_series_id(&mut self, v: u32) {
        self.series_id = ::std::option::Option::Some(v);
    }

    // optional uint32 series_type = 2;

    pub fn series_type(&self) -> u32 {
        self.series_type.unwrap_or(0)
    }

    pub fn clear_series_type(&mut self) {
        self.series_type = ::std::option::Option::None;
    }

    pub fn has_series_type(&self) -> bool {
        self.series_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_series_type(&mut self, v: u32) {
        self.series_type = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTASeries {
    const NAME: &'static str = "CMsgDOTASeries";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.series_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.series_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.team_1)?;
                },
                34 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.team_2)?;
                },
                42 => {
                    self.match_minimal.push(is.read_message()?);
                },
                50 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.live_game)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.series_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.series_type {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.team_1.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.team_2.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.match_minimal {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.live_game.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.series_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.series_type {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.team_1.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.team_2.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        for v in &self.match_minimal {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if let Some(v) = self.live_game.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTASeries {
        CMsgDOTASeries::new()
    }

    fn clear(&mut self) {
        self.series_id = ::std::option::Option::None;
        self.series_type = ::std::option::Option::None;
        self.team_1.clear();
        self.team_2.clear();
        self.match_minimal.clear();
        self.live_game.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTASeries {
        static instance: CMsgDOTASeries = CMsgDOTASeries {
            series_id: ::std::option::Option::None,
            series_type: ::std::option::Option::None,
            team_1: ::steam_vent_proto_common::protobuf::MessageField::none(),
            team_2: ::steam_vent_proto_common::protobuf::MessageField::none(),
            match_minimal: ::std::vec::Vec::new(),
            live_game: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgDOTASeries`
pub mod cmsg_dotaseries {
    // @@protoc_insertion_point(message:CMsgDOTASeries.TeamInfo)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct TeamInfo {
        // message fields
        // @@protoc_insertion_point(field:CMsgDOTASeries.TeamInfo.team_id)
        pub team_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTASeries.TeamInfo.team_name)
        pub team_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgDOTASeries.TeamInfo.team_logo_url)
        pub team_logo_url: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgDOTASeries.TeamInfo.wager_count)
        pub wager_count: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDOTASeries.TeamInfo.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a TeamInfo {
        fn default() -> &'a TeamInfo {
            <TeamInfo as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl TeamInfo {
        pub fn new() -> TeamInfo {
            ::std::default::Default::default()
        }

        // optional uint32 team_id = 1;

        pub fn team_id(&self) -> u32 {
            self.team_id.unwrap_or(0)
        }

        pub fn clear_team_id(&mut self) {
            self.team_id = ::std::option::Option::None;
        }

        pub fn has_team_id(&self) -> bool {
            self.team_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_id(&mut self, v: u32) {
            self.team_id = ::std::option::Option::Some(v);
        }

        // optional string team_name = 2;

        pub fn team_name(&self) -> &str {
            match self.team_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_team_name(&mut self) {
            self.team_name = ::std::option::Option::None;
        }

        pub fn has_team_name(&self) -> bool {
            self.team_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_name(&mut self, v: ::std::string::String) {
            self.team_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_team_name(&mut self) -> &mut ::std::string::String {
            if self.team_name.is_none() {
                self.team_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.team_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_team_name(&mut self) -> ::std::string::String {
            self.team_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string team_logo_url = 3;

        pub fn team_logo_url(&self) -> &str {
            match self.team_logo_url.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_team_logo_url(&mut self) {
            self.team_logo_url = ::std::option::Option::None;
        }

        pub fn has_team_logo_url(&self) -> bool {
            self.team_logo_url.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_logo_url(&mut self, v: ::std::string::String) {
            self.team_logo_url = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_team_logo_url(&mut self) -> &mut ::std::string::String {
            if self.team_logo_url.is_none() {
                self.team_logo_url = ::std::option::Option::Some(::std::string::String::new());
            }
            self.team_logo_url.as_mut().unwrap()
        }

        // Take field
        pub fn take_team_logo_url(&mut self) -> ::std::string::String {
            self.team_logo_url.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional uint32 wager_count = 4;

        pub fn wager_count(&self) -> u32 {
            self.wager_count.unwrap_or(0)
        }

        pub fn clear_wager_count(&mut self) {
            self.wager_count = ::std::option::Option::None;
        }

        pub fn has_wager_count(&self) -> bool {
            self.wager_count.is_some()
        }

        // Param is passed by value, moved
        pub fn set_wager_count(&mut self, v: u32) {
            self.wager_count = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for TeamInfo {
        const NAME: &'static str = "TeamInfo";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.team_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        self.team_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    26 => {
                        self.team_logo_url = ::std::option::Option::Some(is.read_string()?);
                    },
                    32 => {
                        self.wager_count = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.team_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.team_name.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
            }
            if let Some(v) = self.team_logo_url.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(3, &v);
            }
            if let Some(v) = self.wager_count {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.team_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.team_name.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.team_logo_url.as_ref() {
                os.write_string(3, v)?;
            }
            if let Some(v) = self.wager_count {
                os.write_uint32(4, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> TeamInfo {
            TeamInfo::new()
        }

        fn clear(&mut self) {
            self.team_id = ::std::option::Option::None;
            self.team_name = ::std::option::Option::None;
            self.team_logo_url = ::std::option::Option::None;
            self.wager_count = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static TeamInfo {
            static instance: TeamInfo = TeamInfo {
                team_id: ::std::option::Option::None,
                team_name: ::std::option::Option::None,
                team_logo_url: ::std::option::Option::None,
                wager_count: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgDOTASeries.LiveGame)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct LiveGame {
        // message fields
        // @@protoc_insertion_point(field:CMsgDOTASeries.LiveGame.server_steam_id)
        pub server_steam_id: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CMsgDOTASeries.LiveGame.team_radiant)
        pub team_radiant: ::steam_vent_proto_common::protobuf::MessageField<TeamInfo>,
        // @@protoc_insertion_point(field:CMsgDOTASeries.LiveGame.team_dire)
        pub team_dire: ::steam_vent_proto_common::protobuf::MessageField<TeamInfo>,
        // @@protoc_insertion_point(field:CMsgDOTASeries.LiveGame.team_radiant_score)
        pub team_radiant_score: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTASeries.LiveGame.team_dire_score)
        pub team_dire_score: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDOTASeries.LiveGame.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a LiveGame {
        fn default() -> &'a LiveGame {
            <LiveGame as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl LiveGame {
        pub fn new() -> LiveGame {
            ::std::default::Default::default()
        }

        // optional fixed64 server_steam_id = 1;

        pub fn server_steam_id(&self) -> u64 {
            self.server_steam_id.unwrap_or(0)
        }

        pub fn clear_server_steam_id(&mut self) {
            self.server_steam_id = ::std::option::Option::None;
        }

        pub fn has_server_steam_id(&self) -> bool {
            self.server_steam_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_server_steam_id(&mut self, v: u64) {
            self.server_steam_id = ::std::option::Option::Some(v);
        }

        // optional uint32 team_radiant_score = 4;

        pub fn team_radiant_score(&self) -> u32 {
            self.team_radiant_score.unwrap_or(0)
        }

        pub fn clear_team_radiant_score(&mut self) {
            self.team_radiant_score = ::std::option::Option::None;
        }

        pub fn has_team_radiant_score(&self) -> bool {
            self.team_radiant_score.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_radiant_score(&mut self, v: u32) {
            self.team_radiant_score = ::std::option::Option::Some(v);
        }

        // optional uint32 team_dire_score = 5;

        pub fn team_dire_score(&self) -> u32 {
            self.team_dire_score.unwrap_or(0)
        }

        pub fn clear_team_dire_score(&mut self) {
            self.team_dire_score = ::std::option::Option::None;
        }

        pub fn has_team_dire_score(&self) -> bool {
            self.team_dire_score.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team_dire_score(&mut self, v: u32) {
            self.team_dire_score = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for LiveGame {
        const NAME: &'static str = "LiveGame";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    9 => {
                        self.server_steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    18 => {
                        ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.team_radiant)?;
                    },
                    26 => {
                        ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.team_dire)?;
                    },
                    32 => {
                        self.team_radiant_score = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    40 => {
                        self.team_dire_score = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.server_steam_id {
                my_size += 1 + 8;
            }
            if let Some(v) = self.team_radiant.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.team_dire.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.team_radiant_score {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
            }
            if let Some(v) = self.team_dire_score {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.server_steam_id {
                os.write_fixed64(1, v)?;
            }
            if let Some(v) = self.team_radiant.as_ref() {
                ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            if let Some(v) = self.team_dire.as_ref() {
                ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
            }
            if let Some(v) = self.team_radiant_score {
                os.write_uint32(4, v)?;
            }
            if let Some(v) = self.team_dire_score {
                os.write_uint32(5, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> LiveGame {
            LiveGame::new()
        }

        fn clear(&mut self) {
            self.server_steam_id = ::std::option::Option::None;
            self.team_radiant.clear();
            self.team_dire.clear();
            self.team_radiant_score = ::std::option::Option::None;
            self.team_dire_score = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static LiveGame {
            static instance: LiveGame = LiveGame {
                server_steam_id: ::std::option::Option::None,
                team_radiant: ::steam_vent_proto_common::protobuf::MessageField::none(),
                team_dire: ::steam_vent_proto_common::protobuf::MessageField::none(),
                team_radiant_score: ::std::option::Option::None,
                team_dire_score: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}


const _VENT_PROTO_VERSION_CHECK: () = ::steam_vent_proto_common::VERSION_0_5_0;

#[allow(unused_imports)]
use crate::dota_gcmessages_common::*;
impl ::steam_vent_proto_common::RpcMessage for CSourceTVGameSmall {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgClientToGCFindTopSourceTVGames {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCFindTopSourceTVGames {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCFindTopSourceTVGames;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgGCToClientFindTopSourceTVGamesResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgGCToClientFindTopSourceTVGamesResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgGCToClientFindTopSourceTVGamesResponse;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCToClientTopWeekendTourneyGames {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgClientToGCTopLeagueMatchesRequest {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCTopLeagueMatchesRequest {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCTopLeagueMatchesRequest;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgClientToGCTopFriendMatchesRequest {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCTopFriendMatchesRequest {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCTopFriendMatchesRequest;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgClientToGCMatchesMinimalRequest {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCMatchesMinimalRequest {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCMatchesMinimalRequest;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgClientToGCMatchesMinimalResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCMatchesMinimalResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCMatchesMinimalResponse;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCToClientTopLeagueMatchesResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgGCToClientTopLeagueMatchesResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgGCToClientTopLeagueMatchesResponse;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCToClientTopFriendMatchesResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgGCToClientTopFriendMatchesResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgGCToClientTopFriendMatchesResponse;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgSpectateFriendGame {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgSpectateFriendGameResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CDOTAReplayDownloadInfo {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgWatchGame {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgCancelWatchGame {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgWatchGameResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgPartyLeaderWatchGamePrompt {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CDOTABroadcasterInfo {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTASeries {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}

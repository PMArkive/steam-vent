// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `dota_gcmessages_client_chat.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::steam_vent_proto_common::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:CMsgClientToGCPrivateChatInvite)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCPrivateChatInvite {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCPrivateChatInvite.private_chat_channel_name)
    pub private_chat_channel_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgClientToGCPrivateChatInvite.invited_account_id)
    pub invited_account_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCPrivateChatInvite.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCPrivateChatInvite {
    fn default() -> &'a CMsgClientToGCPrivateChatInvite {
        <CMsgClientToGCPrivateChatInvite as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCPrivateChatInvite {
    pub fn new() -> CMsgClientToGCPrivateChatInvite {
        ::std::default::Default::default()
    }

    // optional string private_chat_channel_name = 1;

    pub fn private_chat_channel_name(&self) -> &str {
        match self.private_chat_channel_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_private_chat_channel_name(&mut self) {
        self.private_chat_channel_name = ::std::option::Option::None;
    }

    pub fn has_private_chat_channel_name(&self) -> bool {
        self.private_chat_channel_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_private_chat_channel_name(&mut self, v: ::std::string::String) {
        self.private_chat_channel_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_private_chat_channel_name(&mut self) -> &mut ::std::string::String {
        if self.private_chat_channel_name.is_none() {
            self.private_chat_channel_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.private_chat_channel_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_private_chat_channel_name(&mut self) -> ::std::string::String {
        self.private_chat_channel_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 invited_account_id = 2;

    pub fn invited_account_id(&self) -> u32 {
        self.invited_account_id.unwrap_or(0)
    }

    pub fn clear_invited_account_id(&mut self) {
        self.invited_account_id = ::std::option::Option::None;
    }

    pub fn has_invited_account_id(&self) -> bool {
        self.invited_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invited_account_id(&mut self, v: u32) {
        self.invited_account_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCPrivateChatInvite {
    const NAME: &'static str = "CMsgClientToGCPrivateChatInvite";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.private_chat_channel_name = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.invited_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.private_chat_channel_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.invited_account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.private_chat_channel_name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.invited_account_id {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCPrivateChatInvite {
        CMsgClientToGCPrivateChatInvite::new()
    }

    fn clear(&mut self) {
        self.private_chat_channel_name = ::std::option::Option::None;
        self.invited_account_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCPrivateChatInvite {
        static instance: CMsgClientToGCPrivateChatInvite = CMsgClientToGCPrivateChatInvite {
            private_chat_channel_name: ::std::option::Option::None,
            invited_account_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCPrivateChatKick)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCPrivateChatKick {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCPrivateChatKick.private_chat_channel_name)
    pub private_chat_channel_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgClientToGCPrivateChatKick.kick_account_id)
    pub kick_account_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCPrivateChatKick.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCPrivateChatKick {
    fn default() -> &'a CMsgClientToGCPrivateChatKick {
        <CMsgClientToGCPrivateChatKick as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCPrivateChatKick {
    pub fn new() -> CMsgClientToGCPrivateChatKick {
        ::std::default::Default::default()
    }

    // optional string private_chat_channel_name = 1;

    pub fn private_chat_channel_name(&self) -> &str {
        match self.private_chat_channel_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_private_chat_channel_name(&mut self) {
        self.private_chat_channel_name = ::std::option::Option::None;
    }

    pub fn has_private_chat_channel_name(&self) -> bool {
        self.private_chat_channel_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_private_chat_channel_name(&mut self, v: ::std::string::String) {
        self.private_chat_channel_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_private_chat_channel_name(&mut self) -> &mut ::std::string::String {
        if self.private_chat_channel_name.is_none() {
            self.private_chat_channel_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.private_chat_channel_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_private_chat_channel_name(&mut self) -> ::std::string::String {
        self.private_chat_channel_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 kick_account_id = 2;

    pub fn kick_account_id(&self) -> u32 {
        self.kick_account_id.unwrap_or(0)
    }

    pub fn clear_kick_account_id(&mut self) {
        self.kick_account_id = ::std::option::Option::None;
    }

    pub fn has_kick_account_id(&self) -> bool {
        self.kick_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_kick_account_id(&mut self, v: u32) {
        self.kick_account_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCPrivateChatKick {
    const NAME: &'static str = "CMsgClientToGCPrivateChatKick";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.private_chat_channel_name = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.kick_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.private_chat_channel_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.kick_account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.private_chat_channel_name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.kick_account_id {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCPrivateChatKick {
        CMsgClientToGCPrivateChatKick::new()
    }

    fn clear(&mut self) {
        self.private_chat_channel_name = ::std::option::Option::None;
        self.kick_account_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCPrivateChatKick {
        static instance: CMsgClientToGCPrivateChatKick = CMsgClientToGCPrivateChatKick {
            private_chat_channel_name: ::std::option::Option::None,
            kick_account_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCPrivateChatPromote)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCPrivateChatPromote {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCPrivateChatPromote.private_chat_channel_name)
    pub private_chat_channel_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgClientToGCPrivateChatPromote.promote_account_id)
    pub promote_account_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCPrivateChatPromote.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCPrivateChatPromote {
    fn default() -> &'a CMsgClientToGCPrivateChatPromote {
        <CMsgClientToGCPrivateChatPromote as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCPrivateChatPromote {
    pub fn new() -> CMsgClientToGCPrivateChatPromote {
        ::std::default::Default::default()
    }

    // optional string private_chat_channel_name = 1;

    pub fn private_chat_channel_name(&self) -> &str {
        match self.private_chat_channel_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_private_chat_channel_name(&mut self) {
        self.private_chat_channel_name = ::std::option::Option::None;
    }

    pub fn has_private_chat_channel_name(&self) -> bool {
        self.private_chat_channel_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_private_chat_channel_name(&mut self, v: ::std::string::String) {
        self.private_chat_channel_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_private_chat_channel_name(&mut self) -> &mut ::std::string::String {
        if self.private_chat_channel_name.is_none() {
            self.private_chat_channel_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.private_chat_channel_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_private_chat_channel_name(&mut self) -> ::std::string::String {
        self.private_chat_channel_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 promote_account_id = 2;

    pub fn promote_account_id(&self) -> u32 {
        self.promote_account_id.unwrap_or(0)
    }

    pub fn clear_promote_account_id(&mut self) {
        self.promote_account_id = ::std::option::Option::None;
    }

    pub fn has_promote_account_id(&self) -> bool {
        self.promote_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_promote_account_id(&mut self, v: u32) {
        self.promote_account_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCPrivateChatPromote {
    const NAME: &'static str = "CMsgClientToGCPrivateChatPromote";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.private_chat_channel_name = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.promote_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.private_chat_channel_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.promote_account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.private_chat_channel_name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.promote_account_id {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCPrivateChatPromote {
        CMsgClientToGCPrivateChatPromote::new()
    }

    fn clear(&mut self) {
        self.private_chat_channel_name = ::std::option::Option::None;
        self.promote_account_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCPrivateChatPromote {
        static instance: CMsgClientToGCPrivateChatPromote = CMsgClientToGCPrivateChatPromote {
            private_chat_channel_name: ::std::option::Option::None,
            promote_account_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCPrivateChatDemote)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCPrivateChatDemote {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCPrivateChatDemote.private_chat_channel_name)
    pub private_chat_channel_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgClientToGCPrivateChatDemote.demote_account_id)
    pub demote_account_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCPrivateChatDemote.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCPrivateChatDemote {
    fn default() -> &'a CMsgClientToGCPrivateChatDemote {
        <CMsgClientToGCPrivateChatDemote as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCPrivateChatDemote {
    pub fn new() -> CMsgClientToGCPrivateChatDemote {
        ::std::default::Default::default()
    }

    // optional string private_chat_channel_name = 1;

    pub fn private_chat_channel_name(&self) -> &str {
        match self.private_chat_channel_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_private_chat_channel_name(&mut self) {
        self.private_chat_channel_name = ::std::option::Option::None;
    }

    pub fn has_private_chat_channel_name(&self) -> bool {
        self.private_chat_channel_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_private_chat_channel_name(&mut self, v: ::std::string::String) {
        self.private_chat_channel_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_private_chat_channel_name(&mut self) -> &mut ::std::string::String {
        if self.private_chat_channel_name.is_none() {
            self.private_chat_channel_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.private_chat_channel_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_private_chat_channel_name(&mut self) -> ::std::string::String {
        self.private_chat_channel_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 demote_account_id = 2;

    pub fn demote_account_id(&self) -> u32 {
        self.demote_account_id.unwrap_or(0)
    }

    pub fn clear_demote_account_id(&mut self) {
        self.demote_account_id = ::std::option::Option::None;
    }

    pub fn has_demote_account_id(&self) -> bool {
        self.demote_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_demote_account_id(&mut self, v: u32) {
        self.demote_account_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCPrivateChatDemote {
    const NAME: &'static str = "CMsgClientToGCPrivateChatDemote";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.private_chat_channel_name = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.demote_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.private_chat_channel_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.demote_account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.private_chat_channel_name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.demote_account_id {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCPrivateChatDemote {
        CMsgClientToGCPrivateChatDemote::new()
    }

    fn clear(&mut self) {
        self.private_chat_channel_name = ::std::option::Option::None;
        self.demote_account_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCPrivateChatDemote {
        static instance: CMsgClientToGCPrivateChatDemote = CMsgClientToGCPrivateChatDemote {
            private_chat_channel_name: ::std::option::Option::None,
            demote_account_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgGCToClientPrivateChatResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCToClientPrivateChatResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCToClientPrivateChatResponse.private_chat_channel_name)
    pub private_chat_channel_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgGCToClientPrivateChatResponse.result)
    pub result: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_gcto_client_private_chat_response::Result>>,
    // @@protoc_insertion_point(field:CMsgGCToClientPrivateChatResponse.username)
    pub username: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCToClientPrivateChatResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCToClientPrivateChatResponse {
    fn default() -> &'a CMsgGCToClientPrivateChatResponse {
        <CMsgGCToClientPrivateChatResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCToClientPrivateChatResponse {
    pub fn new() -> CMsgGCToClientPrivateChatResponse {
        ::std::default::Default::default()
    }

    // optional string private_chat_channel_name = 1;

    pub fn private_chat_channel_name(&self) -> &str {
        match self.private_chat_channel_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_private_chat_channel_name(&mut self) {
        self.private_chat_channel_name = ::std::option::Option::None;
    }

    pub fn has_private_chat_channel_name(&self) -> bool {
        self.private_chat_channel_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_private_chat_channel_name(&mut self, v: ::std::string::String) {
        self.private_chat_channel_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_private_chat_channel_name(&mut self) -> &mut ::std::string::String {
        if self.private_chat_channel_name.is_none() {
            self.private_chat_channel_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.private_chat_channel_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_private_chat_channel_name(&mut self) -> ::std::string::String {
        self.private_chat_channel_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .CMsgGCToClientPrivateChatResponse.Result result = 2;

    pub fn result(&self) -> cmsg_gcto_client_private_chat_response::Result {
        match self.result {
            Some(e) => e.enum_value_or(cmsg_gcto_client_private_chat_response::Result::SUCCESS),
            None => cmsg_gcto_client_private_chat_response::Result::SUCCESS,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: cmsg_gcto_client_private_chat_response::Result) {
        self.result = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional string username = 3;

    pub fn username(&self) -> &str {
        match self.username.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_username(&mut self) {
        self.username = ::std::option::Option::None;
    }

    pub fn has_username(&self) -> bool {
        self.username.is_some()
    }

    // Param is passed by value, moved
    pub fn set_username(&mut self, v: ::std::string::String) {
        self.username = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_username(&mut self) -> &mut ::std::string::String {
        if self.username.is_none() {
            self.username = ::std::option::Option::Some(::std::string::String::new());
        }
        self.username.as_mut().unwrap()
    }

    // Take field
    pub fn take_username(&mut self) -> ::std::string::String {
        self.username.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCToClientPrivateChatResponse {
    const NAME: &'static str = "CMsgGCToClientPrivateChatResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.private_chat_channel_name = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                26 => {
                    self.username = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.private_chat_channel_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.result {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(2, v.value());
        }
        if let Some(v) = self.username.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(3, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.private_chat_channel_name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.result {
            os.write_enum(2, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.username.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCToClientPrivateChatResponse {
        CMsgGCToClientPrivateChatResponse::new()
    }

    fn clear(&mut self) {
        self.private_chat_channel_name = ::std::option::Option::None;
        self.result = ::std::option::Option::None;
        self.username = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCToClientPrivateChatResponse {
        static instance: CMsgGCToClientPrivateChatResponse = CMsgGCToClientPrivateChatResponse {
            private_chat_channel_name: ::std::option::Option::None,
            result: ::std::option::Option::None,
            username: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgGCToClientPrivateChatResponse`
pub mod cmsg_gcto_client_private_chat_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgGCToClientPrivateChatResponse.Result)
    pub enum Result {
        // @@protoc_insertion_point(enum_value:CMsgGCToClientPrivateChatResponse.Result.SUCCESS)
        SUCCESS = 0,
        // @@protoc_insertion_point(enum_value:CMsgGCToClientPrivateChatResponse.Result.FAILURE_CREATION_LOCK)
        FAILURE_CREATION_LOCK = 1,
        // @@protoc_insertion_point(enum_value:CMsgGCToClientPrivateChatResponse.Result.FAILURE_SQL_TRANSACTION)
        FAILURE_SQL_TRANSACTION = 2,
        // @@protoc_insertion_point(enum_value:CMsgGCToClientPrivateChatResponse.Result.FAILURE_SDO_LOAD)
        FAILURE_SDO_LOAD = 3,
        // @@protoc_insertion_point(enum_value:CMsgGCToClientPrivateChatResponse.Result.FAILURE_NO_PERMISSION)
        FAILURE_NO_PERMISSION = 4,
        // @@protoc_insertion_point(enum_value:CMsgGCToClientPrivateChatResponse.Result.FAILURE_ALREADY_MEMBER)
        FAILURE_ALREADY_MEMBER = 5,
        // @@protoc_insertion_point(enum_value:CMsgGCToClientPrivateChatResponse.Result.FAILURE_NOT_A_MEMBER)
        FAILURE_NOT_A_MEMBER = 7,
        // @@protoc_insertion_point(enum_value:CMsgGCToClientPrivateChatResponse.Result.FAILURE_NO_REMAINING_ADMINS)
        FAILURE_NO_REMAINING_ADMINS = 8,
        // @@protoc_insertion_point(enum_value:CMsgGCToClientPrivateChatResponse.Result.FAILURE_NO_ROOM)
        FAILURE_NO_ROOM = 9,
        // @@protoc_insertion_point(enum_value:CMsgGCToClientPrivateChatResponse.Result.FAILURE_CREATION_RATE_LIMITED)
        FAILURE_CREATION_RATE_LIMITED = 10,
        // @@protoc_insertion_point(enum_value:CMsgGCToClientPrivateChatResponse.Result.FAILURE_UNKNOWN_CHANNEL_NAME)
        FAILURE_UNKNOWN_CHANNEL_NAME = 11,
        // @@protoc_insertion_point(enum_value:CMsgGCToClientPrivateChatResponse.Result.FAILURE_UNKNOWN_USER)
        FAILURE_UNKNOWN_USER = 12,
        // @@protoc_insertion_point(enum_value:CMsgGCToClientPrivateChatResponse.Result.FAILURE_UNKNOWN_ERROR)
        FAILURE_UNKNOWN_ERROR = 13,
        // @@protoc_insertion_point(enum_value:CMsgGCToClientPrivateChatResponse.Result.FAILURE_CANNOT_KICK_ADMIN)
        FAILURE_CANNOT_KICK_ADMIN = 14,
        // @@protoc_insertion_point(enum_value:CMsgGCToClientPrivateChatResponse.Result.FAILURE_ALREADY_ADMIN)
        FAILURE_ALREADY_ADMIN = 15,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for Result {
        const NAME: &'static str = "Result";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Result> {
            match value {
                0 => ::std::option::Option::Some(Result::SUCCESS),
                1 => ::std::option::Option::Some(Result::FAILURE_CREATION_LOCK),
                2 => ::std::option::Option::Some(Result::FAILURE_SQL_TRANSACTION),
                3 => ::std::option::Option::Some(Result::FAILURE_SDO_LOAD),
                4 => ::std::option::Option::Some(Result::FAILURE_NO_PERMISSION),
                5 => ::std::option::Option::Some(Result::FAILURE_ALREADY_MEMBER),
                7 => ::std::option::Option::Some(Result::FAILURE_NOT_A_MEMBER),
                8 => ::std::option::Option::Some(Result::FAILURE_NO_REMAINING_ADMINS),
                9 => ::std::option::Option::Some(Result::FAILURE_NO_ROOM),
                10 => ::std::option::Option::Some(Result::FAILURE_CREATION_RATE_LIMITED),
                11 => ::std::option::Option::Some(Result::FAILURE_UNKNOWN_CHANNEL_NAME),
                12 => ::std::option::Option::Some(Result::FAILURE_UNKNOWN_USER),
                13 => ::std::option::Option::Some(Result::FAILURE_UNKNOWN_ERROR),
                14 => ::std::option::Option::Some(Result::FAILURE_CANNOT_KICK_ADMIN),
                15 => ::std::option::Option::Some(Result::FAILURE_ALREADY_ADMIN),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Result> {
            match str {
                "SUCCESS" => ::std::option::Option::Some(Result::SUCCESS),
                "FAILURE_CREATION_LOCK" => ::std::option::Option::Some(Result::FAILURE_CREATION_LOCK),
                "FAILURE_SQL_TRANSACTION" => ::std::option::Option::Some(Result::FAILURE_SQL_TRANSACTION),
                "FAILURE_SDO_LOAD" => ::std::option::Option::Some(Result::FAILURE_SDO_LOAD),
                "FAILURE_NO_PERMISSION" => ::std::option::Option::Some(Result::FAILURE_NO_PERMISSION),
                "FAILURE_ALREADY_MEMBER" => ::std::option::Option::Some(Result::FAILURE_ALREADY_MEMBER),
                "FAILURE_NOT_A_MEMBER" => ::std::option::Option::Some(Result::FAILURE_NOT_A_MEMBER),
                "FAILURE_NO_REMAINING_ADMINS" => ::std::option::Option::Some(Result::FAILURE_NO_REMAINING_ADMINS),
                "FAILURE_NO_ROOM" => ::std::option::Option::Some(Result::FAILURE_NO_ROOM),
                "FAILURE_CREATION_RATE_LIMITED" => ::std::option::Option::Some(Result::FAILURE_CREATION_RATE_LIMITED),
                "FAILURE_UNKNOWN_CHANNEL_NAME" => ::std::option::Option::Some(Result::FAILURE_UNKNOWN_CHANNEL_NAME),
                "FAILURE_UNKNOWN_USER" => ::std::option::Option::Some(Result::FAILURE_UNKNOWN_USER),
                "FAILURE_UNKNOWN_ERROR" => ::std::option::Option::Some(Result::FAILURE_UNKNOWN_ERROR),
                "FAILURE_CANNOT_KICK_ADMIN" => ::std::option::Option::Some(Result::FAILURE_CANNOT_KICK_ADMIN),
                "FAILURE_ALREADY_ADMIN" => ::std::option::Option::Some(Result::FAILURE_ALREADY_ADMIN),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Result] = &[
            Result::SUCCESS,
            Result::FAILURE_CREATION_LOCK,
            Result::FAILURE_SQL_TRANSACTION,
            Result::FAILURE_SDO_LOAD,
            Result::FAILURE_NO_PERMISSION,
            Result::FAILURE_ALREADY_MEMBER,
            Result::FAILURE_NOT_A_MEMBER,
            Result::FAILURE_NO_REMAINING_ADMINS,
            Result::FAILURE_NO_ROOM,
            Result::FAILURE_CREATION_RATE_LIMITED,
            Result::FAILURE_UNKNOWN_CHANNEL_NAME,
            Result::FAILURE_UNKNOWN_USER,
            Result::FAILURE_UNKNOWN_ERROR,
            Result::FAILURE_CANNOT_KICK_ADMIN,
            Result::FAILURE_ALREADY_ADMIN,
        ];
    }

    impl ::std::default::Default for Result {
        fn default() -> Self {
            Result::SUCCESS
        }
    }

}

// @@protoc_insertion_point(message:CMsgDOTAJoinChatChannel)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAJoinChatChannel {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTAJoinChatChannel.channel_name)
    pub channel_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTAJoinChatChannel.channel_type)
    pub channel_type: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<super::dota_shared_enums::DOTAChatChannelType_t>>,
    // @@protoc_insertion_point(field:CMsgDOTAJoinChatChannel.silent_rejection)
    pub silent_rejection: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTAJoinChatChannel.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAJoinChatChannel {
    fn default() -> &'a CMsgDOTAJoinChatChannel {
        <CMsgDOTAJoinChatChannel as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAJoinChatChannel {
    pub fn new() -> CMsgDOTAJoinChatChannel {
        ::std::default::Default::default()
    }

    // optional string channel_name = 2;

    pub fn channel_name(&self) -> &str {
        match self.channel_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_channel_name(&mut self) {
        self.channel_name = ::std::option::Option::None;
    }

    pub fn has_channel_name(&self) -> bool {
        self.channel_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_name(&mut self, v: ::std::string::String) {
        self.channel_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_channel_name(&mut self) -> &mut ::std::string::String {
        if self.channel_name.is_none() {
            self.channel_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.channel_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_channel_name(&mut self) -> ::std::string::String {
        self.channel_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .DOTAChatChannelType_t channel_type = 4;

    pub fn channel_type(&self) -> super::dota_shared_enums::DOTAChatChannelType_t {
        match self.channel_type {
            Some(e) => e.enum_value_or(super::dota_shared_enums::DOTAChatChannelType_t::DOTAChannelType_Regional),
            None => super::dota_shared_enums::DOTAChatChannelType_t::DOTAChannelType_Regional,
        }
    }

    pub fn clear_channel_type(&mut self) {
        self.channel_type = ::std::option::Option::None;
    }

    pub fn has_channel_type(&self) -> bool {
        self.channel_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_type(&mut self, v: super::dota_shared_enums::DOTAChatChannelType_t) {
        self.channel_type = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional bool silent_rejection = 5;

    pub fn silent_rejection(&self) -> bool {
        self.silent_rejection.unwrap_or(false)
    }

    pub fn clear_silent_rejection(&mut self) {
        self.silent_rejection = ::std::option::Option::None;
    }

    pub fn has_silent_rejection(&self) -> bool {
        self.silent_rejection.is_some()
    }

    // Param is passed by value, moved
    pub fn set_silent_rejection(&mut self, v: bool) {
        self.silent_rejection = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTAJoinChatChannel {
    const NAME: &'static str = "CMsgDOTAJoinChatChannel";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.channel_name = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.channel_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                40 => {
                    self.silent_rejection = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.channel_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.channel_type {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(4, v.value());
        }
        if let Some(v) = self.silent_rejection {
            my_size += 1 + 1;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.channel_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.channel_type {
            os.write_enum(4, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.silent_rejection {
            os.write_bool(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAJoinChatChannel {
        CMsgDOTAJoinChatChannel::new()
    }

    fn clear(&mut self) {
        self.channel_name = ::std::option::Option::None;
        self.channel_type = ::std::option::Option::None;
        self.silent_rejection = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAJoinChatChannel {
        static instance: CMsgDOTAJoinChatChannel = CMsgDOTAJoinChatChannel {
            channel_name: ::std::option::Option::None,
            channel_type: ::std::option::Option::None,
            silent_rejection: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTALeaveChatChannel)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTALeaveChatChannel {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTALeaveChatChannel.channel_id)
    pub channel_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTALeaveChatChannel.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTALeaveChatChannel {
    fn default() -> &'a CMsgDOTALeaveChatChannel {
        <CMsgDOTALeaveChatChannel as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTALeaveChatChannel {
    pub fn new() -> CMsgDOTALeaveChatChannel {
        ::std::default::Default::default()
    }

    // optional uint64 channel_id = 1;

    pub fn channel_id(&self) -> u64 {
        self.channel_id.unwrap_or(0)
    }

    pub fn clear_channel_id(&mut self) {
        self.channel_id = ::std::option::Option::None;
    }

    pub fn has_channel_id(&self) -> bool {
        self.channel_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_id(&mut self, v: u64) {
        self.channel_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTALeaveChatChannel {
    const NAME: &'static str = "CMsgDOTALeaveChatChannel";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.channel_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.channel_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.channel_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTALeaveChatChannel {
        CMsgDOTALeaveChatChannel::new()
    }

    fn clear(&mut self) {
        self.channel_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTALeaveChatChannel {
        static instance: CMsgDOTALeaveChatChannel = CMsgDOTALeaveChatChannel {
            channel_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgGCChatReportPublicSpam)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCChatReportPublicSpam {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCChatReportPublicSpam.channel_id)
    pub channel_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgGCChatReportPublicSpam.channel_user_id)
    pub channel_user_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCChatReportPublicSpam.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCChatReportPublicSpam {
    fn default() -> &'a CMsgGCChatReportPublicSpam {
        <CMsgGCChatReportPublicSpam as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCChatReportPublicSpam {
    pub fn new() -> CMsgGCChatReportPublicSpam {
        ::std::default::Default::default()
    }

    // optional uint64 channel_id = 1;

    pub fn channel_id(&self) -> u64 {
        self.channel_id.unwrap_or(0)
    }

    pub fn clear_channel_id(&mut self) {
        self.channel_id = ::std::option::Option::None;
    }

    pub fn has_channel_id(&self) -> bool {
        self.channel_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_id(&mut self, v: u64) {
        self.channel_id = ::std::option::Option::Some(v);
    }

    // optional uint32 channel_user_id = 2;

    pub fn channel_user_id(&self) -> u32 {
        self.channel_user_id.unwrap_or(0)
    }

    pub fn clear_channel_user_id(&mut self) {
        self.channel_user_id = ::std::option::Option::None;
    }

    pub fn has_channel_user_id(&self) -> bool {
        self.channel_user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_user_id(&mut self, v: u32) {
        self.channel_user_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCChatReportPublicSpam {
    const NAME: &'static str = "CMsgGCChatReportPublicSpam";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.channel_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.channel_user_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.channel_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.channel_user_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.channel_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.channel_user_id {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCChatReportPublicSpam {
        CMsgGCChatReportPublicSpam::new()
    }

    fn clear(&mut self) {
        self.channel_id = ::std::option::Option::None;
        self.channel_user_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCChatReportPublicSpam {
        static instance: CMsgGCChatReportPublicSpam = CMsgGCChatReportPublicSpam {
            channel_id: ::std::option::Option::None,
            channel_user_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTAChatModeratorBan)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAChatModeratorBan {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTAChatModeratorBan.channel_id)
    pub channel_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgDOTAChatModeratorBan.account_id)
    pub account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAChatModeratorBan.duration)
    pub duration: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTAChatModeratorBan.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAChatModeratorBan {
    fn default() -> &'a CMsgDOTAChatModeratorBan {
        <CMsgDOTAChatModeratorBan as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAChatModeratorBan {
    pub fn new() -> CMsgDOTAChatModeratorBan {
        ::std::default::Default::default()
    }

    // optional uint64 channel_id = 1;

    pub fn channel_id(&self) -> u64 {
        self.channel_id.unwrap_or(0)
    }

    pub fn clear_channel_id(&mut self) {
        self.channel_id = ::std::option::Option::None;
    }

    pub fn has_channel_id(&self) -> bool {
        self.channel_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_id(&mut self, v: u64) {
        self.channel_id = ::std::option::Option::Some(v);
    }

    // optional uint32 account_id = 2;

    pub fn account_id(&self) -> u32 {
        self.account_id.unwrap_or(0)
    }

    pub fn clear_account_id(&mut self) {
        self.account_id = ::std::option::Option::None;
    }

    pub fn has_account_id(&self) -> bool {
        self.account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: u32) {
        self.account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 duration = 3;

    pub fn duration(&self) -> u32 {
        self.duration.unwrap_or(0)
    }

    pub fn clear_duration(&mut self) {
        self.duration = ::std::option::Option::None;
    }

    pub fn has_duration(&self) -> bool {
        self.duration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_duration(&mut self, v: u32) {
        self.duration = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTAChatModeratorBan {
    const NAME: &'static str = "CMsgDOTAChatModeratorBan";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.channel_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.duration = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.channel_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.duration {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.channel_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.account_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.duration {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAChatModeratorBan {
        CMsgDOTAChatModeratorBan::new()
    }

    fn clear(&mut self) {
        self.channel_id = ::std::option::Option::None;
        self.account_id = ::std::option::Option::None;
        self.duration = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAChatModeratorBan {
        static instance: CMsgDOTAChatModeratorBan = CMsgDOTAChatModeratorBan {
            channel_id: ::std::option::Option::None,
            account_id: ::std::option::Option::None,
            duration: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTAChatMessage)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAChatMessage {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.account_id)
    pub account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.channel_id)
    pub channel_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.persona_name)
    pub persona_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.text)
    pub text: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.timestamp)
    pub timestamp: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.suggest_invite_account_id)
    pub suggest_invite_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.suggest_invite_name)
    pub suggest_invite_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.fantasy_draft_owner_account_id)
    pub fantasy_draft_owner_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.fantasy_draft_player_account_id)
    pub fantasy_draft_player_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.event_id)
    pub event_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.suggest_invite_to_lobby)
    pub suggest_invite_to_lobby: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.coin_flip)
    pub coin_flip: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.player_id)
    pub player_id: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.share_profile_account_id)
    pub share_profile_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.channel_user_id)
    pub channel_user_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.dice_roll)
    pub dice_roll: ::steam_vent_proto_common::protobuf::MessageField<cmsg_dotachat_message::DiceRoll>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.share_party_id)
    pub share_party_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.share_lobby_id)
    pub share_lobby_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.share_lobby_custom_game_id)
    pub share_lobby_custom_game_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.share_lobby_passkey)
    pub share_lobby_passkey: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.private_chat_channel_id)
    pub private_chat_channel_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.status)
    pub status: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.legacy_battle_cup_victory)
    pub legacy_battle_cup_victory: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.battle_cup_streak)
    pub battle_cup_streak: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.badge_level)
    pub badge_level: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.suggest_pick_hero_id)
    pub suggest_pick_hero_id: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.suggest_pick_hero_role)
    pub suggest_pick_hero_role: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.suggest_ban_hero_id)
    pub suggest_ban_hero_id: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.trivia_answer)
    pub trivia_answer: ::steam_vent_proto_common::protobuf::MessageField<cmsg_dotachat_message::TriviaAnswered>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.requested_ability_id)
    pub requested_ability_id: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.chat_flags)
    pub chat_flags: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.started_finding_match)
    pub started_finding_match: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.ctrl_is_down)
    pub ctrl_is_down: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.favorite_team_id)
    pub favorite_team_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.favorite_team_quality)
    pub favorite_team_quality: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.suggest_player_draft_pick)
    pub suggest_player_draft_pick: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.player_draft_pick)
    pub player_draft_pick: ::steam_vent_proto_common::protobuf::MessageField<cmsg_dotachat_message::PlayerDraftPick>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.chat_wheel_message)
    pub chat_wheel_message: ::steam_vent_proto_common::protobuf::MessageField<cmsg_dotachat_message::ChatWheelMessage>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.event_level)
    pub event_level: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMessage.suggest_pick_hero_facet)
    pub suggest_pick_hero_facet: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTAChatMessage.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAChatMessage {
    fn default() -> &'a CMsgDOTAChatMessage {
        <CMsgDOTAChatMessage as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAChatMessage {
    pub fn new() -> CMsgDOTAChatMessage {
        ::std::default::Default::default()
    }

    // optional uint32 account_id = 1;

    pub fn account_id(&self) -> u32 {
        self.account_id.unwrap_or(0)
    }

    pub fn clear_account_id(&mut self) {
        self.account_id = ::std::option::Option::None;
    }

    pub fn has_account_id(&self) -> bool {
        self.account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: u32) {
        self.account_id = ::std::option::Option::Some(v);
    }

    // optional uint64 channel_id = 2;

    pub fn channel_id(&self) -> u64 {
        self.channel_id.unwrap_or(0)
    }

    pub fn clear_channel_id(&mut self) {
        self.channel_id = ::std::option::Option::None;
    }

    pub fn has_channel_id(&self) -> bool {
        self.channel_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_id(&mut self, v: u64) {
        self.channel_id = ::std::option::Option::Some(v);
    }

    // optional string persona_name = 3;

    pub fn persona_name(&self) -> &str {
        match self.persona_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_persona_name(&mut self) {
        self.persona_name = ::std::option::Option::None;
    }

    pub fn has_persona_name(&self) -> bool {
        self.persona_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_persona_name(&mut self, v: ::std::string::String) {
        self.persona_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_persona_name(&mut self) -> &mut ::std::string::String {
        if self.persona_name.is_none() {
            self.persona_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.persona_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_persona_name(&mut self) -> ::std::string::String {
        self.persona_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string text = 4;

    pub fn text(&self) -> &str {
        match self.text.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_text(&mut self) {
        self.text = ::std::option::Option::None;
    }

    pub fn has_text(&self) -> bool {
        self.text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.text = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        if self.text.is_none() {
            self.text = ::std::option::Option::Some(::std::string::String::new());
        }
        self.text.as_mut().unwrap()
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        self.text.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 timestamp = 5;

    pub fn timestamp(&self) -> u32 {
        self.timestamp.unwrap_or(0)
    }

    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u32) {
        self.timestamp = ::std::option::Option::Some(v);
    }

    // optional uint32 suggest_invite_account_id = 6;

    pub fn suggest_invite_account_id(&self) -> u32 {
        self.suggest_invite_account_id.unwrap_or(0)
    }

    pub fn clear_suggest_invite_account_id(&mut self) {
        self.suggest_invite_account_id = ::std::option::Option::None;
    }

    pub fn has_suggest_invite_account_id(&self) -> bool {
        self.suggest_invite_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_suggest_invite_account_id(&mut self, v: u32) {
        self.suggest_invite_account_id = ::std::option::Option::Some(v);
    }

    // optional string suggest_invite_name = 7;

    pub fn suggest_invite_name(&self) -> &str {
        match self.suggest_invite_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_suggest_invite_name(&mut self) {
        self.suggest_invite_name = ::std::option::Option::None;
    }

    pub fn has_suggest_invite_name(&self) -> bool {
        self.suggest_invite_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_suggest_invite_name(&mut self, v: ::std::string::String) {
        self.suggest_invite_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_suggest_invite_name(&mut self) -> &mut ::std::string::String {
        if self.suggest_invite_name.is_none() {
            self.suggest_invite_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.suggest_invite_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_suggest_invite_name(&mut self) -> ::std::string::String {
        self.suggest_invite_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 fantasy_draft_owner_account_id = 8;

    pub fn fantasy_draft_owner_account_id(&self) -> u32 {
        self.fantasy_draft_owner_account_id.unwrap_or(0)
    }

    pub fn clear_fantasy_draft_owner_account_id(&mut self) {
        self.fantasy_draft_owner_account_id = ::std::option::Option::None;
    }

    pub fn has_fantasy_draft_owner_account_id(&self) -> bool {
        self.fantasy_draft_owner_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fantasy_draft_owner_account_id(&mut self, v: u32) {
        self.fantasy_draft_owner_account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 fantasy_draft_player_account_id = 9;

    pub fn fantasy_draft_player_account_id(&self) -> u32 {
        self.fantasy_draft_player_account_id.unwrap_or(0)
    }

    pub fn clear_fantasy_draft_player_account_id(&mut self) {
        self.fantasy_draft_player_account_id = ::std::option::Option::None;
    }

    pub fn has_fantasy_draft_player_account_id(&self) -> bool {
        self.fantasy_draft_player_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fantasy_draft_player_account_id(&mut self, v: u32) {
        self.fantasy_draft_player_account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 event_id = 10;

    pub fn event_id(&self) -> u32 {
        self.event_id.unwrap_or(0)
    }

    pub fn clear_event_id(&mut self) {
        self.event_id = ::std::option::Option::None;
    }

    pub fn has_event_id(&self) -> bool {
        self.event_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_event_id(&mut self, v: u32) {
        self.event_id = ::std::option::Option::Some(v);
    }

    // optional bool suggest_invite_to_lobby = 11;

    pub fn suggest_invite_to_lobby(&self) -> bool {
        self.suggest_invite_to_lobby.unwrap_or(false)
    }

    pub fn clear_suggest_invite_to_lobby(&mut self) {
        self.suggest_invite_to_lobby = ::std::option::Option::None;
    }

    pub fn has_suggest_invite_to_lobby(&self) -> bool {
        self.suggest_invite_to_lobby.is_some()
    }

    // Param is passed by value, moved
    pub fn set_suggest_invite_to_lobby(&mut self, v: bool) {
        self.suggest_invite_to_lobby = ::std::option::Option::Some(v);
    }

    // optional bool coin_flip = 13;

    pub fn coin_flip(&self) -> bool {
        self.coin_flip.unwrap_or(false)
    }

    pub fn clear_coin_flip(&mut self) {
        self.coin_flip = ::std::option::Option::None;
    }

    pub fn has_coin_flip(&self) -> bool {
        self.coin_flip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_coin_flip(&mut self, v: bool) {
        self.coin_flip = ::std::option::Option::Some(v);
    }

    // optional int32 player_id = 14;

    pub fn player_id(&self) -> i32 {
        self.player_id.unwrap_or(-1i32)
    }

    pub fn clear_player_id(&mut self) {
        self.player_id = ::std::option::Option::None;
    }

    pub fn has_player_id(&self) -> bool {
        self.player_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_player_id(&mut self, v: i32) {
        self.player_id = ::std::option::Option::Some(v);
    }

    // optional uint32 share_profile_account_id = 15;

    pub fn share_profile_account_id(&self) -> u32 {
        self.share_profile_account_id.unwrap_or(0)
    }

    pub fn clear_share_profile_account_id(&mut self) {
        self.share_profile_account_id = ::std::option::Option::None;
    }

    pub fn has_share_profile_account_id(&self) -> bool {
        self.share_profile_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_share_profile_account_id(&mut self, v: u32) {
        self.share_profile_account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 channel_user_id = 16;

    pub fn channel_user_id(&self) -> u32 {
        self.channel_user_id.unwrap_or(0)
    }

    pub fn clear_channel_user_id(&mut self) {
        self.channel_user_id = ::std::option::Option::None;
    }

    pub fn has_channel_user_id(&self) -> bool {
        self.channel_user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_user_id(&mut self, v: u32) {
        self.channel_user_id = ::std::option::Option::Some(v);
    }

    // optional uint64 share_party_id = 18;

    pub fn share_party_id(&self) -> u64 {
        self.share_party_id.unwrap_or(0)
    }

    pub fn clear_share_party_id(&mut self) {
        self.share_party_id = ::std::option::Option::None;
    }

    pub fn has_share_party_id(&self) -> bool {
        self.share_party_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_share_party_id(&mut self, v: u64) {
        self.share_party_id = ::std::option::Option::Some(v);
    }

    // optional uint64 share_lobby_id = 19;

    pub fn share_lobby_id(&self) -> u64 {
        self.share_lobby_id.unwrap_or(0)
    }

    pub fn clear_share_lobby_id(&mut self) {
        self.share_lobby_id = ::std::option::Option::None;
    }

    pub fn has_share_lobby_id(&self) -> bool {
        self.share_lobby_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_share_lobby_id(&mut self, v: u64) {
        self.share_lobby_id = ::std::option::Option::Some(v);
    }

    // optional uint64 share_lobby_custom_game_id = 20;

    pub fn share_lobby_custom_game_id(&self) -> u64 {
        self.share_lobby_custom_game_id.unwrap_or(0)
    }

    pub fn clear_share_lobby_custom_game_id(&mut self) {
        self.share_lobby_custom_game_id = ::std::option::Option::None;
    }

    pub fn has_share_lobby_custom_game_id(&self) -> bool {
        self.share_lobby_custom_game_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_share_lobby_custom_game_id(&mut self, v: u64) {
        self.share_lobby_custom_game_id = ::std::option::Option::Some(v);
    }

    // optional string share_lobby_passkey = 21;

    pub fn share_lobby_passkey(&self) -> &str {
        match self.share_lobby_passkey.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_share_lobby_passkey(&mut self) {
        self.share_lobby_passkey = ::std::option::Option::None;
    }

    pub fn has_share_lobby_passkey(&self) -> bool {
        self.share_lobby_passkey.is_some()
    }

    // Param is passed by value, moved
    pub fn set_share_lobby_passkey(&mut self, v: ::std::string::String) {
        self.share_lobby_passkey = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_share_lobby_passkey(&mut self) -> &mut ::std::string::String {
        if self.share_lobby_passkey.is_none() {
            self.share_lobby_passkey = ::std::option::Option::Some(::std::string::String::new());
        }
        self.share_lobby_passkey.as_mut().unwrap()
    }

    // Take field
    pub fn take_share_lobby_passkey(&mut self) -> ::std::string::String {
        self.share_lobby_passkey.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 private_chat_channel_id = 22;

    pub fn private_chat_channel_id(&self) -> u32 {
        self.private_chat_channel_id.unwrap_or(0)
    }

    pub fn clear_private_chat_channel_id(&mut self) {
        self.private_chat_channel_id = ::std::option::Option::None;
    }

    pub fn has_private_chat_channel_id(&self) -> bool {
        self.private_chat_channel_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_private_chat_channel_id(&mut self, v: u32) {
        self.private_chat_channel_id = ::std::option::Option::Some(v);
    }

    // optional uint32 status = 23;

    pub fn status(&self) -> u32 {
        self.status.unwrap_or(0)
    }

    pub fn clear_status(&mut self) {
        self.status = ::std::option::Option::None;
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: u32) {
        self.status = ::std::option::Option::Some(v);
    }

    // optional bool legacy_battle_cup_victory = 24;

    pub fn legacy_battle_cup_victory(&self) -> bool {
        self.legacy_battle_cup_victory.unwrap_or(false)
    }

    pub fn clear_legacy_battle_cup_victory(&mut self) {
        self.legacy_battle_cup_victory = ::std::option::Option::None;
    }

    pub fn has_legacy_battle_cup_victory(&self) -> bool {
        self.legacy_battle_cup_victory.is_some()
    }

    // Param is passed by value, moved
    pub fn set_legacy_battle_cup_victory(&mut self, v: bool) {
        self.legacy_battle_cup_victory = ::std::option::Option::Some(v);
    }

    // optional uint32 battle_cup_streak = 29;

    pub fn battle_cup_streak(&self) -> u32 {
        self.battle_cup_streak.unwrap_or(0)
    }

    pub fn clear_battle_cup_streak(&mut self) {
        self.battle_cup_streak = ::std::option::Option::None;
    }

    pub fn has_battle_cup_streak(&self) -> bool {
        self.battle_cup_streak.is_some()
    }

    // Param is passed by value, moved
    pub fn set_battle_cup_streak(&mut self, v: u32) {
        self.battle_cup_streak = ::std::option::Option::Some(v);
    }

    // optional uint32 badge_level = 25;

    pub fn badge_level(&self) -> u32 {
        self.badge_level.unwrap_or(0)
    }

    pub fn clear_badge_level(&mut self) {
        self.badge_level = ::std::option::Option::None;
    }

    pub fn has_badge_level(&self) -> bool {
        self.badge_level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_badge_level(&mut self, v: u32) {
        self.badge_level = ::std::option::Option::Some(v);
    }

    // optional int32 suggest_pick_hero_id = 26;

    pub fn suggest_pick_hero_id(&self) -> i32 {
        self.suggest_pick_hero_id.unwrap_or(0)
    }

    pub fn clear_suggest_pick_hero_id(&mut self) {
        self.suggest_pick_hero_id = ::std::option::Option::None;
    }

    pub fn has_suggest_pick_hero_id(&self) -> bool {
        self.suggest_pick_hero_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_suggest_pick_hero_id(&mut self, v: i32) {
        self.suggest_pick_hero_id = ::std::option::Option::Some(v);
    }

    // optional string suggest_pick_hero_role = 27;

    pub fn suggest_pick_hero_role(&self) -> &str {
        match self.suggest_pick_hero_role.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_suggest_pick_hero_role(&mut self) {
        self.suggest_pick_hero_role = ::std::option::Option::None;
    }

    pub fn has_suggest_pick_hero_role(&self) -> bool {
        self.suggest_pick_hero_role.is_some()
    }

    // Param is passed by value, moved
    pub fn set_suggest_pick_hero_role(&mut self, v: ::std::string::String) {
        self.suggest_pick_hero_role = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_suggest_pick_hero_role(&mut self) -> &mut ::std::string::String {
        if self.suggest_pick_hero_role.is_none() {
            self.suggest_pick_hero_role = ::std::option::Option::Some(::std::string::String::new());
        }
        self.suggest_pick_hero_role.as_mut().unwrap()
    }

    // Take field
    pub fn take_suggest_pick_hero_role(&mut self) -> ::std::string::String {
        self.suggest_pick_hero_role.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 suggest_ban_hero_id = 30;

    pub fn suggest_ban_hero_id(&self) -> i32 {
        self.suggest_ban_hero_id.unwrap_or(0)
    }

    pub fn clear_suggest_ban_hero_id(&mut self) {
        self.suggest_ban_hero_id = ::std::option::Option::None;
    }

    pub fn has_suggest_ban_hero_id(&self) -> bool {
        self.suggest_ban_hero_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_suggest_ban_hero_id(&mut self, v: i32) {
        self.suggest_ban_hero_id = ::std::option::Option::Some(v);
    }

    // optional int32 requested_ability_id = 33;

    pub fn requested_ability_id(&self) -> i32 {
        self.requested_ability_id.unwrap_or(-1i32)
    }

    pub fn clear_requested_ability_id(&mut self) {
        self.requested_ability_id = ::std::option::Option::None;
    }

    pub fn has_requested_ability_id(&self) -> bool {
        self.requested_ability_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_requested_ability_id(&mut self, v: i32) {
        self.requested_ability_id = ::std::option::Option::Some(v);
    }

    // optional uint32 chat_flags = 34;

    pub fn chat_flags(&self) -> u32 {
        self.chat_flags.unwrap_or(0)
    }

    pub fn clear_chat_flags(&mut self) {
        self.chat_flags = ::std::option::Option::None;
    }

    pub fn has_chat_flags(&self) -> bool {
        self.chat_flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chat_flags(&mut self, v: u32) {
        self.chat_flags = ::std::option::Option::Some(v);
    }

    // optional bool started_finding_match = 35;

    pub fn started_finding_match(&self) -> bool {
        self.started_finding_match.unwrap_or(false)
    }

    pub fn clear_started_finding_match(&mut self) {
        self.started_finding_match = ::std::option::Option::None;
    }

    pub fn has_started_finding_match(&self) -> bool {
        self.started_finding_match.is_some()
    }

    // Param is passed by value, moved
    pub fn set_started_finding_match(&mut self, v: bool) {
        self.started_finding_match = ::std::option::Option::Some(v);
    }

    // optional bool ctrl_is_down = 36;

    pub fn ctrl_is_down(&self) -> bool {
        self.ctrl_is_down.unwrap_or(false)
    }

    pub fn clear_ctrl_is_down(&mut self) {
        self.ctrl_is_down = ::std::option::Option::None;
    }

    pub fn has_ctrl_is_down(&self) -> bool {
        self.ctrl_is_down.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ctrl_is_down(&mut self, v: bool) {
        self.ctrl_is_down = ::std::option::Option::Some(v);
    }

    // optional uint32 favorite_team_id = 37;

    pub fn favorite_team_id(&self) -> u32 {
        self.favorite_team_id.unwrap_or(0)
    }

    pub fn clear_favorite_team_id(&mut self) {
        self.favorite_team_id = ::std::option::Option::None;
    }

    pub fn has_favorite_team_id(&self) -> bool {
        self.favorite_team_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_favorite_team_id(&mut self, v: u32) {
        self.favorite_team_id = ::std::option::Option::Some(v);
    }

    // optional uint32 favorite_team_quality = 38;

    pub fn favorite_team_quality(&self) -> u32 {
        self.favorite_team_quality.unwrap_or(0)
    }

    pub fn clear_favorite_team_quality(&mut self) {
        self.favorite_team_quality = ::std::option::Option::None;
    }

    pub fn has_favorite_team_quality(&self) -> bool {
        self.favorite_team_quality.is_some()
    }

    // Param is passed by value, moved
    pub fn set_favorite_team_quality(&mut self, v: u32) {
        self.favorite_team_quality = ::std::option::Option::Some(v);
    }

    // optional int32 suggest_player_draft_pick = 39;

    pub fn suggest_player_draft_pick(&self) -> i32 {
        self.suggest_player_draft_pick.unwrap_or(-1i32)
    }

    pub fn clear_suggest_player_draft_pick(&mut self) {
        self.suggest_player_draft_pick = ::std::option::Option::None;
    }

    pub fn has_suggest_player_draft_pick(&self) -> bool {
        self.suggest_player_draft_pick.is_some()
    }

    // Param is passed by value, moved
    pub fn set_suggest_player_draft_pick(&mut self, v: i32) {
        self.suggest_player_draft_pick = ::std::option::Option::Some(v);
    }

    // optional uint32 event_level = 42;

    pub fn event_level(&self) -> u32 {
        self.event_level.unwrap_or(0)
    }

    pub fn clear_event_level(&mut self) {
        self.event_level = ::std::option::Option::None;
    }

    pub fn has_event_level(&self) -> bool {
        self.event_level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_event_level(&mut self, v: u32) {
        self.event_level = ::std::option::Option::Some(v);
    }

    // optional uint32 suggest_pick_hero_facet = 43;

    pub fn suggest_pick_hero_facet(&self) -> u32 {
        self.suggest_pick_hero_facet.unwrap_or(0)
    }

    pub fn clear_suggest_pick_hero_facet(&mut self) {
        self.suggest_pick_hero_facet = ::std::option::Option::None;
    }

    pub fn has_suggest_pick_hero_facet(&self) -> bool {
        self.suggest_pick_hero_facet.is_some()
    }

    // Param is passed by value, moved
    pub fn set_suggest_pick_hero_facet(&mut self, v: u32) {
        self.suggest_pick_hero_facet = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTAChatMessage {
    const NAME: &'static str = "CMsgDOTAChatMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.channel_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                26 => {
                    self.persona_name = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.text = ::std::option::Option::Some(is.read_string()?);
                },
                40 => {
                    self.timestamp = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.suggest_invite_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    self.suggest_invite_name = ::std::option::Option::Some(is.read_string()?);
                },
                64 => {
                    self.fantasy_draft_owner_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.fantasy_draft_player_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                80 => {
                    self.event_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                88 => {
                    self.suggest_invite_to_lobby = ::std::option::Option::Some(is.read_bool()?);
                },
                104 => {
                    self.coin_flip = ::std::option::Option::Some(is.read_bool()?);
                },
                112 => {
                    self.player_id = ::std::option::Option::Some(is.read_int32()?);
                },
                120 => {
                    self.share_profile_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                128 => {
                    self.channel_user_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                138 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.dice_roll)?;
                },
                144 => {
                    self.share_party_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                152 => {
                    self.share_lobby_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                160 => {
                    self.share_lobby_custom_game_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                170 => {
                    self.share_lobby_passkey = ::std::option::Option::Some(is.read_string()?);
                },
                176 => {
                    self.private_chat_channel_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                184 => {
                    self.status = ::std::option::Option::Some(is.read_uint32()?);
                },
                192 => {
                    self.legacy_battle_cup_victory = ::std::option::Option::Some(is.read_bool()?);
                },
                232 => {
                    self.battle_cup_streak = ::std::option::Option::Some(is.read_uint32()?);
                },
                200 => {
                    self.badge_level = ::std::option::Option::Some(is.read_uint32()?);
                },
                208 => {
                    self.suggest_pick_hero_id = ::std::option::Option::Some(is.read_int32()?);
                },
                218 => {
                    self.suggest_pick_hero_role = ::std::option::Option::Some(is.read_string()?);
                },
                240 => {
                    self.suggest_ban_hero_id = ::std::option::Option::Some(is.read_int32()?);
                },
                258 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.trivia_answer)?;
                },
                264 => {
                    self.requested_ability_id = ::std::option::Option::Some(is.read_int32()?);
                },
                272 => {
                    self.chat_flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                280 => {
                    self.started_finding_match = ::std::option::Option::Some(is.read_bool()?);
                },
                288 => {
                    self.ctrl_is_down = ::std::option::Option::Some(is.read_bool()?);
                },
                296 => {
                    self.favorite_team_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                304 => {
                    self.favorite_team_quality = ::std::option::Option::Some(is.read_uint32()?);
                },
                312 => {
                    self.suggest_player_draft_pick = ::std::option::Option::Some(is.read_int32()?);
                },
                322 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.player_draft_pick)?;
                },
                330 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.chat_wheel_message)?;
                },
                336 => {
                    self.event_level = ::std::option::Option::Some(is.read_uint32()?);
                },
                344 => {
                    self.suggest_pick_hero_facet = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.channel_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.persona_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.text.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.timestamp {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.suggest_invite_account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.suggest_invite_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.fantasy_draft_owner_account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.fantasy_draft_player_account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(9, v);
        }
        if let Some(v) = self.event_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(10, v);
        }
        if let Some(v) = self.suggest_invite_to_lobby {
            my_size += 1 + 1;
        }
        if let Some(v) = self.coin_flip {
            my_size += 1 + 1;
        }
        if let Some(v) = self.player_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(14, v);
        }
        if let Some(v) = self.share_profile_account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(15, v);
        }
        if let Some(v) = self.channel_user_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(16, v);
        }
        if let Some(v) = self.dice_roll.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.share_party_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(18, v);
        }
        if let Some(v) = self.share_lobby_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(19, v);
        }
        if let Some(v) = self.share_lobby_custom_game_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(20, v);
        }
        if let Some(v) = self.share_lobby_passkey.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(21, &v);
        }
        if let Some(v) = self.private_chat_channel_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(22, v);
        }
        if let Some(v) = self.status {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(23, v);
        }
        if let Some(v) = self.legacy_battle_cup_victory {
            my_size += 2 + 1;
        }
        if let Some(v) = self.battle_cup_streak {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(29, v);
        }
        if let Some(v) = self.badge_level {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(25, v);
        }
        if let Some(v) = self.suggest_pick_hero_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(26, v);
        }
        if let Some(v) = self.suggest_pick_hero_role.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(27, &v);
        }
        if let Some(v) = self.suggest_ban_hero_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(30, v);
        }
        if let Some(v) = self.trivia_answer.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.requested_ability_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(33, v);
        }
        if let Some(v) = self.chat_flags {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(34, v);
        }
        if let Some(v) = self.started_finding_match {
            my_size += 2 + 1;
        }
        if let Some(v) = self.ctrl_is_down {
            my_size += 2 + 1;
        }
        if let Some(v) = self.favorite_team_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(37, v);
        }
        if let Some(v) = self.favorite_team_quality {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(38, v);
        }
        if let Some(v) = self.suggest_player_draft_pick {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(39, v);
        }
        if let Some(v) = self.player_draft_pick.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.chat_wheel_message.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.event_level {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(42, v);
        }
        if let Some(v) = self.suggest_pick_hero_facet {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(43, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.account_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.channel_id {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.persona_name.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.text.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.timestamp {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.suggest_invite_account_id {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.suggest_invite_name.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.fantasy_draft_owner_account_id {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.fantasy_draft_player_account_id {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.event_id {
            os.write_uint32(10, v)?;
        }
        if let Some(v) = self.suggest_invite_to_lobby {
            os.write_bool(11, v)?;
        }
        if let Some(v) = self.coin_flip {
            os.write_bool(13, v)?;
        }
        if let Some(v) = self.player_id {
            os.write_int32(14, v)?;
        }
        if let Some(v) = self.share_profile_account_id {
            os.write_uint32(15, v)?;
        }
        if let Some(v) = self.channel_user_id {
            os.write_uint32(16, v)?;
        }
        if let Some(v) = self.dice_roll.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(17, v, os)?;
        }
        if let Some(v) = self.share_party_id {
            os.write_uint64(18, v)?;
        }
        if let Some(v) = self.share_lobby_id {
            os.write_uint64(19, v)?;
        }
        if let Some(v) = self.share_lobby_custom_game_id {
            os.write_uint64(20, v)?;
        }
        if let Some(v) = self.share_lobby_passkey.as_ref() {
            os.write_string(21, v)?;
        }
        if let Some(v) = self.private_chat_channel_id {
            os.write_uint32(22, v)?;
        }
        if let Some(v) = self.status {
            os.write_uint32(23, v)?;
        }
        if let Some(v) = self.legacy_battle_cup_victory {
            os.write_bool(24, v)?;
        }
        if let Some(v) = self.battle_cup_streak {
            os.write_uint32(29, v)?;
        }
        if let Some(v) = self.badge_level {
            os.write_uint32(25, v)?;
        }
        if let Some(v) = self.suggest_pick_hero_id {
            os.write_int32(26, v)?;
        }
        if let Some(v) = self.suggest_pick_hero_role.as_ref() {
            os.write_string(27, v)?;
        }
        if let Some(v) = self.suggest_ban_hero_id {
            os.write_int32(30, v)?;
        }
        if let Some(v) = self.trivia_answer.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(32, v, os)?;
        }
        if let Some(v) = self.requested_ability_id {
            os.write_int32(33, v)?;
        }
        if let Some(v) = self.chat_flags {
            os.write_uint32(34, v)?;
        }
        if let Some(v) = self.started_finding_match {
            os.write_bool(35, v)?;
        }
        if let Some(v) = self.ctrl_is_down {
            os.write_bool(36, v)?;
        }
        if let Some(v) = self.favorite_team_id {
            os.write_uint32(37, v)?;
        }
        if let Some(v) = self.favorite_team_quality {
            os.write_uint32(38, v)?;
        }
        if let Some(v) = self.suggest_player_draft_pick {
            os.write_int32(39, v)?;
        }
        if let Some(v) = self.player_draft_pick.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(40, v, os)?;
        }
        if let Some(v) = self.chat_wheel_message.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(41, v, os)?;
        }
        if let Some(v) = self.event_level {
            os.write_uint32(42, v)?;
        }
        if let Some(v) = self.suggest_pick_hero_facet {
            os.write_uint32(43, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAChatMessage {
        CMsgDOTAChatMessage::new()
    }

    fn clear(&mut self) {
        self.account_id = ::std::option::Option::None;
        self.channel_id = ::std::option::Option::None;
        self.persona_name = ::std::option::Option::None;
        self.text = ::std::option::Option::None;
        self.timestamp = ::std::option::Option::None;
        self.suggest_invite_account_id = ::std::option::Option::None;
        self.suggest_invite_name = ::std::option::Option::None;
        self.fantasy_draft_owner_account_id = ::std::option::Option::None;
        self.fantasy_draft_player_account_id = ::std::option::Option::None;
        self.event_id = ::std::option::Option::None;
        self.suggest_invite_to_lobby = ::std::option::Option::None;
        self.coin_flip = ::std::option::Option::None;
        self.player_id = ::std::option::Option::None;
        self.share_profile_account_id = ::std::option::Option::None;
        self.channel_user_id = ::std::option::Option::None;
        self.dice_roll.clear();
        self.share_party_id = ::std::option::Option::None;
        self.share_lobby_id = ::std::option::Option::None;
        self.share_lobby_custom_game_id = ::std::option::Option::None;
        self.share_lobby_passkey = ::std::option::Option::None;
        self.private_chat_channel_id = ::std::option::Option::None;
        self.status = ::std::option::Option::None;
        self.legacy_battle_cup_victory = ::std::option::Option::None;
        self.battle_cup_streak = ::std::option::Option::None;
        self.badge_level = ::std::option::Option::None;
        self.suggest_pick_hero_id = ::std::option::Option::None;
        self.suggest_pick_hero_role = ::std::option::Option::None;
        self.suggest_ban_hero_id = ::std::option::Option::None;
        self.trivia_answer.clear();
        self.requested_ability_id = ::std::option::Option::None;
        self.chat_flags = ::std::option::Option::None;
        self.started_finding_match = ::std::option::Option::None;
        self.ctrl_is_down = ::std::option::Option::None;
        self.favorite_team_id = ::std::option::Option::None;
        self.favorite_team_quality = ::std::option::Option::None;
        self.suggest_player_draft_pick = ::std::option::Option::None;
        self.player_draft_pick.clear();
        self.chat_wheel_message.clear();
        self.event_level = ::std::option::Option::None;
        self.suggest_pick_hero_facet = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAChatMessage {
        static instance: CMsgDOTAChatMessage = CMsgDOTAChatMessage {
            account_id: ::std::option::Option::None,
            channel_id: ::std::option::Option::None,
            persona_name: ::std::option::Option::None,
            text: ::std::option::Option::None,
            timestamp: ::std::option::Option::None,
            suggest_invite_account_id: ::std::option::Option::None,
            suggest_invite_name: ::std::option::Option::None,
            fantasy_draft_owner_account_id: ::std::option::Option::None,
            fantasy_draft_player_account_id: ::std::option::Option::None,
            event_id: ::std::option::Option::None,
            suggest_invite_to_lobby: ::std::option::Option::None,
            coin_flip: ::std::option::Option::None,
            player_id: ::std::option::Option::None,
            share_profile_account_id: ::std::option::Option::None,
            channel_user_id: ::std::option::Option::None,
            dice_roll: ::steam_vent_proto_common::protobuf::MessageField::none(),
            share_party_id: ::std::option::Option::None,
            share_lobby_id: ::std::option::Option::None,
            share_lobby_custom_game_id: ::std::option::Option::None,
            share_lobby_passkey: ::std::option::Option::None,
            private_chat_channel_id: ::std::option::Option::None,
            status: ::std::option::Option::None,
            legacy_battle_cup_victory: ::std::option::Option::None,
            battle_cup_streak: ::std::option::Option::None,
            badge_level: ::std::option::Option::None,
            suggest_pick_hero_id: ::std::option::Option::None,
            suggest_pick_hero_role: ::std::option::Option::None,
            suggest_ban_hero_id: ::std::option::Option::None,
            trivia_answer: ::steam_vent_proto_common::protobuf::MessageField::none(),
            requested_ability_id: ::std::option::Option::None,
            chat_flags: ::std::option::Option::None,
            started_finding_match: ::std::option::Option::None,
            ctrl_is_down: ::std::option::Option::None,
            favorite_team_id: ::std::option::Option::None,
            favorite_team_quality: ::std::option::Option::None,
            suggest_player_draft_pick: ::std::option::Option::None,
            player_draft_pick: ::steam_vent_proto_common::protobuf::MessageField::none(),
            chat_wheel_message: ::steam_vent_proto_common::protobuf::MessageField::none(),
            event_level: ::std::option::Option::None,
            suggest_pick_hero_facet: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgDOTAChatMessage`
pub mod cmsg_dotachat_message {
    // @@protoc_insertion_point(message:CMsgDOTAChatMessage.DiceRoll)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct DiceRoll {
        // message fields
        // @@protoc_insertion_point(field:CMsgDOTAChatMessage.DiceRoll.roll_min)
        pub roll_min: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgDOTAChatMessage.DiceRoll.roll_max)
        pub roll_max: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgDOTAChatMessage.DiceRoll.result)
        pub result: ::std::option::Option<i32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDOTAChatMessage.DiceRoll.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a DiceRoll {
        fn default() -> &'a DiceRoll {
            <DiceRoll as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl DiceRoll {
        pub fn new() -> DiceRoll {
            ::std::default::Default::default()
        }

        // optional int32 roll_min = 1;

        pub fn roll_min(&self) -> i32 {
            self.roll_min.unwrap_or(0)
        }

        pub fn clear_roll_min(&mut self) {
            self.roll_min = ::std::option::Option::None;
        }

        pub fn has_roll_min(&self) -> bool {
            self.roll_min.is_some()
        }

        // Param is passed by value, moved
        pub fn set_roll_min(&mut self, v: i32) {
            self.roll_min = ::std::option::Option::Some(v);
        }

        // optional int32 roll_max = 2;

        pub fn roll_max(&self) -> i32 {
            self.roll_max.unwrap_or(0)
        }

        pub fn clear_roll_max(&mut self) {
            self.roll_max = ::std::option::Option::None;
        }

        pub fn has_roll_max(&self) -> bool {
            self.roll_max.is_some()
        }

        // Param is passed by value, moved
        pub fn set_roll_max(&mut self, v: i32) {
            self.roll_max = ::std::option::Option::Some(v);
        }

        // optional int32 result = 3;

        pub fn result(&self) -> i32 {
            self.result.unwrap_or(0)
        }

        pub fn clear_result(&mut self) {
            self.result = ::std::option::Option::None;
        }

        pub fn has_result(&self) -> bool {
            self.result.is_some()
        }

        // Param is passed by value, moved
        pub fn set_result(&mut self, v: i32) {
            self.result = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for DiceRoll {
        const NAME: &'static str = "DiceRoll";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.roll_min = ::std::option::Option::Some(is.read_int32()?);
                    },
                    16 => {
                        self.roll_max = ::std::option::Option::Some(is.read_int32()?);
                    },
                    24 => {
                        self.result = ::std::option::Option::Some(is.read_int32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.roll_min {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v);
            }
            if let Some(v) = self.roll_max {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(2, v);
            }
            if let Some(v) = self.result {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(3, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.roll_min {
                os.write_int32(1, v)?;
            }
            if let Some(v) = self.roll_max {
                os.write_int32(2, v)?;
            }
            if let Some(v) = self.result {
                os.write_int32(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> DiceRoll {
            DiceRoll::new()
        }

        fn clear(&mut self) {
            self.roll_min = ::std::option::Option::None;
            self.roll_max = ::std::option::Option::None;
            self.result = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static DiceRoll {
            static instance: DiceRoll = DiceRoll {
                roll_min: ::std::option::Option::None,
                roll_max: ::std::option::Option::None,
                result: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgDOTAChatMessage.TriviaAnswered)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct TriviaAnswered {
        // message fields
        // @@protoc_insertion_point(field:CMsgDOTAChatMessage.TriviaAnswered.question_id)
        pub question_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTAChatMessage.TriviaAnswered.answer_index)
        pub answer_index: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTAChatMessage.TriviaAnswered.party_questions_correct)
        pub party_questions_correct: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTAChatMessage.TriviaAnswered.party_questions_viewed)
        pub party_questions_viewed: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTAChatMessage.TriviaAnswered.party_trivia_points)
        pub party_trivia_points: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDOTAChatMessage.TriviaAnswered.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a TriviaAnswered {
        fn default() -> &'a TriviaAnswered {
            <TriviaAnswered as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl TriviaAnswered {
        pub fn new() -> TriviaAnswered {
            ::std::default::Default::default()
        }

        // optional uint32 question_id = 1;

        pub fn question_id(&self) -> u32 {
            self.question_id.unwrap_or(0)
        }

        pub fn clear_question_id(&mut self) {
            self.question_id = ::std::option::Option::None;
        }

        pub fn has_question_id(&self) -> bool {
            self.question_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_question_id(&mut self, v: u32) {
            self.question_id = ::std::option::Option::Some(v);
        }

        // optional uint32 answer_index = 2;

        pub fn answer_index(&self) -> u32 {
            self.answer_index.unwrap_or(0)
        }

        pub fn clear_answer_index(&mut self) {
            self.answer_index = ::std::option::Option::None;
        }

        pub fn has_answer_index(&self) -> bool {
            self.answer_index.is_some()
        }

        // Param is passed by value, moved
        pub fn set_answer_index(&mut self, v: u32) {
            self.answer_index = ::std::option::Option::Some(v);
        }

        // optional uint32 party_questions_correct = 3;

        pub fn party_questions_correct(&self) -> u32 {
            self.party_questions_correct.unwrap_or(0)
        }

        pub fn clear_party_questions_correct(&mut self) {
            self.party_questions_correct = ::std::option::Option::None;
        }

        pub fn has_party_questions_correct(&self) -> bool {
            self.party_questions_correct.is_some()
        }

        // Param is passed by value, moved
        pub fn set_party_questions_correct(&mut self, v: u32) {
            self.party_questions_correct = ::std::option::Option::Some(v);
        }

        // optional uint32 party_questions_viewed = 4;

        pub fn party_questions_viewed(&self) -> u32 {
            self.party_questions_viewed.unwrap_or(0)
        }

        pub fn clear_party_questions_viewed(&mut self) {
            self.party_questions_viewed = ::std::option::Option::None;
        }

        pub fn has_party_questions_viewed(&self) -> bool {
            self.party_questions_viewed.is_some()
        }

        // Param is passed by value, moved
        pub fn set_party_questions_viewed(&mut self, v: u32) {
            self.party_questions_viewed = ::std::option::Option::Some(v);
        }

        // optional uint32 party_trivia_points = 5;

        pub fn party_trivia_points(&self) -> u32 {
            self.party_trivia_points.unwrap_or(0)
        }

        pub fn clear_party_trivia_points(&mut self) {
            self.party_trivia_points = ::std::option::Option::None;
        }

        pub fn has_party_trivia_points(&self) -> bool {
            self.party_trivia_points.is_some()
        }

        // Param is passed by value, moved
        pub fn set_party_trivia_points(&mut self, v: u32) {
            self.party_trivia_points = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for TriviaAnswered {
        const NAME: &'static str = "TriviaAnswered";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.question_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.answer_index = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.party_questions_correct = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.party_questions_viewed = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    40 => {
                        self.party_trivia_points = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.question_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.answer_index {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.party_questions_correct {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.party_questions_viewed {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
            }
            if let Some(v) = self.party_trivia_points {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.question_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.answer_index {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.party_questions_correct {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.party_questions_viewed {
                os.write_uint32(4, v)?;
            }
            if let Some(v) = self.party_trivia_points {
                os.write_uint32(5, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> TriviaAnswered {
            TriviaAnswered::new()
        }

        fn clear(&mut self) {
            self.question_id = ::std::option::Option::None;
            self.answer_index = ::std::option::Option::None;
            self.party_questions_correct = ::std::option::Option::None;
            self.party_questions_viewed = ::std::option::Option::None;
            self.party_trivia_points = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static TriviaAnswered {
            static instance: TriviaAnswered = TriviaAnswered {
                question_id: ::std::option::Option::None,
                answer_index: ::std::option::Option::None,
                party_questions_correct: ::std::option::Option::None,
                party_questions_viewed: ::std::option::Option::None,
                party_trivia_points: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgDOTAChatMessage.PlayerDraftPick)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PlayerDraftPick {
        // message fields
        // @@protoc_insertion_point(field:CMsgDOTAChatMessage.PlayerDraftPick.player_id)
        pub player_id: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgDOTAChatMessage.PlayerDraftPick.team)
        pub team: ::std::option::Option<i32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDOTAChatMessage.PlayerDraftPick.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PlayerDraftPick {
        fn default() -> &'a PlayerDraftPick {
            <PlayerDraftPick as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl PlayerDraftPick {
        pub fn new() -> PlayerDraftPick {
            ::std::default::Default::default()
        }

        // optional int32 player_id = 1;

        pub fn player_id(&self) -> i32 {
            self.player_id.unwrap_or(-1i32)
        }

        pub fn clear_player_id(&mut self) {
            self.player_id = ::std::option::Option::None;
        }

        pub fn has_player_id(&self) -> bool {
            self.player_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_player_id(&mut self, v: i32) {
            self.player_id = ::std::option::Option::Some(v);
        }

        // optional int32 team = 2;

        pub fn team(&self) -> i32 {
            self.team.unwrap_or(0)
        }

        pub fn clear_team(&mut self) {
            self.team = ::std::option::Option::None;
        }

        pub fn has_team(&self) -> bool {
            self.team.is_some()
        }

        // Param is passed by value, moved
        pub fn set_team(&mut self, v: i32) {
            self.team = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for PlayerDraftPick {
        const NAME: &'static str = "PlayerDraftPick";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.player_id = ::std::option::Option::Some(is.read_int32()?);
                    },
                    16 => {
                        self.team = ::std::option::Option::Some(is.read_int32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.player_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v);
            }
            if let Some(v) = self.team {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(2, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.player_id {
                os.write_int32(1, v)?;
            }
            if let Some(v) = self.team {
                os.write_int32(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PlayerDraftPick {
            PlayerDraftPick::new()
        }

        fn clear(&mut self) {
            self.player_id = ::std::option::Option::None;
            self.team = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PlayerDraftPick {
            static instance: PlayerDraftPick = PlayerDraftPick {
                player_id: ::std::option::Option::None,
                team: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgDOTAChatMessage.ChatWheelMessage)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ChatWheelMessage {
        // message fields
        // @@protoc_insertion_point(field:CMsgDOTAChatMessage.ChatWheelMessage.message_id)
        pub message_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTAChatMessage.ChatWheelMessage.emoticon_id)
        pub emoticon_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTAChatMessage.ChatWheelMessage.message_text)
        pub message_text: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgDOTAChatMessage.ChatWheelMessage.hero_badge_tier)
        pub hero_badge_tier: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDOTAChatMessage.ChatWheelMessage.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ChatWheelMessage {
        fn default() -> &'a ChatWheelMessage {
            <ChatWheelMessage as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl ChatWheelMessage {
        pub fn new() -> ChatWheelMessage {
            ::std::default::Default::default()
        }

        // optional uint32 message_id = 1;

        pub fn message_id(&self) -> u32 {
            self.message_id.unwrap_or(4294967295u32)
        }

        pub fn clear_message_id(&mut self) {
            self.message_id = ::std::option::Option::None;
        }

        pub fn has_message_id(&self) -> bool {
            self.message_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_message_id(&mut self, v: u32) {
            self.message_id = ::std::option::Option::Some(v);
        }

        // optional uint32 emoticon_id = 2;

        pub fn emoticon_id(&self) -> u32 {
            self.emoticon_id.unwrap_or(0)
        }

        pub fn clear_emoticon_id(&mut self) {
            self.emoticon_id = ::std::option::Option::None;
        }

        pub fn has_emoticon_id(&self) -> bool {
            self.emoticon_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_emoticon_id(&mut self, v: u32) {
            self.emoticon_id = ::std::option::Option::Some(v);
        }

        // optional string message_text = 3;

        pub fn message_text(&self) -> &str {
            match self.message_text.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_message_text(&mut self) {
            self.message_text = ::std::option::Option::None;
        }

        pub fn has_message_text(&self) -> bool {
            self.message_text.is_some()
        }

        // Param is passed by value, moved
        pub fn set_message_text(&mut self, v: ::std::string::String) {
            self.message_text = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_message_text(&mut self) -> &mut ::std::string::String {
            if self.message_text.is_none() {
                self.message_text = ::std::option::Option::Some(::std::string::String::new());
            }
            self.message_text.as_mut().unwrap()
        }

        // Take field
        pub fn take_message_text(&mut self) -> ::std::string::String {
            self.message_text.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional uint32 hero_badge_tier = 4;

        pub fn hero_badge_tier(&self) -> u32 {
            self.hero_badge_tier.unwrap_or(0)
        }

        pub fn clear_hero_badge_tier(&mut self) {
            self.hero_badge_tier = ::std::option::Option::None;
        }

        pub fn has_hero_badge_tier(&self) -> bool {
            self.hero_badge_tier.is_some()
        }

        // Param is passed by value, moved
        pub fn set_hero_badge_tier(&mut self, v: u32) {
            self.hero_badge_tier = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for ChatWheelMessage {
        const NAME: &'static str = "ChatWheelMessage";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.message_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.emoticon_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    26 => {
                        self.message_text = ::std::option::Option::Some(is.read_string()?);
                    },
                    32 => {
                        self.hero_badge_tier = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.message_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.emoticon_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.message_text.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(3, &v);
            }
            if let Some(v) = self.hero_badge_tier {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.message_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.emoticon_id {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.message_text.as_ref() {
                os.write_string(3, v)?;
            }
            if let Some(v) = self.hero_badge_tier {
                os.write_uint32(4, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ChatWheelMessage {
            ChatWheelMessage::new()
        }

        fn clear(&mut self) {
            self.message_id = ::std::option::Option::None;
            self.emoticon_id = ::std::option::Option::None;
            self.message_text = ::std::option::Option::None;
            self.hero_badge_tier = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ChatWheelMessage {
            static instance: ChatWheelMessage = ChatWheelMessage {
                message_id: ::std::option::Option::None,
                emoticon_id: ::std::option::Option::None,
                message_text: ::std::option::Option::None,
                hero_badge_tier: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgDOTAChatMember)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAChatMember {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTAChatMember.steam_id)
    pub steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMember.persona_name)
    pub persona_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMember.channel_user_id)
    pub channel_user_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAChatMember.status)
    pub status: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTAChatMember.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAChatMember {
    fn default() -> &'a CMsgDOTAChatMember {
        <CMsgDOTAChatMember as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAChatMember {
    pub fn new() -> CMsgDOTAChatMember {
        ::std::default::Default::default()
    }

    // optional fixed64 steam_id = 1;

    pub fn steam_id(&self) -> u64 {
        self.steam_id.unwrap_or(0)
    }

    pub fn clear_steam_id(&mut self) {
        self.steam_id = ::std::option::Option::None;
    }

    pub fn has_steam_id(&self) -> bool {
        self.steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_id(&mut self, v: u64) {
        self.steam_id = ::std::option::Option::Some(v);
    }

    // optional string persona_name = 2;

    pub fn persona_name(&self) -> &str {
        match self.persona_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_persona_name(&mut self) {
        self.persona_name = ::std::option::Option::None;
    }

    pub fn has_persona_name(&self) -> bool {
        self.persona_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_persona_name(&mut self, v: ::std::string::String) {
        self.persona_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_persona_name(&mut self) -> &mut ::std::string::String {
        if self.persona_name.is_none() {
            self.persona_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.persona_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_persona_name(&mut self) -> ::std::string::String {
        self.persona_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 channel_user_id = 3;

    pub fn channel_user_id(&self) -> u32 {
        self.channel_user_id.unwrap_or(0)
    }

    pub fn clear_channel_user_id(&mut self) {
        self.channel_user_id = ::std::option::Option::None;
    }

    pub fn has_channel_user_id(&self) -> bool {
        self.channel_user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_user_id(&mut self, v: u32) {
        self.channel_user_id = ::std::option::Option::Some(v);
    }

    // optional uint32 status = 4;

    pub fn status(&self) -> u32 {
        self.status.unwrap_or(0)
    }

    pub fn clear_status(&mut self) {
        self.status = ::std::option::Option::None;
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: u32) {
        self.status = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTAChatMember {
    const NAME: &'static str = "CMsgDOTAChatMember";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                18 => {
                    self.persona_name = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.channel_user_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.status = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.persona_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.channel_user_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.status {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.steam_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.persona_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.channel_user_id {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.status {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAChatMember {
        CMsgDOTAChatMember::new()
    }

    fn clear(&mut self) {
        self.steam_id = ::std::option::Option::None;
        self.persona_name = ::std::option::Option::None;
        self.channel_user_id = ::std::option::Option::None;
        self.status = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAChatMember {
        static instance: CMsgDOTAChatMember = CMsgDOTAChatMember {
            steam_id: ::std::option::Option::None,
            persona_name: ::std::option::Option::None,
            channel_user_id: ::std::option::Option::None,
            status: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTAJoinChatChannelResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAJoinChatChannelResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTAJoinChatChannelResponse.response)
    pub response: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAJoinChatChannelResponse.channel_name)
    pub channel_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTAJoinChatChannelResponse.channel_id)
    pub channel_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgDOTAJoinChatChannelResponse.max_members)
    pub max_members: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAJoinChatChannelResponse.members)
    pub members: ::std::vec::Vec<CMsgDOTAChatMember>,
    // @@protoc_insertion_point(field:CMsgDOTAJoinChatChannelResponse.channel_type)
    pub channel_type: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<super::dota_shared_enums::DOTAChatChannelType_t>>,
    // @@protoc_insertion_point(field:CMsgDOTAJoinChatChannelResponse.result)
    pub result: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_dotajoin_chat_channel_response::Result>>,
    // @@protoc_insertion_point(field:CMsgDOTAJoinChatChannelResponse.gc_initiated_join)
    pub gc_initiated_join: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgDOTAJoinChatChannelResponse.channel_user_id)
    pub channel_user_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAJoinChatChannelResponse.welcome_message)
    pub welcome_message: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTAJoinChatChannelResponse.special_privileges)
    pub special_privileges: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<super::dota_shared_enums::EChatSpecialPrivileges>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTAJoinChatChannelResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAJoinChatChannelResponse {
    fn default() -> &'a CMsgDOTAJoinChatChannelResponse {
        <CMsgDOTAJoinChatChannelResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAJoinChatChannelResponse {
    pub fn new() -> CMsgDOTAJoinChatChannelResponse {
        ::std::default::Default::default()
    }

    // optional uint32 response = 1;

    pub fn response(&self) -> u32 {
        self.response.unwrap_or(0)
    }

    pub fn clear_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: u32) {
        self.response = ::std::option::Option::Some(v);
    }

    // optional string channel_name = 2;

    pub fn channel_name(&self) -> &str {
        match self.channel_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_channel_name(&mut self) {
        self.channel_name = ::std::option::Option::None;
    }

    pub fn has_channel_name(&self) -> bool {
        self.channel_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_name(&mut self, v: ::std::string::String) {
        self.channel_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_channel_name(&mut self) -> &mut ::std::string::String {
        if self.channel_name.is_none() {
            self.channel_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.channel_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_channel_name(&mut self) -> ::std::string::String {
        self.channel_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed64 channel_id = 3;

    pub fn channel_id(&self) -> u64 {
        self.channel_id.unwrap_or(0)
    }

    pub fn clear_channel_id(&mut self) {
        self.channel_id = ::std::option::Option::None;
    }

    pub fn has_channel_id(&self) -> bool {
        self.channel_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_id(&mut self, v: u64) {
        self.channel_id = ::std::option::Option::Some(v);
    }

    // optional uint32 max_members = 4;

    pub fn max_members(&self) -> u32 {
        self.max_members.unwrap_or(0)
    }

    pub fn clear_max_members(&mut self) {
        self.max_members = ::std::option::Option::None;
    }

    pub fn has_max_members(&self) -> bool {
        self.max_members.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_members(&mut self, v: u32) {
        self.max_members = ::std::option::Option::Some(v);
    }

    // optional .DOTAChatChannelType_t channel_type = 6;

    pub fn channel_type(&self) -> super::dota_shared_enums::DOTAChatChannelType_t {
        match self.channel_type {
            Some(e) => e.enum_value_or(super::dota_shared_enums::DOTAChatChannelType_t::DOTAChannelType_Regional),
            None => super::dota_shared_enums::DOTAChatChannelType_t::DOTAChannelType_Regional,
        }
    }

    pub fn clear_channel_type(&mut self) {
        self.channel_type = ::std::option::Option::None;
    }

    pub fn has_channel_type(&self) -> bool {
        self.channel_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_type(&mut self, v: super::dota_shared_enums::DOTAChatChannelType_t) {
        self.channel_type = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional .CMsgDOTAJoinChatChannelResponse.Result result = 7;

    pub fn result(&self) -> cmsg_dotajoin_chat_channel_response::Result {
        match self.result {
            Some(e) => e.enum_value_or(cmsg_dotajoin_chat_channel_response::Result::JOIN_SUCCESS),
            None => cmsg_dotajoin_chat_channel_response::Result::JOIN_SUCCESS,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: cmsg_dotajoin_chat_channel_response::Result) {
        self.result = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional bool gc_initiated_join = 8;

    pub fn gc_initiated_join(&self) -> bool {
        self.gc_initiated_join.unwrap_or(false)
    }

    pub fn clear_gc_initiated_join(&mut self) {
        self.gc_initiated_join = ::std::option::Option::None;
    }

    pub fn has_gc_initiated_join(&self) -> bool {
        self.gc_initiated_join.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gc_initiated_join(&mut self, v: bool) {
        self.gc_initiated_join = ::std::option::Option::Some(v);
    }

    // optional uint32 channel_user_id = 9;

    pub fn channel_user_id(&self) -> u32 {
        self.channel_user_id.unwrap_or(0)
    }

    pub fn clear_channel_user_id(&mut self) {
        self.channel_user_id = ::std::option::Option::None;
    }

    pub fn has_channel_user_id(&self) -> bool {
        self.channel_user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_user_id(&mut self, v: u32) {
        self.channel_user_id = ::std::option::Option::Some(v);
    }

    // optional string welcome_message = 10;

    pub fn welcome_message(&self) -> &str {
        match self.welcome_message.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_welcome_message(&mut self) {
        self.welcome_message = ::std::option::Option::None;
    }

    pub fn has_welcome_message(&self) -> bool {
        self.welcome_message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_welcome_message(&mut self, v: ::std::string::String) {
        self.welcome_message = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_welcome_message(&mut self) -> &mut ::std::string::String {
        if self.welcome_message.is_none() {
            self.welcome_message = ::std::option::Option::Some(::std::string::String::new());
        }
        self.welcome_message.as_mut().unwrap()
    }

    // Take field
    pub fn take_welcome_message(&mut self) -> ::std::string::String {
        self.welcome_message.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .EChatSpecialPrivileges special_privileges = 11;

    pub fn special_privileges(&self) -> super::dota_shared_enums::EChatSpecialPrivileges {
        match self.special_privileges {
            Some(e) => e.enum_value_or(super::dota_shared_enums::EChatSpecialPrivileges::k_EChatSpecialPrivileges_None),
            None => super::dota_shared_enums::EChatSpecialPrivileges::k_EChatSpecialPrivileges_None,
        }
    }

    pub fn clear_special_privileges(&mut self) {
        self.special_privileges = ::std::option::Option::None;
    }

    pub fn has_special_privileges(&self) -> bool {
        self.special_privileges.is_some()
    }

    // Param is passed by value, moved
    pub fn set_special_privileges(&mut self, v: super::dota_shared_enums::EChatSpecialPrivileges) {
        self.special_privileges = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTAJoinChatChannelResponse {
    const NAME: &'static str = "CMsgDOTAJoinChatChannelResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.response = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.channel_name = ::std::option::Option::Some(is.read_string()?);
                },
                25 => {
                    self.channel_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                32 => {
                    self.max_members = ::std::option::Option::Some(is.read_uint32()?);
                },
                42 => {
                    self.members.push(is.read_message()?);
                },
                48 => {
                    self.channel_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                56 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                64 => {
                    self.gc_initiated_join = ::std::option::Option::Some(is.read_bool()?);
                },
                72 => {
                    self.channel_user_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                82 => {
                    self.welcome_message = ::std::option::Option::Some(is.read_string()?);
                },
                88 => {
                    self.special_privileges = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.response {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.channel_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.channel_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.max_members {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
        }
        for value in &self.members {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.channel_type {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(6, v.value());
        }
        if let Some(v) = self.result {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(7, v.value());
        }
        if let Some(v) = self.gc_initiated_join {
            my_size += 1 + 1;
        }
        if let Some(v) = self.channel_user_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(9, v);
        }
        if let Some(v) = self.welcome_message.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(10, &v);
        }
        if let Some(v) = self.special_privileges {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(11, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.response {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.channel_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.channel_id {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.max_members {
            os.write_uint32(4, v)?;
        }
        for v in &self.members {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if let Some(v) = self.channel_type {
            os.write_enum(6, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.result {
            os.write_enum(7, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.gc_initiated_join {
            os.write_bool(8, v)?;
        }
        if let Some(v) = self.channel_user_id {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.welcome_message.as_ref() {
            os.write_string(10, v)?;
        }
        if let Some(v) = self.special_privileges {
            os.write_enum(11, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAJoinChatChannelResponse {
        CMsgDOTAJoinChatChannelResponse::new()
    }

    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.channel_name = ::std::option::Option::None;
        self.channel_id = ::std::option::Option::None;
        self.max_members = ::std::option::Option::None;
        self.members.clear();
        self.channel_type = ::std::option::Option::None;
        self.result = ::std::option::Option::None;
        self.gc_initiated_join = ::std::option::Option::None;
        self.channel_user_id = ::std::option::Option::None;
        self.welcome_message = ::std::option::Option::None;
        self.special_privileges = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAJoinChatChannelResponse {
        static instance: CMsgDOTAJoinChatChannelResponse = CMsgDOTAJoinChatChannelResponse {
            response: ::std::option::Option::None,
            channel_name: ::std::option::Option::None,
            channel_id: ::std::option::Option::None,
            max_members: ::std::option::Option::None,
            members: ::std::vec::Vec::new(),
            channel_type: ::std::option::Option::None,
            result: ::std::option::Option::None,
            gc_initiated_join: ::std::option::Option::None,
            channel_user_id: ::std::option::Option::None,
            welcome_message: ::std::option::Option::None,
            special_privileges: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgDOTAJoinChatChannelResponse`
pub mod cmsg_dotajoin_chat_channel_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgDOTAJoinChatChannelResponse.Result)
    pub enum Result {
        // @@protoc_insertion_point(enum_value:CMsgDOTAJoinChatChannelResponse.Result.JOIN_SUCCESS)
        JOIN_SUCCESS = 0,
        // @@protoc_insertion_point(enum_value:CMsgDOTAJoinChatChannelResponse.Result.INVALID_CHANNEL_TYPE)
        INVALID_CHANNEL_TYPE = 1,
        // @@protoc_insertion_point(enum_value:CMsgDOTAJoinChatChannelResponse.Result.ACCOUNT_NOT_FOUND)
        ACCOUNT_NOT_FOUND = 2,
        // @@protoc_insertion_point(enum_value:CMsgDOTAJoinChatChannelResponse.Result.ACH_FAILED)
        ACH_FAILED = 3,
        // @@protoc_insertion_point(enum_value:CMsgDOTAJoinChatChannelResponse.Result.USER_IN_TOO_MANY_CHANNELS)
        USER_IN_TOO_MANY_CHANNELS = 4,
        // @@protoc_insertion_point(enum_value:CMsgDOTAJoinChatChannelResponse.Result.RATE_LIMIT_EXCEEDED)
        RATE_LIMIT_EXCEEDED = 5,
        // @@protoc_insertion_point(enum_value:CMsgDOTAJoinChatChannelResponse.Result.CHANNEL_FULL)
        CHANNEL_FULL = 6,
        // @@protoc_insertion_point(enum_value:CMsgDOTAJoinChatChannelResponse.Result.CHANNEL_FULL_OVERFLOWED)
        CHANNEL_FULL_OVERFLOWED = 7,
        // @@protoc_insertion_point(enum_value:CMsgDOTAJoinChatChannelResponse.Result.FAILED_TO_ADD_USER)
        FAILED_TO_ADD_USER = 8,
        // @@protoc_insertion_point(enum_value:CMsgDOTAJoinChatChannelResponse.Result.CHANNEL_TYPE_DISABLED)
        CHANNEL_TYPE_DISABLED = 9,
        // @@protoc_insertion_point(enum_value:CMsgDOTAJoinChatChannelResponse.Result.PRIVATE_CHAT_CREATE_FAILED)
        PRIVATE_CHAT_CREATE_FAILED = 10,
        // @@protoc_insertion_point(enum_value:CMsgDOTAJoinChatChannelResponse.Result.PRIVATE_CHAT_NO_PERMISSION)
        PRIVATE_CHAT_NO_PERMISSION = 11,
        // @@protoc_insertion_point(enum_value:CMsgDOTAJoinChatChannelResponse.Result.PRIVATE_CHAT_CREATE_LOCK_FAILED)
        PRIVATE_CHAT_CREATE_LOCK_FAILED = 12,
        // @@protoc_insertion_point(enum_value:CMsgDOTAJoinChatChannelResponse.Result.PRIVATE_CHAT_KICKED)
        PRIVATE_CHAT_KICKED = 13,
        // @@protoc_insertion_point(enum_value:CMsgDOTAJoinChatChannelResponse.Result.USER_NOT_ALLOWED)
        USER_NOT_ALLOWED = 14,
        // @@protoc_insertion_point(enum_value:CMsgDOTAJoinChatChannelResponse.Result.ENSURE_SPECIAL_PRIVILEGES_FAILED)
        ENSURE_SPECIAL_PRIVILEGES_FAILED = 15,
        // @@protoc_insertion_point(enum_value:CMsgDOTAJoinChatChannelResponse.Result.NEW_PLAYER_USER_NOT_ELIGIBLE)
        NEW_PLAYER_USER_NOT_ELIGIBLE = 16,
        // @@protoc_insertion_point(enum_value:CMsgDOTAJoinChatChannelResponse.Result.SILENT_ERROR)
        SILENT_ERROR = 17,
        // @@protoc_insertion_point(enum_value:CMsgDOTAJoinChatChannelResponse.Result.NEW_PLAYER_USER_BANNED)
        NEW_PLAYER_USER_BANNED = 18,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for Result {
        const NAME: &'static str = "Result";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Result> {
            match value {
                0 => ::std::option::Option::Some(Result::JOIN_SUCCESS),
                1 => ::std::option::Option::Some(Result::INVALID_CHANNEL_TYPE),
                2 => ::std::option::Option::Some(Result::ACCOUNT_NOT_FOUND),
                3 => ::std::option::Option::Some(Result::ACH_FAILED),
                4 => ::std::option::Option::Some(Result::USER_IN_TOO_MANY_CHANNELS),
                5 => ::std::option::Option::Some(Result::RATE_LIMIT_EXCEEDED),
                6 => ::std::option::Option::Some(Result::CHANNEL_FULL),
                7 => ::std::option::Option::Some(Result::CHANNEL_FULL_OVERFLOWED),
                8 => ::std::option::Option::Some(Result::FAILED_TO_ADD_USER),
                9 => ::std::option::Option::Some(Result::CHANNEL_TYPE_DISABLED),
                10 => ::std::option::Option::Some(Result::PRIVATE_CHAT_CREATE_FAILED),
                11 => ::std::option::Option::Some(Result::PRIVATE_CHAT_NO_PERMISSION),
                12 => ::std::option::Option::Some(Result::PRIVATE_CHAT_CREATE_LOCK_FAILED),
                13 => ::std::option::Option::Some(Result::PRIVATE_CHAT_KICKED),
                14 => ::std::option::Option::Some(Result::USER_NOT_ALLOWED),
                15 => ::std::option::Option::Some(Result::ENSURE_SPECIAL_PRIVILEGES_FAILED),
                16 => ::std::option::Option::Some(Result::NEW_PLAYER_USER_NOT_ELIGIBLE),
                17 => ::std::option::Option::Some(Result::SILENT_ERROR),
                18 => ::std::option::Option::Some(Result::NEW_PLAYER_USER_BANNED),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Result> {
            match str {
                "JOIN_SUCCESS" => ::std::option::Option::Some(Result::JOIN_SUCCESS),
                "INVALID_CHANNEL_TYPE" => ::std::option::Option::Some(Result::INVALID_CHANNEL_TYPE),
                "ACCOUNT_NOT_FOUND" => ::std::option::Option::Some(Result::ACCOUNT_NOT_FOUND),
                "ACH_FAILED" => ::std::option::Option::Some(Result::ACH_FAILED),
                "USER_IN_TOO_MANY_CHANNELS" => ::std::option::Option::Some(Result::USER_IN_TOO_MANY_CHANNELS),
                "RATE_LIMIT_EXCEEDED" => ::std::option::Option::Some(Result::RATE_LIMIT_EXCEEDED),
                "CHANNEL_FULL" => ::std::option::Option::Some(Result::CHANNEL_FULL),
                "CHANNEL_FULL_OVERFLOWED" => ::std::option::Option::Some(Result::CHANNEL_FULL_OVERFLOWED),
                "FAILED_TO_ADD_USER" => ::std::option::Option::Some(Result::FAILED_TO_ADD_USER),
                "CHANNEL_TYPE_DISABLED" => ::std::option::Option::Some(Result::CHANNEL_TYPE_DISABLED),
                "PRIVATE_CHAT_CREATE_FAILED" => ::std::option::Option::Some(Result::PRIVATE_CHAT_CREATE_FAILED),
                "PRIVATE_CHAT_NO_PERMISSION" => ::std::option::Option::Some(Result::PRIVATE_CHAT_NO_PERMISSION),
                "PRIVATE_CHAT_CREATE_LOCK_FAILED" => ::std::option::Option::Some(Result::PRIVATE_CHAT_CREATE_LOCK_FAILED),
                "PRIVATE_CHAT_KICKED" => ::std::option::Option::Some(Result::PRIVATE_CHAT_KICKED),
                "USER_NOT_ALLOWED" => ::std::option::Option::Some(Result::USER_NOT_ALLOWED),
                "ENSURE_SPECIAL_PRIVILEGES_FAILED" => ::std::option::Option::Some(Result::ENSURE_SPECIAL_PRIVILEGES_FAILED),
                "NEW_PLAYER_USER_NOT_ELIGIBLE" => ::std::option::Option::Some(Result::NEW_PLAYER_USER_NOT_ELIGIBLE),
                "SILENT_ERROR" => ::std::option::Option::Some(Result::SILENT_ERROR),
                "NEW_PLAYER_USER_BANNED" => ::std::option::Option::Some(Result::NEW_PLAYER_USER_BANNED),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Result] = &[
            Result::JOIN_SUCCESS,
            Result::INVALID_CHANNEL_TYPE,
            Result::ACCOUNT_NOT_FOUND,
            Result::ACH_FAILED,
            Result::USER_IN_TOO_MANY_CHANNELS,
            Result::RATE_LIMIT_EXCEEDED,
            Result::CHANNEL_FULL,
            Result::CHANNEL_FULL_OVERFLOWED,
            Result::FAILED_TO_ADD_USER,
            Result::CHANNEL_TYPE_DISABLED,
            Result::PRIVATE_CHAT_CREATE_FAILED,
            Result::PRIVATE_CHAT_NO_PERMISSION,
            Result::PRIVATE_CHAT_CREATE_LOCK_FAILED,
            Result::PRIVATE_CHAT_KICKED,
            Result::USER_NOT_ALLOWED,
            Result::ENSURE_SPECIAL_PRIVILEGES_FAILED,
            Result::NEW_PLAYER_USER_NOT_ELIGIBLE,
            Result::SILENT_ERROR,
            Result::NEW_PLAYER_USER_BANNED,
        ];
    }

    impl ::std::default::Default for Result {
        fn default() -> Self {
            Result::JOIN_SUCCESS
        }
    }

}

// @@protoc_insertion_point(message:CMsgDOTAOtherJoinedChatChannel)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAOtherJoinedChatChannel {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTAOtherJoinedChatChannel.channel_id)
    pub channel_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgDOTAOtherJoinedChatChannel.persona_name)
    pub persona_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTAOtherJoinedChatChannel.steam_id)
    pub steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgDOTAOtherJoinedChatChannel.channel_user_id)
    pub channel_user_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgDOTAOtherJoinedChatChannel.status)
    pub status: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTAOtherJoinedChatChannel.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAOtherJoinedChatChannel {
    fn default() -> &'a CMsgDOTAOtherJoinedChatChannel {
        <CMsgDOTAOtherJoinedChatChannel as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAOtherJoinedChatChannel {
    pub fn new() -> CMsgDOTAOtherJoinedChatChannel {
        ::std::default::Default::default()
    }

    // optional fixed64 channel_id = 1;

    pub fn channel_id(&self) -> u64 {
        self.channel_id.unwrap_or(0)
    }

    pub fn clear_channel_id(&mut self) {
        self.channel_id = ::std::option::Option::None;
    }

    pub fn has_channel_id(&self) -> bool {
        self.channel_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_id(&mut self, v: u64) {
        self.channel_id = ::std::option::Option::Some(v);
    }

    // optional string persona_name = 2;

    pub fn persona_name(&self) -> &str {
        match self.persona_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_persona_name(&mut self) {
        self.persona_name = ::std::option::Option::None;
    }

    pub fn has_persona_name(&self) -> bool {
        self.persona_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_persona_name(&mut self, v: ::std::string::String) {
        self.persona_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_persona_name(&mut self) -> &mut ::std::string::String {
        if self.persona_name.is_none() {
            self.persona_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.persona_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_persona_name(&mut self) -> ::std::string::String {
        self.persona_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed64 steam_id = 3;

    pub fn steam_id(&self) -> u64 {
        self.steam_id.unwrap_or(0)
    }

    pub fn clear_steam_id(&mut self) {
        self.steam_id = ::std::option::Option::None;
    }

    pub fn has_steam_id(&self) -> bool {
        self.steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_id(&mut self, v: u64) {
        self.steam_id = ::std::option::Option::Some(v);
    }

    // optional uint32 channel_user_id = 4;

    pub fn channel_user_id(&self) -> u32 {
        self.channel_user_id.unwrap_or(0)
    }

    pub fn clear_channel_user_id(&mut self) {
        self.channel_user_id = ::std::option::Option::None;
    }

    pub fn has_channel_user_id(&self) -> bool {
        self.channel_user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_user_id(&mut self, v: u32) {
        self.channel_user_id = ::std::option::Option::Some(v);
    }

    // optional uint32 status = 5;

    pub fn status(&self) -> u32 {
        self.status.unwrap_or(0)
    }

    pub fn clear_status(&mut self) {
        self.status = ::std::option::Option::None;
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: u32) {
        self.status = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTAOtherJoinedChatChannel {
    const NAME: &'static str = "CMsgDOTAOtherJoinedChatChannel";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.channel_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                18 => {
                    self.persona_name = ::std::option::Option::Some(is.read_string()?);
                },
                25 => {
                    self.steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                32 => {
                    self.channel_user_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.status = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.channel_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.persona_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.channel_user_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.status {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.channel_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.persona_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.steam_id {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.channel_user_id {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.status {
            os.write_uint32(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAOtherJoinedChatChannel {
        CMsgDOTAOtherJoinedChatChannel::new()
    }

    fn clear(&mut self) {
        self.channel_id = ::std::option::Option::None;
        self.persona_name = ::std::option::Option::None;
        self.steam_id = ::std::option::Option::None;
        self.channel_user_id = ::std::option::Option::None;
        self.status = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAOtherJoinedChatChannel {
        static instance: CMsgDOTAOtherJoinedChatChannel = CMsgDOTAOtherJoinedChatChannel {
            channel_id: ::std::option::Option::None,
            persona_name: ::std::option::Option::None,
            steam_id: ::std::option::Option::None,
            channel_user_id: ::std::option::Option::None,
            status: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTAOtherLeftChatChannel)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAOtherLeftChatChannel {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTAOtherLeftChatChannel.channel_id)
    pub channel_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgDOTAOtherLeftChatChannel.steam_id)
    pub steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgDOTAOtherLeftChatChannel.channel_user_id)
    pub channel_user_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTAOtherLeftChatChannel.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAOtherLeftChatChannel {
    fn default() -> &'a CMsgDOTAOtherLeftChatChannel {
        <CMsgDOTAOtherLeftChatChannel as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAOtherLeftChatChannel {
    pub fn new() -> CMsgDOTAOtherLeftChatChannel {
        ::std::default::Default::default()
    }

    // optional fixed64 channel_id = 1;

    pub fn channel_id(&self) -> u64 {
        self.channel_id.unwrap_or(0)
    }

    pub fn clear_channel_id(&mut self) {
        self.channel_id = ::std::option::Option::None;
    }

    pub fn has_channel_id(&self) -> bool {
        self.channel_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_id(&mut self, v: u64) {
        self.channel_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 steam_id = 2;

    pub fn steam_id(&self) -> u64 {
        self.steam_id.unwrap_or(0)
    }

    pub fn clear_steam_id(&mut self) {
        self.steam_id = ::std::option::Option::None;
    }

    pub fn has_steam_id(&self) -> bool {
        self.steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_id(&mut self, v: u64) {
        self.steam_id = ::std::option::Option::Some(v);
    }

    // optional uint32 channel_user_id = 3;

    pub fn channel_user_id(&self) -> u32 {
        self.channel_user_id.unwrap_or(0)
    }

    pub fn clear_channel_user_id(&mut self) {
        self.channel_user_id = ::std::option::Option::None;
    }

    pub fn has_channel_user_id(&self) -> bool {
        self.channel_user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_user_id(&mut self, v: u32) {
        self.channel_user_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTAOtherLeftChatChannel {
    const NAME: &'static str = "CMsgDOTAOtherLeftChatChannel";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.channel_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                24 => {
                    self.channel_user_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.channel_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.channel_user_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.channel_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.steam_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.channel_user_id {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAOtherLeftChatChannel {
        CMsgDOTAOtherLeftChatChannel::new()
    }

    fn clear(&mut self) {
        self.channel_id = ::std::option::Option::None;
        self.steam_id = ::std::option::Option::None;
        self.channel_user_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAOtherLeftChatChannel {
        static instance: CMsgDOTAOtherLeftChatChannel = CMsgDOTAOtherLeftChatChannel {
            channel_id: ::std::option::Option::None,
            steam_id: ::std::option::Option::None,
            channel_user_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTARequestChatChannelList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTARequestChatChannelList {
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTARequestChatChannelList.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTARequestChatChannelList {
    fn default() -> &'a CMsgDOTARequestChatChannelList {
        <CMsgDOTARequestChatChannelList as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTARequestChatChannelList {
    pub fn new() -> CMsgDOTARequestChatChannelList {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTARequestChatChannelList {
    const NAME: &'static str = "CMsgDOTARequestChatChannelList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTARequestChatChannelList {
        CMsgDOTARequestChatChannelList::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTARequestChatChannelList {
        static instance: CMsgDOTARequestChatChannelList = CMsgDOTARequestChatChannelList {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTARequestChatChannelListResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTARequestChatChannelListResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTARequestChatChannelListResponse.channels)
    pub channels: ::std::vec::Vec<cmsg_dotarequest_chat_channel_list_response::ChatChannel>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTARequestChatChannelListResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTARequestChatChannelListResponse {
    fn default() -> &'a CMsgDOTARequestChatChannelListResponse {
        <CMsgDOTARequestChatChannelListResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTARequestChatChannelListResponse {
    pub fn new() -> CMsgDOTARequestChatChannelListResponse {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTARequestChatChannelListResponse {
    const NAME: &'static str = "CMsgDOTARequestChatChannelListResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.channels.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.channels {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.channels {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTARequestChatChannelListResponse {
        CMsgDOTARequestChatChannelListResponse::new()
    }

    fn clear(&mut self) {
        self.channels.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTARequestChatChannelListResponse {
        static instance: CMsgDOTARequestChatChannelListResponse = CMsgDOTARequestChatChannelListResponse {
            channels: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgDOTARequestChatChannelListResponse`
pub mod cmsg_dotarequest_chat_channel_list_response {
    // @@protoc_insertion_point(message:CMsgDOTARequestChatChannelListResponse.ChatChannel)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ChatChannel {
        // message fields
        // @@protoc_insertion_point(field:CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
        pub channel_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgDOTARequestChatChannelListResponse.ChatChannel.num_members)
        pub num_members: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_type)
        pub channel_type: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<super::super::dota_shared_enums::DOTAChatChannelType_t>>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDOTARequestChatChannelListResponse.ChatChannel.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ChatChannel {
        fn default() -> &'a ChatChannel {
            <ChatChannel as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl ChatChannel {
        pub fn new() -> ChatChannel {
            ::std::default::Default::default()
        }

        // optional string channel_name = 1;

        pub fn channel_name(&self) -> &str {
            match self.channel_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_channel_name(&mut self) {
            self.channel_name = ::std::option::Option::None;
        }

        pub fn has_channel_name(&self) -> bool {
            self.channel_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_channel_name(&mut self, v: ::std::string::String) {
            self.channel_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_channel_name(&mut self) -> &mut ::std::string::String {
            if self.channel_name.is_none() {
                self.channel_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.channel_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_channel_name(&mut self) -> ::std::string::String {
            self.channel_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional uint32 num_members = 2;

        pub fn num_members(&self) -> u32 {
            self.num_members.unwrap_or(0)
        }

        pub fn clear_num_members(&mut self) {
            self.num_members = ::std::option::Option::None;
        }

        pub fn has_num_members(&self) -> bool {
            self.num_members.is_some()
        }

        // Param is passed by value, moved
        pub fn set_num_members(&mut self, v: u32) {
            self.num_members = ::std::option::Option::Some(v);
        }

        // optional .DOTAChatChannelType_t channel_type = 3;

        pub fn channel_type(&self) -> super::super::dota_shared_enums::DOTAChatChannelType_t {
            match self.channel_type {
                Some(e) => e.enum_value_or(super::super::dota_shared_enums::DOTAChatChannelType_t::DOTAChannelType_Regional),
                None => super::super::dota_shared_enums::DOTAChatChannelType_t::DOTAChannelType_Regional,
            }
        }

        pub fn clear_channel_type(&mut self) {
            self.channel_type = ::std::option::Option::None;
        }

        pub fn has_channel_type(&self) -> bool {
            self.channel_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_channel_type(&mut self, v: super::super::dota_shared_enums::DOTAChatChannelType_t) {
            self.channel_type = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for ChatChannel {
        const NAME: &'static str = "ChatChannel";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.channel_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    16 => {
                        self.num_members = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.channel_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.channel_name.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.num_members {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.channel_type {
                my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(3, v.value());
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.channel_name.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.num_members {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.channel_type {
                os.write_enum(3, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ChatChannel {
            ChatChannel::new()
        }

        fn clear(&mut self) {
            self.channel_name = ::std::option::Option::None;
            self.num_members = ::std::option::Option::None;
            self.channel_type = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ChatChannel {
            static instance: ChatChannel = ChatChannel {
                channel_name: ::std::option::Option::None,
                num_members: ::std::option::Option::None,
                channel_type: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgDOTAChatGetUserListResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAChatGetUserListResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTAChatGetUserListResponse.channel_id)
    pub channel_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgDOTAChatGetUserListResponse.members)
    pub members: ::std::vec::Vec<cmsg_dotachat_get_user_list_response::Member>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTAChatGetUserListResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAChatGetUserListResponse {
    fn default() -> &'a CMsgDOTAChatGetUserListResponse {
        <CMsgDOTAChatGetUserListResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAChatGetUserListResponse {
    pub fn new() -> CMsgDOTAChatGetUserListResponse {
        ::std::default::Default::default()
    }

    // optional fixed64 channel_id = 1;

    pub fn channel_id(&self) -> u64 {
        self.channel_id.unwrap_or(0)
    }

    pub fn clear_channel_id(&mut self) {
        self.channel_id = ::std::option::Option::None;
    }

    pub fn has_channel_id(&self) -> bool {
        self.channel_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_id(&mut self, v: u64) {
        self.channel_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTAChatGetUserListResponse {
    const NAME: &'static str = "CMsgDOTAChatGetUserListResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.channel_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                18 => {
                    self.members.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.channel_id {
            my_size += 1 + 8;
        }
        for value in &self.members {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.channel_id {
            os.write_fixed64(1, v)?;
        }
        for v in &self.members {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAChatGetUserListResponse {
        CMsgDOTAChatGetUserListResponse::new()
    }

    fn clear(&mut self) {
        self.channel_id = ::std::option::Option::None;
        self.members.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAChatGetUserListResponse {
        static instance: CMsgDOTAChatGetUserListResponse = CMsgDOTAChatGetUserListResponse {
            channel_id: ::std::option::Option::None,
            members: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgDOTAChatGetUserListResponse`
pub mod cmsg_dotachat_get_user_list_response {
    // @@protoc_insertion_point(message:CMsgDOTAChatGetUserListResponse.Member)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Member {
        // message fields
        // @@protoc_insertion_point(field:CMsgDOTAChatGetUserListResponse.Member.steam_id)
        pub steam_id: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CMsgDOTAChatGetUserListResponse.Member.persona_name)
        pub persona_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgDOTAChatGetUserListResponse.Member.channel_user_id)
        pub channel_user_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgDOTAChatGetUserListResponse.Member.status)
        pub status: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDOTAChatGetUserListResponse.Member.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Member {
        fn default() -> &'a Member {
            <Member as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl Member {
        pub fn new() -> Member {
            ::std::default::Default::default()
        }

        // optional fixed64 steam_id = 1;

        pub fn steam_id(&self) -> u64 {
            self.steam_id.unwrap_or(0)
        }

        pub fn clear_steam_id(&mut self) {
            self.steam_id = ::std::option::Option::None;
        }

        pub fn has_steam_id(&self) -> bool {
            self.steam_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_steam_id(&mut self, v: u64) {
            self.steam_id = ::std::option::Option::Some(v);
        }

        // optional string persona_name = 2;

        pub fn persona_name(&self) -> &str {
            match self.persona_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_persona_name(&mut self) {
            self.persona_name = ::std::option::Option::None;
        }

        pub fn has_persona_name(&self) -> bool {
            self.persona_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_persona_name(&mut self, v: ::std::string::String) {
            self.persona_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_persona_name(&mut self) -> &mut ::std::string::String {
            if self.persona_name.is_none() {
                self.persona_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.persona_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_persona_name(&mut self) -> ::std::string::String {
            self.persona_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional uint32 channel_user_id = 3;

        pub fn channel_user_id(&self) -> u32 {
            self.channel_user_id.unwrap_or(0)
        }

        pub fn clear_channel_user_id(&mut self) {
            self.channel_user_id = ::std::option::Option::None;
        }

        pub fn has_channel_user_id(&self) -> bool {
            self.channel_user_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_channel_user_id(&mut self, v: u32) {
            self.channel_user_id = ::std::option::Option::Some(v);
        }

        // optional uint32 status = 4;

        pub fn status(&self) -> u32 {
            self.status.unwrap_or(0)
        }

        pub fn clear_status(&mut self) {
            self.status = ::std::option::Option::None;
        }

        pub fn has_status(&self) -> bool {
            self.status.is_some()
        }

        // Param is passed by value, moved
        pub fn set_status(&mut self, v: u32) {
            self.status = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for Member {
        const NAME: &'static str = "Member";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    9 => {
                        self.steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    18 => {
                        self.persona_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    24 => {
                        self.channel_user_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.status = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.steam_id {
                my_size += 1 + 8;
            }
            if let Some(v) = self.persona_name.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
            }
            if let Some(v) = self.channel_user_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.status {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.steam_id {
                os.write_fixed64(1, v)?;
            }
            if let Some(v) = self.persona_name.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.channel_user_id {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.status {
                os.write_uint32(4, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Member {
            Member::new()
        }

        fn clear(&mut self) {
            self.steam_id = ::std::option::Option::None;
            self.persona_name = ::std::option::Option::None;
            self.channel_user_id = ::std::option::Option::None;
            self.status = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Member {
            static instance: Member = Member {
                steam_id: ::std::option::Option::None,
                persona_name: ::std::option::Option::None,
                channel_user_id: ::std::option::Option::None,
                status: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgDOTAChatGetMemberCount)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAChatGetMemberCount {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTAChatGetMemberCount.channel_name)
    pub channel_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTAChatGetMemberCount.channel_type)
    pub channel_type: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<super::dota_shared_enums::DOTAChatChannelType_t>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTAChatGetMemberCount.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAChatGetMemberCount {
    fn default() -> &'a CMsgDOTAChatGetMemberCount {
        <CMsgDOTAChatGetMemberCount as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAChatGetMemberCount {
    pub fn new() -> CMsgDOTAChatGetMemberCount {
        ::std::default::Default::default()
    }

    // optional string channel_name = 1;

    pub fn channel_name(&self) -> &str {
        match self.channel_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_channel_name(&mut self) {
        self.channel_name = ::std::option::Option::None;
    }

    pub fn has_channel_name(&self) -> bool {
        self.channel_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_name(&mut self, v: ::std::string::String) {
        self.channel_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_channel_name(&mut self) -> &mut ::std::string::String {
        if self.channel_name.is_none() {
            self.channel_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.channel_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_channel_name(&mut self) -> ::std::string::String {
        self.channel_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .DOTAChatChannelType_t channel_type = 2;

    pub fn channel_type(&self) -> super::dota_shared_enums::DOTAChatChannelType_t {
        match self.channel_type {
            Some(e) => e.enum_value_or(super::dota_shared_enums::DOTAChatChannelType_t::DOTAChannelType_Regional),
            None => super::dota_shared_enums::DOTAChatChannelType_t::DOTAChannelType_Regional,
        }
    }

    pub fn clear_channel_type(&mut self) {
        self.channel_type = ::std::option::Option::None;
    }

    pub fn has_channel_type(&self) -> bool {
        self.channel_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_type(&mut self, v: super::dota_shared_enums::DOTAChatChannelType_t) {
        self.channel_type = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTAChatGetMemberCount {
    const NAME: &'static str = "CMsgDOTAChatGetMemberCount";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.channel_name = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.channel_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.channel_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.channel_type {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(2, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.channel_name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.channel_type {
            os.write_enum(2, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAChatGetMemberCount {
        CMsgDOTAChatGetMemberCount::new()
    }

    fn clear(&mut self) {
        self.channel_name = ::std::option::Option::None;
        self.channel_type = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAChatGetMemberCount {
        static instance: CMsgDOTAChatGetMemberCount = CMsgDOTAChatGetMemberCount {
            channel_name: ::std::option::Option::None,
            channel_type: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTAChatGetMemberCountResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAChatGetMemberCountResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTAChatGetMemberCountResponse.channel_name)
    pub channel_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDOTAChatGetMemberCountResponse.channel_type)
    pub channel_type: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<super::dota_shared_enums::DOTAChatChannelType_t>>,
    // @@protoc_insertion_point(field:CMsgDOTAChatGetMemberCountResponse.member_count)
    pub member_count: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTAChatGetMemberCountResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAChatGetMemberCountResponse {
    fn default() -> &'a CMsgDOTAChatGetMemberCountResponse {
        <CMsgDOTAChatGetMemberCountResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAChatGetMemberCountResponse {
    pub fn new() -> CMsgDOTAChatGetMemberCountResponse {
        ::std::default::Default::default()
    }

    // optional string channel_name = 1;

    pub fn channel_name(&self) -> &str {
        match self.channel_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_channel_name(&mut self) {
        self.channel_name = ::std::option::Option::None;
    }

    pub fn has_channel_name(&self) -> bool {
        self.channel_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_name(&mut self, v: ::std::string::String) {
        self.channel_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_channel_name(&mut self) -> &mut ::std::string::String {
        if self.channel_name.is_none() {
            self.channel_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.channel_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_channel_name(&mut self) -> ::std::string::String {
        self.channel_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .DOTAChatChannelType_t channel_type = 2;

    pub fn channel_type(&self) -> super::dota_shared_enums::DOTAChatChannelType_t {
        match self.channel_type {
            Some(e) => e.enum_value_or(super::dota_shared_enums::DOTAChatChannelType_t::DOTAChannelType_Regional),
            None => super::dota_shared_enums::DOTAChatChannelType_t::DOTAChannelType_Regional,
        }
    }

    pub fn clear_channel_type(&mut self) {
        self.channel_type = ::std::option::Option::None;
    }

    pub fn has_channel_type(&self) -> bool {
        self.channel_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_type(&mut self, v: super::dota_shared_enums::DOTAChatChannelType_t) {
        self.channel_type = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint32 member_count = 3;

    pub fn member_count(&self) -> u32 {
        self.member_count.unwrap_or(0)
    }

    pub fn clear_member_count(&mut self) {
        self.member_count = ::std::option::Option::None;
    }

    pub fn has_member_count(&self) -> bool {
        self.member_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_member_count(&mut self, v: u32) {
        self.member_count = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTAChatGetMemberCountResponse {
    const NAME: &'static str = "CMsgDOTAChatGetMemberCountResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.channel_name = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.channel_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                24 => {
                    self.member_count = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.channel_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.channel_type {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(2, v.value());
        }
        if let Some(v) = self.member_count {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.channel_name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.channel_type {
            os.write_enum(2, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.member_count {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAChatGetMemberCountResponse {
        CMsgDOTAChatGetMemberCountResponse::new()
    }

    fn clear(&mut self) {
        self.channel_name = ::std::option::Option::None;
        self.channel_type = ::std::option::Option::None;
        self.member_count = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAChatGetMemberCountResponse {
        static instance: CMsgDOTAChatGetMemberCountResponse = CMsgDOTAChatGetMemberCountResponse {
            channel_name: ::std::option::Option::None,
            channel_type: ::std::option::Option::None,
            member_count: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgDOTAChatRegionsEnabled)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDOTAChatRegionsEnabled {
    // message fields
    // @@protoc_insertion_point(field:CMsgDOTAChatRegionsEnabled.enable_all_regions)
    pub enable_all_regions: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgDOTAChatRegionsEnabled.enabled_regions)
    pub enabled_regions: ::std::vec::Vec<cmsg_dotachat_regions_enabled::Region>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDOTAChatRegionsEnabled.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDOTAChatRegionsEnabled {
    fn default() -> &'a CMsgDOTAChatRegionsEnabled {
        <CMsgDOTAChatRegionsEnabled as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDOTAChatRegionsEnabled {
    pub fn new() -> CMsgDOTAChatRegionsEnabled {
        ::std::default::Default::default()
    }

    // optional bool enable_all_regions = 1;

    pub fn enable_all_regions(&self) -> bool {
        self.enable_all_regions.unwrap_or(false)
    }

    pub fn clear_enable_all_regions(&mut self) {
        self.enable_all_regions = ::std::option::Option::None;
    }

    pub fn has_enable_all_regions(&self) -> bool {
        self.enable_all_regions.is_some()
    }

    // Param is passed by value, moved
    pub fn set_enable_all_regions(&mut self, v: bool) {
        self.enable_all_regions = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDOTAChatRegionsEnabled {
    const NAME: &'static str = "CMsgDOTAChatRegionsEnabled";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.enable_all_regions = ::std::option::Option::Some(is.read_bool()?);
                },
                18 => {
                    self.enabled_regions.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.enable_all_regions {
            my_size += 1 + 1;
        }
        for value in &self.enabled_regions {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.enable_all_regions {
            os.write_bool(1, v)?;
        }
        for v in &self.enabled_regions {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDOTAChatRegionsEnabled {
        CMsgDOTAChatRegionsEnabled::new()
    }

    fn clear(&mut self) {
        self.enable_all_regions = ::std::option::Option::None;
        self.enabled_regions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDOTAChatRegionsEnabled {
        static instance: CMsgDOTAChatRegionsEnabled = CMsgDOTAChatRegionsEnabled {
            enable_all_regions: ::std::option::Option::None,
            enabled_regions: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgDOTAChatRegionsEnabled`
pub mod cmsg_dotachat_regions_enabled {
    // @@protoc_insertion_point(message:CMsgDOTAChatRegionsEnabled.Region)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Region {
        // message fields
        // @@protoc_insertion_point(field:CMsgDOTAChatRegionsEnabled.Region.min_latitude)
        pub min_latitude: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgDOTAChatRegionsEnabled.Region.max_latitude)
        pub max_latitude: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgDOTAChatRegionsEnabled.Region.min_longitude)
        pub min_longitude: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CMsgDOTAChatRegionsEnabled.Region.max_longitude)
        pub max_longitude: ::std::option::Option<f32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgDOTAChatRegionsEnabled.Region.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Region {
        fn default() -> &'a Region {
            <Region as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl Region {
        pub fn new() -> Region {
            ::std::default::Default::default()
        }

        // optional float min_latitude = 1;

        pub fn min_latitude(&self) -> f32 {
            self.min_latitude.unwrap_or(0.)
        }

        pub fn clear_min_latitude(&mut self) {
            self.min_latitude = ::std::option::Option::None;
        }

        pub fn has_min_latitude(&self) -> bool {
            self.min_latitude.is_some()
        }

        // Param is passed by value, moved
        pub fn set_min_latitude(&mut self, v: f32) {
            self.min_latitude = ::std::option::Option::Some(v);
        }

        // optional float max_latitude = 2;

        pub fn max_latitude(&self) -> f32 {
            self.max_latitude.unwrap_or(0.)
        }

        pub fn clear_max_latitude(&mut self) {
            self.max_latitude = ::std::option::Option::None;
        }

        pub fn has_max_latitude(&self) -> bool {
            self.max_latitude.is_some()
        }

        // Param is passed by value, moved
        pub fn set_max_latitude(&mut self, v: f32) {
            self.max_latitude = ::std::option::Option::Some(v);
        }

        // optional float min_longitude = 3;

        pub fn min_longitude(&self) -> f32 {
            self.min_longitude.unwrap_or(0.)
        }

        pub fn clear_min_longitude(&mut self) {
            self.min_longitude = ::std::option::Option::None;
        }

        pub fn has_min_longitude(&self) -> bool {
            self.min_longitude.is_some()
        }

        // Param is passed by value, moved
        pub fn set_min_longitude(&mut self, v: f32) {
            self.min_longitude = ::std::option::Option::Some(v);
        }

        // optional float max_longitude = 4;

        pub fn max_longitude(&self) -> f32 {
            self.max_longitude.unwrap_or(0.)
        }

        pub fn clear_max_longitude(&mut self) {
            self.max_longitude = ::std::option::Option::None;
        }

        pub fn has_max_longitude(&self) -> bool {
            self.max_longitude.is_some()
        }

        // Param is passed by value, moved
        pub fn set_max_longitude(&mut self, v: f32) {
            self.max_longitude = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for Region {
        const NAME: &'static str = "Region";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    13 => {
                        self.min_latitude = ::std::option::Option::Some(is.read_float()?);
                    },
                    21 => {
                        self.max_latitude = ::std::option::Option::Some(is.read_float()?);
                    },
                    29 => {
                        self.min_longitude = ::std::option::Option::Some(is.read_float()?);
                    },
                    37 => {
                        self.max_longitude = ::std::option::Option::Some(is.read_float()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.min_latitude {
                my_size += 1 + 4;
            }
            if let Some(v) = self.max_latitude {
                my_size += 1 + 4;
            }
            if let Some(v) = self.min_longitude {
                my_size += 1 + 4;
            }
            if let Some(v) = self.max_longitude {
                my_size += 1 + 4;
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.min_latitude {
                os.write_float(1, v)?;
            }
            if let Some(v) = self.max_latitude {
                os.write_float(2, v)?;
            }
            if let Some(v) = self.min_longitude {
                os.write_float(3, v)?;
            }
            if let Some(v) = self.max_longitude {
                os.write_float(4, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Region {
            Region::new()
        }

        fn clear(&mut self) {
            self.min_latitude = ::std::option::Option::None;
            self.max_latitude = ::std::option::Option::None;
            self.min_longitude = ::std::option::Option::None;
            self.max_longitude = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Region {
            static instance: Region = Region {
                min_latitude: ::std::option::Option::None,
                max_latitude: ::std::option::Option::None,
                min_longitude: ::std::option::Option::None,
                max_longitude: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}


const _VENT_PROTO_VERSION_CHECK: () = ::steam_vent_proto_common::VERSION_0_5_0;

#[allow(unused_imports)]
use crate::dota_shared_enums::*;
impl ::steam_vent_proto_common::RpcMessage for CMsgClientToGCPrivateChatInvite {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgClientToGCPrivateChatInvite {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCPrivateChatInvite;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgClientToGCPrivateChatKick {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgClientToGCPrivateChatKick {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCPrivateChatKick;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgClientToGCPrivateChatPromote {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgClientToGCPrivateChatPromote {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCPrivateChatPromote;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgClientToGCPrivateChatDemote {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgClientToGCPrivateChatDemote {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCPrivateChatDemote;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCToClientPrivateChatResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgGCToClientPrivateChatResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgGCToClientPrivateChatResponse;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTAJoinChatChannel {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTALeaveChatChannel {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCChatReportPublicSpam {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgGCChatReportPublicSpam {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgGCChatReportPublicSpam;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTAChatModeratorBan {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTAChatMessage {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTAChatMember {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTAJoinChatChannelResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTAOtherJoinedChatChannel {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTAOtherLeftChatChannel {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTARequestChatChannelList {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTARequestChatChannelListResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTAChatGetUserListResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTAChatGetMemberCount {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgDOTAChatGetMemberCount {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgDOTAChatGetMemberCount;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTAChatGetMemberCountResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgDOTAChatGetMemberCountResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgDOTAChatGetMemberCountResponse;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgDOTAChatRegionsEnabled {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}

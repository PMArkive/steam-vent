// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `dota_gcmessages_client_coaching.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::steam_vent_proto_common::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:CMsgPlayerCoachMatch)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgPlayerCoachMatch {
    // message fields
    // @@protoc_insertion_point(field:CMsgPlayerCoachMatch.match_id)
    pub match_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgPlayerCoachMatch.match_outcome)
    pub match_outcome: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<super::dota_shared_enums::EMatchOutcome>>,
    // @@protoc_insertion_point(field:CMsgPlayerCoachMatch.coached_team)
    pub coached_team: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgPlayerCoachMatch.start_time)
    pub start_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgPlayerCoachMatch.duration)
    pub duration: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgPlayerCoachMatch.teammate_ratings)
    pub teammate_ratings: ::std::vec::Vec<::steam_vent_proto_common::protobuf::EnumOrUnknown<ECoachTeammateRating>>,
    // @@protoc_insertion_point(field:CMsgPlayerCoachMatch.coach_flags)
    pub coach_flags: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgPlayerCoachMatch.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgPlayerCoachMatch {
    fn default() -> &'a CMsgPlayerCoachMatch {
        <CMsgPlayerCoachMatch as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgPlayerCoachMatch {
    pub fn new() -> CMsgPlayerCoachMatch {
        ::std::default::Default::default()
    }

    // optional uint64 match_id = 1;

    pub fn match_id(&self) -> u64 {
        self.match_id.unwrap_or(0)
    }

    pub fn clear_match_id(&mut self) {
        self.match_id = ::std::option::Option::None;
    }

    pub fn has_match_id(&self) -> bool {
        self.match_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_match_id(&mut self, v: u64) {
        self.match_id = ::std::option::Option::Some(v);
    }

    // optional .EMatchOutcome match_outcome = 2;

    pub fn match_outcome(&self) -> super::dota_shared_enums::EMatchOutcome {
        match self.match_outcome {
            Some(e) => e.enum_value_or(super::dota_shared_enums::EMatchOutcome::k_EMatchOutcome_Unknown),
            None => super::dota_shared_enums::EMatchOutcome::k_EMatchOutcome_Unknown,
        }
    }

    pub fn clear_match_outcome(&mut self) {
        self.match_outcome = ::std::option::Option::None;
    }

    pub fn has_match_outcome(&self) -> bool {
        self.match_outcome.is_some()
    }

    // Param is passed by value, moved
    pub fn set_match_outcome(&mut self, v: super::dota_shared_enums::EMatchOutcome) {
        self.match_outcome = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint32 coached_team = 3;

    pub fn coached_team(&self) -> u32 {
        self.coached_team.unwrap_or(0)
    }

    pub fn clear_coached_team(&mut self) {
        self.coached_team = ::std::option::Option::None;
    }

    pub fn has_coached_team(&self) -> bool {
        self.coached_team.is_some()
    }

    // Param is passed by value, moved
    pub fn set_coached_team(&mut self, v: u32) {
        self.coached_team = ::std::option::Option::Some(v);
    }

    // optional fixed32 start_time = 4;

    pub fn start_time(&self) -> u32 {
        self.start_time.unwrap_or(0)
    }

    pub fn clear_start_time(&mut self) {
        self.start_time = ::std::option::Option::None;
    }

    pub fn has_start_time(&self) -> bool {
        self.start_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_time(&mut self, v: u32) {
        self.start_time = ::std::option::Option::Some(v);
    }

    // optional uint32 duration = 5;

    pub fn duration(&self) -> u32 {
        self.duration.unwrap_or(0)
    }

    pub fn clear_duration(&mut self) {
        self.duration = ::std::option::Option::None;
    }

    pub fn has_duration(&self) -> bool {
        self.duration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_duration(&mut self, v: u32) {
        self.duration = ::std::option::Option::Some(v);
    }

    // optional uint32 coach_flags = 7;

    pub fn coach_flags(&self) -> u32 {
        self.coach_flags.unwrap_or(0)
    }

    pub fn clear_coach_flags(&mut self) {
        self.coach_flags = ::std::option::Option::None;
    }

    pub fn has_coach_flags(&self) -> bool {
        self.coach_flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_coach_flags(&mut self, v: u32) {
        self.coach_flags = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgPlayerCoachMatch {
    const NAME: &'static str = "CMsgPlayerCoachMatch";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.match_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.match_outcome = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                24 => {
                    self.coached_team = ::std::option::Option::Some(is.read_uint32()?);
                },
                37 => {
                    self.start_time = ::std::option::Option::Some(is.read_fixed32()?);
                },
                40 => {
                    self.duration = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.teammate_ratings.push(is.read_enum_or_unknown()?);
                },
                50 => {
                    ::steam_vent_proto_common::protobuf::rt::read_repeated_packed_enum_or_unknown_into(is, &mut self.teammate_ratings)?
                },
                56 => {
                    self.coach_flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.match_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.match_outcome {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(2, v.value());
        }
        if let Some(v) = self.coached_team {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.start_time {
            my_size += 1 + 4;
        }
        if let Some(v) = self.duration {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
        }
        for value in &self.teammate_ratings {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(6, value.value());
        };
        if let Some(v) = self.coach_flags {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(7, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.match_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.match_outcome {
            os.write_enum(2, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.coached_team {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.start_time {
            os.write_fixed32(4, v)?;
        }
        if let Some(v) = self.duration {
            os.write_uint32(5, v)?;
        }
        for v in &self.teammate_ratings {
            os.write_enum(6, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(v))?;
        };
        if let Some(v) = self.coach_flags {
            os.write_uint32(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgPlayerCoachMatch {
        CMsgPlayerCoachMatch::new()
    }

    fn clear(&mut self) {
        self.match_id = ::std::option::Option::None;
        self.match_outcome = ::std::option::Option::None;
        self.coached_team = ::std::option::Option::None;
        self.start_time = ::std::option::Option::None;
        self.duration = ::std::option::Option::None;
        self.teammate_ratings.clear();
        self.coach_flags = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgPlayerCoachMatch {
        static instance: CMsgPlayerCoachMatch = CMsgPlayerCoachMatch {
            match_id: ::std::option::Option::None,
            match_outcome: ::std::option::Option::None,
            coached_team: ::std::option::Option::None,
            start_time: ::std::option::Option::None,
            duration: ::std::option::Option::None,
            teammate_ratings: ::std::vec::Vec::new(),
            coach_flags: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgPrivateCoachingSessionMember)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgPrivateCoachingSessionMember {
    // message fields
    // @@protoc_insertion_point(field:CMsgPrivateCoachingSessionMember.account_id)
    pub account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgPrivateCoachingSessionMember.member_flags)
    pub member_flags: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgPrivateCoachingSessionMember.member_session_rating)
    pub member_session_rating: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<ECoachTeammateRating>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgPrivateCoachingSessionMember.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgPrivateCoachingSessionMember {
    fn default() -> &'a CMsgPrivateCoachingSessionMember {
        <CMsgPrivateCoachingSessionMember as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgPrivateCoachingSessionMember {
    pub fn new() -> CMsgPrivateCoachingSessionMember {
        ::std::default::Default::default()
    }

    // optional uint32 account_id = 1;

    pub fn account_id(&self) -> u32 {
        self.account_id.unwrap_or(0)
    }

    pub fn clear_account_id(&mut self) {
        self.account_id = ::std::option::Option::None;
    }

    pub fn has_account_id(&self) -> bool {
        self.account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: u32) {
        self.account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 member_flags = 2;

    pub fn member_flags(&self) -> u32 {
        self.member_flags.unwrap_or(0)
    }

    pub fn clear_member_flags(&mut self) {
        self.member_flags = ::std::option::Option::None;
    }

    pub fn has_member_flags(&self) -> bool {
        self.member_flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_member_flags(&mut self, v: u32) {
        self.member_flags = ::std::option::Option::Some(v);
    }

    // optional .ECoachTeammateRating member_session_rating = 3;

    pub fn member_session_rating(&self) -> ECoachTeammateRating {
        match self.member_session_rating {
            Some(e) => e.enum_value_or(ECoachTeammateRating::k_ECoachTeammateRating_None),
            None => ECoachTeammateRating::k_ECoachTeammateRating_None,
        }
    }

    pub fn clear_member_session_rating(&mut self) {
        self.member_session_rating = ::std::option::Option::None;
    }

    pub fn has_member_session_rating(&self) -> bool {
        self.member_session_rating.is_some()
    }

    // Param is passed by value, moved
    pub fn set_member_session_rating(&mut self, v: ECoachTeammateRating) {
        self.member_session_rating = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgPrivateCoachingSessionMember {
    const NAME: &'static str = "CMsgPrivateCoachingSessionMember";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.member_flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.member_session_rating = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.member_flags {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.member_session_rating {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(3, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.account_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.member_flags {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.member_session_rating {
            os.write_enum(3, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgPrivateCoachingSessionMember {
        CMsgPrivateCoachingSessionMember::new()
    }

    fn clear(&mut self) {
        self.account_id = ::std::option::Option::None;
        self.member_flags = ::std::option::Option::None;
        self.member_session_rating = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgPrivateCoachingSessionMember {
        static instance: CMsgPrivateCoachingSessionMember = CMsgPrivateCoachingSessionMember {
            account_id: ::std::option::Option::None,
            member_flags: ::std::option::Option::None,
            member_session_rating: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgPrivateCoachingSession)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgPrivateCoachingSession {
    // message fields
    // @@protoc_insertion_point(field:CMsgPrivateCoachingSession.private_coaching_session_id)
    pub private_coaching_session_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgPrivateCoachingSession.requested_timestamp)
    pub requested_timestamp: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgPrivateCoachingSession.requested_language)
    pub requested_language: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgPrivateCoachingSession.coaching_session_state)
    pub coaching_session_state: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<EPrivateCoachingSessionState>>,
    // @@protoc_insertion_point(field:CMsgPrivateCoachingSession.session_members)
    pub session_members: ::std::vec::Vec<CMsgPrivateCoachingSessionMember>,
    // @@protoc_insertion_point(field:CMsgPrivateCoachingSession.current_lobby_id)
    pub current_lobby_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgPrivateCoachingSession.current_server_steam_id)
    pub current_server_steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgPrivateCoachingSession.accepted_timestamp)
    pub accepted_timestamp: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgPrivateCoachingSession.completed_timestamp)
    pub completed_timestamp: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgPrivateCoachingSession.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgPrivateCoachingSession {
    fn default() -> &'a CMsgPrivateCoachingSession {
        <CMsgPrivateCoachingSession as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgPrivateCoachingSession {
    pub fn new() -> CMsgPrivateCoachingSession {
        ::std::default::Default::default()
    }

    // optional uint64 private_coaching_session_id = 1;

    pub fn private_coaching_session_id(&self) -> u64 {
        self.private_coaching_session_id.unwrap_or(0)
    }

    pub fn clear_private_coaching_session_id(&mut self) {
        self.private_coaching_session_id = ::std::option::Option::None;
    }

    pub fn has_private_coaching_session_id(&self) -> bool {
        self.private_coaching_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_private_coaching_session_id(&mut self, v: u64) {
        self.private_coaching_session_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 requested_timestamp = 2;

    pub fn requested_timestamp(&self) -> u32 {
        self.requested_timestamp.unwrap_or(0)
    }

    pub fn clear_requested_timestamp(&mut self) {
        self.requested_timestamp = ::std::option::Option::None;
    }

    pub fn has_requested_timestamp(&self) -> bool {
        self.requested_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_requested_timestamp(&mut self, v: u32) {
        self.requested_timestamp = ::std::option::Option::Some(v);
    }

    // optional uint32 requested_language = 3;

    pub fn requested_language(&self) -> u32 {
        self.requested_language.unwrap_or(0)
    }

    pub fn clear_requested_language(&mut self) {
        self.requested_language = ::std::option::Option::None;
    }

    pub fn has_requested_language(&self) -> bool {
        self.requested_language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_requested_language(&mut self, v: u32) {
        self.requested_language = ::std::option::Option::Some(v);
    }

    // optional .EPrivateCoachingSessionState coaching_session_state = 4;

    pub fn coaching_session_state(&self) -> EPrivateCoachingSessionState {
        match self.coaching_session_state {
            Some(e) => e.enum_value_or(EPrivateCoachingSessionState::k_ePrivateCoachingSessionState_Invalid),
            None => EPrivateCoachingSessionState::k_ePrivateCoachingSessionState_Invalid,
        }
    }

    pub fn clear_coaching_session_state(&mut self) {
        self.coaching_session_state = ::std::option::Option::None;
    }

    pub fn has_coaching_session_state(&self) -> bool {
        self.coaching_session_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_coaching_session_state(&mut self, v: EPrivateCoachingSessionState) {
        self.coaching_session_state = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint64 current_lobby_id = 6;

    pub fn current_lobby_id(&self) -> u64 {
        self.current_lobby_id.unwrap_or(0)
    }

    pub fn clear_current_lobby_id(&mut self) {
        self.current_lobby_id = ::std::option::Option::None;
    }

    pub fn has_current_lobby_id(&self) -> bool {
        self.current_lobby_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_current_lobby_id(&mut self, v: u64) {
        self.current_lobby_id = ::std::option::Option::Some(v);
    }

    // optional uint64 current_server_steam_id = 7;

    pub fn current_server_steam_id(&self) -> u64 {
        self.current_server_steam_id.unwrap_or(0)
    }

    pub fn clear_current_server_steam_id(&mut self) {
        self.current_server_steam_id = ::std::option::Option::None;
    }

    pub fn has_current_server_steam_id(&self) -> bool {
        self.current_server_steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_current_server_steam_id(&mut self, v: u64) {
        self.current_server_steam_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 accepted_timestamp = 8;

    pub fn accepted_timestamp(&self) -> u32 {
        self.accepted_timestamp.unwrap_or(0)
    }

    pub fn clear_accepted_timestamp(&mut self) {
        self.accepted_timestamp = ::std::option::Option::None;
    }

    pub fn has_accepted_timestamp(&self) -> bool {
        self.accepted_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accepted_timestamp(&mut self, v: u32) {
        self.accepted_timestamp = ::std::option::Option::Some(v);
    }

    // optional fixed32 completed_timestamp = 9;

    pub fn completed_timestamp(&self) -> u32 {
        self.completed_timestamp.unwrap_or(0)
    }

    pub fn clear_completed_timestamp(&mut self) {
        self.completed_timestamp = ::std::option::Option::None;
    }

    pub fn has_completed_timestamp(&self) -> bool {
        self.completed_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_completed_timestamp(&mut self, v: u32) {
        self.completed_timestamp = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgPrivateCoachingSession {
    const NAME: &'static str = "CMsgPrivateCoachingSession";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.private_coaching_session_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                21 => {
                    self.requested_timestamp = ::std::option::Option::Some(is.read_fixed32()?);
                },
                24 => {
                    self.requested_language = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.coaching_session_state = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                42 => {
                    self.session_members.push(is.read_message()?);
                },
                48 => {
                    self.current_lobby_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                56 => {
                    self.current_server_steam_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                69 => {
                    self.accepted_timestamp = ::std::option::Option::Some(is.read_fixed32()?);
                },
                77 => {
                    self.completed_timestamp = ::std::option::Option::Some(is.read_fixed32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.private_coaching_session_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.requested_timestamp {
            my_size += 1 + 4;
        }
        if let Some(v) = self.requested_language {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.coaching_session_state {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(4, v.value());
        }
        for value in &self.session_members {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.current_lobby_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(6, v);
        }
        if let Some(v) = self.current_server_steam_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(7, v);
        }
        if let Some(v) = self.accepted_timestamp {
            my_size += 1 + 4;
        }
        if let Some(v) = self.completed_timestamp {
            my_size += 1 + 4;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.private_coaching_session_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.requested_timestamp {
            os.write_fixed32(2, v)?;
        }
        if let Some(v) = self.requested_language {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.coaching_session_state {
            os.write_enum(4, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        for v in &self.session_members {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if let Some(v) = self.current_lobby_id {
            os.write_uint64(6, v)?;
        }
        if let Some(v) = self.current_server_steam_id {
            os.write_uint64(7, v)?;
        }
        if let Some(v) = self.accepted_timestamp {
            os.write_fixed32(8, v)?;
        }
        if let Some(v) = self.completed_timestamp {
            os.write_fixed32(9, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgPrivateCoachingSession {
        CMsgPrivateCoachingSession::new()
    }

    fn clear(&mut self) {
        self.private_coaching_session_id = ::std::option::Option::None;
        self.requested_timestamp = ::std::option::Option::None;
        self.requested_language = ::std::option::Option::None;
        self.coaching_session_state = ::std::option::Option::None;
        self.session_members.clear();
        self.current_lobby_id = ::std::option::Option::None;
        self.current_server_steam_id = ::std::option::Option::None;
        self.accepted_timestamp = ::std::option::Option::None;
        self.completed_timestamp = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgPrivateCoachingSession {
        static instance: CMsgPrivateCoachingSession = CMsgPrivateCoachingSession {
            private_coaching_session_id: ::std::option::Option::None,
            requested_timestamp: ::std::option::Option::None,
            requested_language: ::std::option::Option::None,
            coaching_session_state: ::std::option::Option::None,
            session_members: ::std::vec::Vec::new(),
            current_lobby_id: ::std::option::Option::None,
            current_server_steam_id: ::std::option::Option::None,
            accepted_timestamp: ::std::option::Option::None,
            completed_timestamp: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgPrivateCoachingSessionStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgPrivateCoachingSessionStatus {
    // message fields
    // @@protoc_insertion_point(field:CMsgPrivateCoachingSessionStatus.requester_competitive_rank_tier)
    pub requester_competitive_rank_tier: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgPrivateCoachingSessionStatus.requester_games_played)
    pub requester_games_played: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgPrivateCoachingSessionStatus.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgPrivateCoachingSessionStatus {
    fn default() -> &'a CMsgPrivateCoachingSessionStatus {
        <CMsgPrivateCoachingSessionStatus as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgPrivateCoachingSessionStatus {
    pub fn new() -> CMsgPrivateCoachingSessionStatus {
        ::std::default::Default::default()
    }

    // optional uint32 requester_competitive_rank_tier = 1;

    pub fn requester_competitive_rank_tier(&self) -> u32 {
        self.requester_competitive_rank_tier.unwrap_or(0)
    }

    pub fn clear_requester_competitive_rank_tier(&mut self) {
        self.requester_competitive_rank_tier = ::std::option::Option::None;
    }

    pub fn has_requester_competitive_rank_tier(&self) -> bool {
        self.requester_competitive_rank_tier.is_some()
    }

    // Param is passed by value, moved
    pub fn set_requester_competitive_rank_tier(&mut self, v: u32) {
        self.requester_competitive_rank_tier = ::std::option::Option::Some(v);
    }

    // optional uint32 requester_games_played = 2;

    pub fn requester_games_played(&self) -> u32 {
        self.requester_games_played.unwrap_or(0)
    }

    pub fn clear_requester_games_played(&mut self) {
        self.requester_games_played = ::std::option::Option::None;
    }

    pub fn has_requester_games_played(&self) -> bool {
        self.requester_games_played.is_some()
    }

    // Param is passed by value, moved
    pub fn set_requester_games_played(&mut self, v: u32) {
        self.requester_games_played = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgPrivateCoachingSessionStatus {
    const NAME: &'static str = "CMsgPrivateCoachingSessionStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.requester_competitive_rank_tier = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.requester_games_played = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.requester_competitive_rank_tier {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.requester_games_played {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.requester_competitive_rank_tier {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.requester_games_played {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgPrivateCoachingSessionStatus {
        CMsgPrivateCoachingSessionStatus::new()
    }

    fn clear(&mut self) {
        self.requester_competitive_rank_tier = ::std::option::Option::None;
        self.requester_games_played = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgPrivateCoachingSessionStatus {
        static instance: CMsgPrivateCoachingSessionStatus = CMsgPrivateCoachingSessionStatus {
            requester_competitive_rank_tier: ::std::option::Option::None,
            requester_games_played: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgAvailablePrivateCoachingSession)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgAvailablePrivateCoachingSession {
    // message fields
    // @@protoc_insertion_point(field:CMsgAvailablePrivateCoachingSession.coaching_session)
    pub coaching_session: ::steam_vent_proto_common::protobuf::MessageField<CMsgPrivateCoachingSession>,
    // @@protoc_insertion_point(field:CMsgAvailablePrivateCoachingSession.coaching_session_status)
    pub coaching_session_status: ::steam_vent_proto_common::protobuf::MessageField<CMsgPrivateCoachingSessionStatus>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgAvailablePrivateCoachingSession.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgAvailablePrivateCoachingSession {
    fn default() -> &'a CMsgAvailablePrivateCoachingSession {
        <CMsgAvailablePrivateCoachingSession as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgAvailablePrivateCoachingSession {
    pub fn new() -> CMsgAvailablePrivateCoachingSession {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgAvailablePrivateCoachingSession {
    const NAME: &'static str = "CMsgAvailablePrivateCoachingSession";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.coaching_session)?;
                },
                18 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.coaching_session_status)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.coaching_session.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.coaching_session_status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.coaching_session.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.coaching_session_status.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgAvailablePrivateCoachingSession {
        CMsgAvailablePrivateCoachingSession::new()
    }

    fn clear(&mut self) {
        self.coaching_session.clear();
        self.coaching_session_status.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgAvailablePrivateCoachingSession {
        static instance: CMsgAvailablePrivateCoachingSession = CMsgAvailablePrivateCoachingSession {
            coaching_session: ::steam_vent_proto_common::protobuf::MessageField::none(),
            coaching_session_status: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgAvailablePrivateCoachingSessionList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgAvailablePrivateCoachingSessionList {
    // message fields
    // @@protoc_insertion_point(field:CMsgAvailablePrivateCoachingSessionList.available_coaching_sessions)
    pub available_coaching_sessions: ::std::vec::Vec<CMsgAvailablePrivateCoachingSession>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgAvailablePrivateCoachingSessionList.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgAvailablePrivateCoachingSessionList {
    fn default() -> &'a CMsgAvailablePrivateCoachingSessionList {
        <CMsgAvailablePrivateCoachingSessionList as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgAvailablePrivateCoachingSessionList {
    pub fn new() -> CMsgAvailablePrivateCoachingSessionList {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgAvailablePrivateCoachingSessionList {
    const NAME: &'static str = "CMsgAvailablePrivateCoachingSessionList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.available_coaching_sessions.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.available_coaching_sessions {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.available_coaching_sessions {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgAvailablePrivateCoachingSessionList {
        CMsgAvailablePrivateCoachingSessionList::new()
    }

    fn clear(&mut self) {
        self.available_coaching_sessions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgAvailablePrivateCoachingSessionList {
        static instance: CMsgAvailablePrivateCoachingSessionList = CMsgAvailablePrivateCoachingSessionList {
            available_coaching_sessions: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgAvailablePrivateCoachingSessionSummary)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgAvailablePrivateCoachingSessionSummary {
    // message fields
    // @@protoc_insertion_point(field:CMsgAvailablePrivateCoachingSessionSummary.coaching_session_count)
    pub coaching_session_count: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgAvailablePrivateCoachingSessionSummary.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgAvailablePrivateCoachingSessionSummary {
    fn default() -> &'a CMsgAvailablePrivateCoachingSessionSummary {
        <CMsgAvailablePrivateCoachingSessionSummary as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgAvailablePrivateCoachingSessionSummary {
    pub fn new() -> CMsgAvailablePrivateCoachingSessionSummary {
        ::std::default::Default::default()
    }

    // optional uint32 coaching_session_count = 1;

    pub fn coaching_session_count(&self) -> u32 {
        self.coaching_session_count.unwrap_or(0)
    }

    pub fn clear_coaching_session_count(&mut self) {
        self.coaching_session_count = ::std::option::Option::None;
    }

    pub fn has_coaching_session_count(&self) -> bool {
        self.coaching_session_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_coaching_session_count(&mut self, v: u32) {
        self.coaching_session_count = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgAvailablePrivateCoachingSessionSummary {
    const NAME: &'static str = "CMsgAvailablePrivateCoachingSessionSummary";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.coaching_session_count = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.coaching_session_count {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.coaching_session_count {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgAvailablePrivateCoachingSessionSummary {
        CMsgAvailablePrivateCoachingSessionSummary::new()
    }

    fn clear(&mut self) {
        self.coaching_session_count = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgAvailablePrivateCoachingSessionSummary {
        static instance: CMsgAvailablePrivateCoachingSessionSummary = CMsgAvailablePrivateCoachingSessionSummary {
            coaching_session_count: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCRequestPlayerCoachMatches)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCRequestPlayerCoachMatches {
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCRequestPlayerCoachMatches.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCRequestPlayerCoachMatches {
    fn default() -> &'a CMsgClientToGCRequestPlayerCoachMatches {
        <CMsgClientToGCRequestPlayerCoachMatches as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCRequestPlayerCoachMatches {
    pub fn new() -> CMsgClientToGCRequestPlayerCoachMatches {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCRequestPlayerCoachMatches {
    const NAME: &'static str = "CMsgClientToGCRequestPlayerCoachMatches";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCRequestPlayerCoachMatches {
        CMsgClientToGCRequestPlayerCoachMatches::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCRequestPlayerCoachMatches {
        static instance: CMsgClientToGCRequestPlayerCoachMatches = CMsgClientToGCRequestPlayerCoachMatches {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCRequestPlayerCoachMatchesResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCRequestPlayerCoachMatchesResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCRequestPlayerCoachMatchesResponse.result)
    pub result: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_client_to_gcrequest_player_coach_matches_response::EResponse>>,
    // @@protoc_insertion_point(field:CMsgClientToGCRequestPlayerCoachMatchesResponse.coach_matches)
    pub coach_matches: ::std::vec::Vec<CMsgPlayerCoachMatch>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCRequestPlayerCoachMatchesResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCRequestPlayerCoachMatchesResponse {
    fn default() -> &'a CMsgClientToGCRequestPlayerCoachMatchesResponse {
        <CMsgClientToGCRequestPlayerCoachMatchesResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCRequestPlayerCoachMatchesResponse {
    pub fn new() -> CMsgClientToGCRequestPlayerCoachMatchesResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgClientToGCRequestPlayerCoachMatchesResponse.EResponse result = 1;

    pub fn result(&self) -> cmsg_client_to_gcrequest_player_coach_matches_response::EResponse {
        match self.result {
            Some(e) => e.enum_value_or(cmsg_client_to_gcrequest_player_coach_matches_response::EResponse::k_eInternalError),
            None => cmsg_client_to_gcrequest_player_coach_matches_response::EResponse::k_eInternalError,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: cmsg_client_to_gcrequest_player_coach_matches_response::EResponse) {
        self.result = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCRequestPlayerCoachMatchesResponse {
    const NAME: &'static str = "CMsgClientToGCRequestPlayerCoachMatchesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    self.coach_matches.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        for value in &self.coach_matches {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        for v in &self.coach_matches {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCRequestPlayerCoachMatchesResponse {
        CMsgClientToGCRequestPlayerCoachMatchesResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.coach_matches.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCRequestPlayerCoachMatchesResponse {
        static instance: CMsgClientToGCRequestPlayerCoachMatchesResponse = CMsgClientToGCRequestPlayerCoachMatchesResponse {
            result: ::std::option::Option::None,
            coach_matches: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientToGCRequestPlayerCoachMatchesResponse`
pub mod cmsg_client_to_gcrequest_player_coach_matches_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgClientToGCRequestPlayerCoachMatchesResponse.EResponse)
    pub enum EResponse {
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRequestPlayerCoachMatchesResponse.EResponse.k_eInternalError)
        k_eInternalError = 0,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRequestPlayerCoachMatchesResponse.EResponse.k_eSuccess)
        k_eSuccess = 1,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRequestPlayerCoachMatchesResponse.EResponse.k_eTooBusy)
        k_eTooBusy = 2,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRequestPlayerCoachMatchesResponse.EResponse.k_eDisabled)
        k_eDisabled = 3,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for EResponse {
        const NAME: &'static str = "EResponse";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EResponse> {
            match value {
                0 => ::std::option::Option::Some(EResponse::k_eInternalError),
                1 => ::std::option::Option::Some(EResponse::k_eSuccess),
                2 => ::std::option::Option::Some(EResponse::k_eTooBusy),
                3 => ::std::option::Option::Some(EResponse::k_eDisabled),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EResponse> {
            match str {
                "k_eInternalError" => ::std::option::Option::Some(EResponse::k_eInternalError),
                "k_eSuccess" => ::std::option::Option::Some(EResponse::k_eSuccess),
                "k_eTooBusy" => ::std::option::Option::Some(EResponse::k_eTooBusy),
                "k_eDisabled" => ::std::option::Option::Some(EResponse::k_eDisabled),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EResponse] = &[
            EResponse::k_eInternalError,
            EResponse::k_eSuccess,
            EResponse::k_eTooBusy,
            EResponse::k_eDisabled,
        ];
    }

    impl ::std::default::Default for EResponse {
        fn default() -> Self {
            EResponse::k_eInternalError
        }
    }

}

// @@protoc_insertion_point(message:CMsgClientToGCRequestPlayerCoachMatch)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCRequestPlayerCoachMatch {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCRequestPlayerCoachMatch.match_id)
    pub match_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCRequestPlayerCoachMatch.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCRequestPlayerCoachMatch {
    fn default() -> &'a CMsgClientToGCRequestPlayerCoachMatch {
        <CMsgClientToGCRequestPlayerCoachMatch as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCRequestPlayerCoachMatch {
    pub fn new() -> CMsgClientToGCRequestPlayerCoachMatch {
        ::std::default::Default::default()
    }

    // optional uint64 match_id = 1;

    pub fn match_id(&self) -> u64 {
        self.match_id.unwrap_or(0)
    }

    pub fn clear_match_id(&mut self) {
        self.match_id = ::std::option::Option::None;
    }

    pub fn has_match_id(&self) -> bool {
        self.match_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_match_id(&mut self, v: u64) {
        self.match_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCRequestPlayerCoachMatch {
    const NAME: &'static str = "CMsgClientToGCRequestPlayerCoachMatch";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.match_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.match_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.match_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCRequestPlayerCoachMatch {
        CMsgClientToGCRequestPlayerCoachMatch::new()
    }

    fn clear(&mut self) {
        self.match_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCRequestPlayerCoachMatch {
        static instance: CMsgClientToGCRequestPlayerCoachMatch = CMsgClientToGCRequestPlayerCoachMatch {
            match_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCRequestPlayerCoachMatchResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCRequestPlayerCoachMatchResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCRequestPlayerCoachMatchResponse.result)
    pub result: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_client_to_gcrequest_player_coach_match_response::EResponse>>,
    // @@protoc_insertion_point(field:CMsgClientToGCRequestPlayerCoachMatchResponse.coach_match)
    pub coach_match: ::steam_vent_proto_common::protobuf::MessageField<CMsgPlayerCoachMatch>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCRequestPlayerCoachMatchResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCRequestPlayerCoachMatchResponse {
    fn default() -> &'a CMsgClientToGCRequestPlayerCoachMatchResponse {
        <CMsgClientToGCRequestPlayerCoachMatchResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCRequestPlayerCoachMatchResponse {
    pub fn new() -> CMsgClientToGCRequestPlayerCoachMatchResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgClientToGCRequestPlayerCoachMatchResponse.EResponse result = 1;

    pub fn result(&self) -> cmsg_client_to_gcrequest_player_coach_match_response::EResponse {
        match self.result {
            Some(e) => e.enum_value_or(cmsg_client_to_gcrequest_player_coach_match_response::EResponse::k_eInternalError),
            None => cmsg_client_to_gcrequest_player_coach_match_response::EResponse::k_eInternalError,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: cmsg_client_to_gcrequest_player_coach_match_response::EResponse) {
        self.result = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCRequestPlayerCoachMatchResponse {
    const NAME: &'static str = "CMsgClientToGCRequestPlayerCoachMatchResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.coach_match)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.coach_match.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.coach_match.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCRequestPlayerCoachMatchResponse {
        CMsgClientToGCRequestPlayerCoachMatchResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.coach_match.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCRequestPlayerCoachMatchResponse {
        static instance: CMsgClientToGCRequestPlayerCoachMatchResponse = CMsgClientToGCRequestPlayerCoachMatchResponse {
            result: ::std::option::Option::None,
            coach_match: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientToGCRequestPlayerCoachMatchResponse`
pub mod cmsg_client_to_gcrequest_player_coach_match_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgClientToGCRequestPlayerCoachMatchResponse.EResponse)
    pub enum EResponse {
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRequestPlayerCoachMatchResponse.EResponse.k_eInternalError)
        k_eInternalError = 0,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRequestPlayerCoachMatchResponse.EResponse.k_eSuccess)
        k_eSuccess = 1,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRequestPlayerCoachMatchResponse.EResponse.k_eTooBusy)
        k_eTooBusy = 2,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRequestPlayerCoachMatchResponse.EResponse.k_eDisabled)
        k_eDisabled = 3,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for EResponse {
        const NAME: &'static str = "EResponse";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EResponse> {
            match value {
                0 => ::std::option::Option::Some(EResponse::k_eInternalError),
                1 => ::std::option::Option::Some(EResponse::k_eSuccess),
                2 => ::std::option::Option::Some(EResponse::k_eTooBusy),
                3 => ::std::option::Option::Some(EResponse::k_eDisabled),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EResponse> {
            match str {
                "k_eInternalError" => ::std::option::Option::Some(EResponse::k_eInternalError),
                "k_eSuccess" => ::std::option::Option::Some(EResponse::k_eSuccess),
                "k_eTooBusy" => ::std::option::Option::Some(EResponse::k_eTooBusy),
                "k_eDisabled" => ::std::option::Option::Some(EResponse::k_eDisabled),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EResponse] = &[
            EResponse::k_eInternalError,
            EResponse::k_eSuccess,
            EResponse::k_eTooBusy,
            EResponse::k_eDisabled,
        ];
    }

    impl ::std::default::Default for EResponse {
        fn default() -> Self {
            EResponse::k_eInternalError
        }
    }

}

// @@protoc_insertion_point(message:CMsgClientToGCSubmitCoachTeammateRating)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCSubmitCoachTeammateRating {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCSubmitCoachTeammateRating.match_id)
    pub match_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgClientToGCSubmitCoachTeammateRating.coach_account_id)
    pub coach_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientToGCSubmitCoachTeammateRating.rating)
    pub rating: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<ECoachTeammateRating>>,
    // @@protoc_insertion_point(field:CMsgClientToGCSubmitCoachTeammateRating.reason)
    pub reason: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCSubmitCoachTeammateRating.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCSubmitCoachTeammateRating {
    fn default() -> &'a CMsgClientToGCSubmitCoachTeammateRating {
        <CMsgClientToGCSubmitCoachTeammateRating as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCSubmitCoachTeammateRating {
    pub fn new() -> CMsgClientToGCSubmitCoachTeammateRating {
        ::std::default::Default::default()
    }

    // optional uint64 match_id = 1;

    pub fn match_id(&self) -> u64 {
        self.match_id.unwrap_or(0)
    }

    pub fn clear_match_id(&mut self) {
        self.match_id = ::std::option::Option::None;
    }

    pub fn has_match_id(&self) -> bool {
        self.match_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_match_id(&mut self, v: u64) {
        self.match_id = ::std::option::Option::Some(v);
    }

    // optional uint32 coach_account_id = 2;

    pub fn coach_account_id(&self) -> u32 {
        self.coach_account_id.unwrap_or(0)
    }

    pub fn clear_coach_account_id(&mut self) {
        self.coach_account_id = ::std::option::Option::None;
    }

    pub fn has_coach_account_id(&self) -> bool {
        self.coach_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_coach_account_id(&mut self, v: u32) {
        self.coach_account_id = ::std::option::Option::Some(v);
    }

    // optional .ECoachTeammateRating rating = 3;

    pub fn rating(&self) -> ECoachTeammateRating {
        match self.rating {
            Some(e) => e.enum_value_or(ECoachTeammateRating::k_ECoachTeammateRating_None),
            None => ECoachTeammateRating::k_ECoachTeammateRating_None,
        }
    }

    pub fn clear_rating(&mut self) {
        self.rating = ::std::option::Option::None;
    }

    pub fn has_rating(&self) -> bool {
        self.rating.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rating(&mut self, v: ECoachTeammateRating) {
        self.rating = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional string reason = 4;

    pub fn reason(&self) -> &str {
        match self.reason.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_reason(&mut self) {
        self.reason = ::std::option::Option::None;
    }

    pub fn has_reason(&self) -> bool {
        self.reason.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reason(&mut self, v: ::std::string::String) {
        self.reason = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reason(&mut self) -> &mut ::std::string::String {
        if self.reason.is_none() {
            self.reason = ::std::option::Option::Some(::std::string::String::new());
        }
        self.reason.as_mut().unwrap()
    }

    // Take field
    pub fn take_reason(&mut self) -> ::std::string::String {
        self.reason.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCSubmitCoachTeammateRating {
    const NAME: &'static str = "CMsgClientToGCSubmitCoachTeammateRating";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.match_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.coach_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.rating = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                34 => {
                    self.reason = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.match_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.coach_account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.rating {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(3, v.value());
        }
        if let Some(v) = self.reason.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(4, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.match_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.coach_account_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.rating {
            os.write_enum(3, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.reason.as_ref() {
            os.write_string(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCSubmitCoachTeammateRating {
        CMsgClientToGCSubmitCoachTeammateRating::new()
    }

    fn clear(&mut self) {
        self.match_id = ::std::option::Option::None;
        self.coach_account_id = ::std::option::Option::None;
        self.rating = ::std::option::Option::None;
        self.reason = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCSubmitCoachTeammateRating {
        static instance: CMsgClientToGCSubmitCoachTeammateRating = CMsgClientToGCSubmitCoachTeammateRating {
            match_id: ::std::option::Option::None,
            coach_account_id: ::std::option::Option::None,
            rating: ::std::option::Option::None,
            reason: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCSubmitCoachTeammateRatingResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCSubmitCoachTeammateRatingResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCSubmitCoachTeammateRatingResponse.result)
    pub result: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_client_to_gcsubmit_coach_teammate_rating_response::EResponse>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCSubmitCoachTeammateRatingResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCSubmitCoachTeammateRatingResponse {
    fn default() -> &'a CMsgClientToGCSubmitCoachTeammateRatingResponse {
        <CMsgClientToGCSubmitCoachTeammateRatingResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCSubmitCoachTeammateRatingResponse {
    pub fn new() -> CMsgClientToGCSubmitCoachTeammateRatingResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgClientToGCSubmitCoachTeammateRatingResponse.EResponse result = 1;

    pub fn result(&self) -> cmsg_client_to_gcsubmit_coach_teammate_rating_response::EResponse {
        match self.result {
            Some(e) => e.enum_value_or(cmsg_client_to_gcsubmit_coach_teammate_rating_response::EResponse::k_eInternalError),
            None => cmsg_client_to_gcsubmit_coach_teammate_rating_response::EResponse::k_eInternalError,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: cmsg_client_to_gcsubmit_coach_teammate_rating_response::EResponse) {
        self.result = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCSubmitCoachTeammateRatingResponse {
    const NAME: &'static str = "CMsgClientToGCSubmitCoachTeammateRatingResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCSubmitCoachTeammateRatingResponse {
        CMsgClientToGCSubmitCoachTeammateRatingResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCSubmitCoachTeammateRatingResponse {
        static instance: CMsgClientToGCSubmitCoachTeammateRatingResponse = CMsgClientToGCSubmitCoachTeammateRatingResponse {
            result: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientToGCSubmitCoachTeammateRatingResponse`
pub mod cmsg_client_to_gcsubmit_coach_teammate_rating_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgClientToGCSubmitCoachTeammateRatingResponse.EResponse)
    pub enum EResponse {
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSubmitCoachTeammateRatingResponse.EResponse.k_eInternalError)
        k_eInternalError = 0,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSubmitCoachTeammateRatingResponse.EResponse.k_eSuccess)
        k_eSuccess = 1,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSubmitCoachTeammateRatingResponse.EResponse.k_eTooBusy)
        k_eTooBusy = 2,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSubmitCoachTeammateRatingResponse.EResponse.k_eDisabled)
        k_eDisabled = 3,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSubmitCoachTeammateRatingResponse.EResponse.k_eInvalidInput)
        k_eInvalidInput = 4,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSubmitCoachTeammateRatingResponse.EResponse.k_eAlreadySubmitted)
        k_eAlreadySubmitted = 5,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSubmitCoachTeammateRatingResponse.EResponse.k_eVotingFinished)
        k_eVotingFinished = 6,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSubmitCoachTeammateRatingResponse.EResponse.k_ePlayerNotInMatch)
        k_ePlayerNotInMatch = 7,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSubmitCoachTeammateRatingResponse.EResponse.k_eCoachNotInMatch)
        k_eCoachNotInMatch = 8,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSubmitCoachTeammateRatingResponse.EResponse.k_ePlayerNotOnCoachTeam)
        k_ePlayerNotOnCoachTeam = 9,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSubmitCoachTeammateRatingResponse.EResponse.k_ePlayerInSamePartyAsCoach)
        k_ePlayerInSamePartyAsCoach = 10,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSubmitCoachTeammateRatingResponse.EResponse.k_eMatchNotEligible)
        k_eMatchNotEligible = 11,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for EResponse {
        const NAME: &'static str = "EResponse";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EResponse> {
            match value {
                0 => ::std::option::Option::Some(EResponse::k_eInternalError),
                1 => ::std::option::Option::Some(EResponse::k_eSuccess),
                2 => ::std::option::Option::Some(EResponse::k_eTooBusy),
                3 => ::std::option::Option::Some(EResponse::k_eDisabled),
                4 => ::std::option::Option::Some(EResponse::k_eInvalidInput),
                5 => ::std::option::Option::Some(EResponse::k_eAlreadySubmitted),
                6 => ::std::option::Option::Some(EResponse::k_eVotingFinished),
                7 => ::std::option::Option::Some(EResponse::k_ePlayerNotInMatch),
                8 => ::std::option::Option::Some(EResponse::k_eCoachNotInMatch),
                9 => ::std::option::Option::Some(EResponse::k_ePlayerNotOnCoachTeam),
                10 => ::std::option::Option::Some(EResponse::k_ePlayerInSamePartyAsCoach),
                11 => ::std::option::Option::Some(EResponse::k_eMatchNotEligible),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EResponse> {
            match str {
                "k_eInternalError" => ::std::option::Option::Some(EResponse::k_eInternalError),
                "k_eSuccess" => ::std::option::Option::Some(EResponse::k_eSuccess),
                "k_eTooBusy" => ::std::option::Option::Some(EResponse::k_eTooBusy),
                "k_eDisabled" => ::std::option::Option::Some(EResponse::k_eDisabled),
                "k_eInvalidInput" => ::std::option::Option::Some(EResponse::k_eInvalidInput),
                "k_eAlreadySubmitted" => ::std::option::Option::Some(EResponse::k_eAlreadySubmitted),
                "k_eVotingFinished" => ::std::option::Option::Some(EResponse::k_eVotingFinished),
                "k_ePlayerNotInMatch" => ::std::option::Option::Some(EResponse::k_ePlayerNotInMatch),
                "k_eCoachNotInMatch" => ::std::option::Option::Some(EResponse::k_eCoachNotInMatch),
                "k_ePlayerNotOnCoachTeam" => ::std::option::Option::Some(EResponse::k_ePlayerNotOnCoachTeam),
                "k_ePlayerInSamePartyAsCoach" => ::std::option::Option::Some(EResponse::k_ePlayerInSamePartyAsCoach),
                "k_eMatchNotEligible" => ::std::option::Option::Some(EResponse::k_eMatchNotEligible),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EResponse] = &[
            EResponse::k_eInternalError,
            EResponse::k_eSuccess,
            EResponse::k_eTooBusy,
            EResponse::k_eDisabled,
            EResponse::k_eInvalidInput,
            EResponse::k_eAlreadySubmitted,
            EResponse::k_eVotingFinished,
            EResponse::k_ePlayerNotInMatch,
            EResponse::k_eCoachNotInMatch,
            EResponse::k_ePlayerNotOnCoachTeam,
            EResponse::k_ePlayerInSamePartyAsCoach,
            EResponse::k_eMatchNotEligible,
        ];
    }

    impl ::std::default::Default for EResponse {
        fn default() -> Self {
            EResponse::k_eInternalError
        }
    }

}

// @@protoc_insertion_point(message:CMsgGCToClientCoachTeammateRatingsChanged)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCToClientCoachTeammateRatingsChanged {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCToClientCoachTeammateRatingsChanged.coach_match)
    pub coach_match: ::steam_vent_proto_common::protobuf::MessageField<CMsgPlayerCoachMatch>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCToClientCoachTeammateRatingsChanged.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCToClientCoachTeammateRatingsChanged {
    fn default() -> &'a CMsgGCToClientCoachTeammateRatingsChanged {
        <CMsgGCToClientCoachTeammateRatingsChanged as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCToClientCoachTeammateRatingsChanged {
    pub fn new() -> CMsgGCToClientCoachTeammateRatingsChanged {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCToClientCoachTeammateRatingsChanged {
    const NAME: &'static str = "CMsgGCToClientCoachTeammateRatingsChanged";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.coach_match)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.coach_match.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.coach_match.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCToClientCoachTeammateRatingsChanged {
        CMsgGCToClientCoachTeammateRatingsChanged::new()
    }

    fn clear(&mut self) {
        self.coach_match.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCToClientCoachTeammateRatingsChanged {
        static instance: CMsgGCToClientCoachTeammateRatingsChanged = CMsgGCToClientCoachTeammateRatingsChanged {
            coach_match: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCRequestPrivateCoachingSession)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCRequestPrivateCoachingSession {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCRequestPrivateCoachingSession.language)
    pub language: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCRequestPrivateCoachingSession.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCRequestPrivateCoachingSession {
    fn default() -> &'a CMsgClientToGCRequestPrivateCoachingSession {
        <CMsgClientToGCRequestPrivateCoachingSession as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCRequestPrivateCoachingSession {
    pub fn new() -> CMsgClientToGCRequestPrivateCoachingSession {
        ::std::default::Default::default()
    }

    // optional uint32 language = 1;

    pub fn language(&self) -> u32 {
        self.language.unwrap_or(0)
    }

    pub fn clear_language(&mut self) {
        self.language = ::std::option::Option::None;
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: u32) {
        self.language = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCRequestPrivateCoachingSession {
    const NAME: &'static str = "CMsgClientToGCRequestPrivateCoachingSession";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.language = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.language {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.language {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCRequestPrivateCoachingSession {
        CMsgClientToGCRequestPrivateCoachingSession::new()
    }

    fn clear(&mut self) {
        self.language = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCRequestPrivateCoachingSession {
        static instance: CMsgClientToGCRequestPrivateCoachingSession = CMsgClientToGCRequestPrivateCoachingSession {
            language: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCRequestPrivateCoachingSessionResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCRequestPrivateCoachingSessionResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCRequestPrivateCoachingSessionResponse.result)
    pub result: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_client_to_gcrequest_private_coaching_session_response::EResponse>>,
    // @@protoc_insertion_point(field:CMsgClientToGCRequestPrivateCoachingSessionResponse.coaching_session)
    pub coaching_session: ::steam_vent_proto_common::protobuf::MessageField<CMsgPrivateCoachingSession>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCRequestPrivateCoachingSessionResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCRequestPrivateCoachingSessionResponse {
    fn default() -> &'a CMsgClientToGCRequestPrivateCoachingSessionResponse {
        <CMsgClientToGCRequestPrivateCoachingSessionResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCRequestPrivateCoachingSessionResponse {
    pub fn new() -> CMsgClientToGCRequestPrivateCoachingSessionResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgClientToGCRequestPrivateCoachingSessionResponse.EResponse result = 1;

    pub fn result(&self) -> cmsg_client_to_gcrequest_private_coaching_session_response::EResponse {
        match self.result {
            Some(e) => e.enum_value_or(cmsg_client_to_gcrequest_private_coaching_session_response::EResponse::k_eInternalError),
            None => cmsg_client_to_gcrequest_private_coaching_session_response::EResponse::k_eInternalError,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: cmsg_client_to_gcrequest_private_coaching_session_response::EResponse) {
        self.result = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCRequestPrivateCoachingSessionResponse {
    const NAME: &'static str = "CMsgClientToGCRequestPrivateCoachingSessionResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.coaching_session)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.coaching_session.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.coaching_session.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCRequestPrivateCoachingSessionResponse {
        CMsgClientToGCRequestPrivateCoachingSessionResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.coaching_session.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCRequestPrivateCoachingSessionResponse {
        static instance: CMsgClientToGCRequestPrivateCoachingSessionResponse = CMsgClientToGCRequestPrivateCoachingSessionResponse {
            result: ::std::option::Option::None,
            coaching_session: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientToGCRequestPrivateCoachingSessionResponse`
pub mod cmsg_client_to_gcrequest_private_coaching_session_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgClientToGCRequestPrivateCoachingSessionResponse.EResponse)
    pub enum EResponse {
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRequestPrivateCoachingSessionResponse.EResponse.k_eInternalError)
        k_eInternalError = 0,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRequestPrivateCoachingSessionResponse.EResponse.k_eSuccess)
        k_eSuccess = 1,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRequestPrivateCoachingSessionResponse.EResponse.k_eTooBusy)
        k_eTooBusy = 2,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRequestPrivateCoachingSessionResponse.EResponse.k_eDisabled)
        k_eDisabled = 3,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRequestPrivateCoachingSessionResponse.EResponse.k_eTimeout)
        k_eTimeout = 4,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRequestPrivateCoachingSessionResponse.EResponse.k_eAlreadyInSession)
        k_eAlreadyInSession = 5,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRequestPrivateCoachingSessionResponse.EResponse.k_eBehaviorScoreTooLow)
        k_eBehaviorScoreTooLow = 6,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRequestPrivateCoachingSessionResponse.EResponse.k_eInvalidLobbyType)
        k_eInvalidLobbyType = 7,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRequestPrivateCoachingSessionResponse.EResponse.k_eLowPriorityPlayer)
        k_eLowPriorityPlayer = 8,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRequestPrivateCoachingSessionResponse.EResponse.k_eLowPriorityLobby)
        k_eLowPriorityLobby = 9,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRequestPrivateCoachingSessionResponse.EResponse.k_eLowPriorityParty)
        k_eLowPriorityParty = 10,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRequestPrivateCoachingSessionResponse.EResponse.k_eTextChatBan)
        k_eTextChatBan = 11,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRequestPrivateCoachingSessionResponse.EResponse.k_eVoiceChatBan)
        k_eVoiceChatBan = 12,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRequestPrivateCoachingSessionResponse.EResponse.k_eMatchBan)
        k_eMatchBan = 13,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for EResponse {
        const NAME: &'static str = "EResponse";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EResponse> {
            match value {
                0 => ::std::option::Option::Some(EResponse::k_eInternalError),
                1 => ::std::option::Option::Some(EResponse::k_eSuccess),
                2 => ::std::option::Option::Some(EResponse::k_eTooBusy),
                3 => ::std::option::Option::Some(EResponse::k_eDisabled),
                4 => ::std::option::Option::Some(EResponse::k_eTimeout),
                5 => ::std::option::Option::Some(EResponse::k_eAlreadyInSession),
                6 => ::std::option::Option::Some(EResponse::k_eBehaviorScoreTooLow),
                7 => ::std::option::Option::Some(EResponse::k_eInvalidLobbyType),
                8 => ::std::option::Option::Some(EResponse::k_eLowPriorityPlayer),
                9 => ::std::option::Option::Some(EResponse::k_eLowPriorityLobby),
                10 => ::std::option::Option::Some(EResponse::k_eLowPriorityParty),
                11 => ::std::option::Option::Some(EResponse::k_eTextChatBan),
                12 => ::std::option::Option::Some(EResponse::k_eVoiceChatBan),
                13 => ::std::option::Option::Some(EResponse::k_eMatchBan),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EResponse> {
            match str {
                "k_eInternalError" => ::std::option::Option::Some(EResponse::k_eInternalError),
                "k_eSuccess" => ::std::option::Option::Some(EResponse::k_eSuccess),
                "k_eTooBusy" => ::std::option::Option::Some(EResponse::k_eTooBusy),
                "k_eDisabled" => ::std::option::Option::Some(EResponse::k_eDisabled),
                "k_eTimeout" => ::std::option::Option::Some(EResponse::k_eTimeout),
                "k_eAlreadyInSession" => ::std::option::Option::Some(EResponse::k_eAlreadyInSession),
                "k_eBehaviorScoreTooLow" => ::std::option::Option::Some(EResponse::k_eBehaviorScoreTooLow),
                "k_eInvalidLobbyType" => ::std::option::Option::Some(EResponse::k_eInvalidLobbyType),
                "k_eLowPriorityPlayer" => ::std::option::Option::Some(EResponse::k_eLowPriorityPlayer),
                "k_eLowPriorityLobby" => ::std::option::Option::Some(EResponse::k_eLowPriorityLobby),
                "k_eLowPriorityParty" => ::std::option::Option::Some(EResponse::k_eLowPriorityParty),
                "k_eTextChatBan" => ::std::option::Option::Some(EResponse::k_eTextChatBan),
                "k_eVoiceChatBan" => ::std::option::Option::Some(EResponse::k_eVoiceChatBan),
                "k_eMatchBan" => ::std::option::Option::Some(EResponse::k_eMatchBan),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EResponse] = &[
            EResponse::k_eInternalError,
            EResponse::k_eSuccess,
            EResponse::k_eTooBusy,
            EResponse::k_eDisabled,
            EResponse::k_eTimeout,
            EResponse::k_eAlreadyInSession,
            EResponse::k_eBehaviorScoreTooLow,
            EResponse::k_eInvalidLobbyType,
            EResponse::k_eLowPriorityPlayer,
            EResponse::k_eLowPriorityLobby,
            EResponse::k_eLowPriorityParty,
            EResponse::k_eTextChatBan,
            EResponse::k_eVoiceChatBan,
            EResponse::k_eMatchBan,
        ];
    }

    impl ::std::default::Default for EResponse {
        fn default() -> Self {
            EResponse::k_eInternalError
        }
    }

}

// @@protoc_insertion_point(message:CMsgClientToGCAcceptPrivateCoachingSession)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCAcceptPrivateCoachingSession {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCAcceptPrivateCoachingSession.coaching_session_id)
    pub coaching_session_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCAcceptPrivateCoachingSession.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCAcceptPrivateCoachingSession {
    fn default() -> &'a CMsgClientToGCAcceptPrivateCoachingSession {
        <CMsgClientToGCAcceptPrivateCoachingSession as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCAcceptPrivateCoachingSession {
    pub fn new() -> CMsgClientToGCAcceptPrivateCoachingSession {
        ::std::default::Default::default()
    }

    // optional uint64 coaching_session_id = 1;

    pub fn coaching_session_id(&self) -> u64 {
        self.coaching_session_id.unwrap_or(0)
    }

    pub fn clear_coaching_session_id(&mut self) {
        self.coaching_session_id = ::std::option::Option::None;
    }

    pub fn has_coaching_session_id(&self) -> bool {
        self.coaching_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_coaching_session_id(&mut self, v: u64) {
        self.coaching_session_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCAcceptPrivateCoachingSession {
    const NAME: &'static str = "CMsgClientToGCAcceptPrivateCoachingSession";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.coaching_session_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.coaching_session_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.coaching_session_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCAcceptPrivateCoachingSession {
        CMsgClientToGCAcceptPrivateCoachingSession::new()
    }

    fn clear(&mut self) {
        self.coaching_session_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCAcceptPrivateCoachingSession {
        static instance: CMsgClientToGCAcceptPrivateCoachingSession = CMsgClientToGCAcceptPrivateCoachingSession {
            coaching_session_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCAcceptPrivateCoachingSessionResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCAcceptPrivateCoachingSessionResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCAcceptPrivateCoachingSessionResponse.result)
    pub result: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_client_to_gcaccept_private_coaching_session_response::EResponse>>,
    // @@protoc_insertion_point(field:CMsgClientToGCAcceptPrivateCoachingSessionResponse.coaching_session)
    pub coaching_session: ::steam_vent_proto_common::protobuf::MessageField<CMsgPrivateCoachingSession>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCAcceptPrivateCoachingSessionResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCAcceptPrivateCoachingSessionResponse {
    fn default() -> &'a CMsgClientToGCAcceptPrivateCoachingSessionResponse {
        <CMsgClientToGCAcceptPrivateCoachingSessionResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCAcceptPrivateCoachingSessionResponse {
    pub fn new() -> CMsgClientToGCAcceptPrivateCoachingSessionResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgClientToGCAcceptPrivateCoachingSessionResponse.EResponse result = 1;

    pub fn result(&self) -> cmsg_client_to_gcaccept_private_coaching_session_response::EResponse {
        match self.result {
            Some(e) => e.enum_value_or(cmsg_client_to_gcaccept_private_coaching_session_response::EResponse::k_eInternalError),
            None => cmsg_client_to_gcaccept_private_coaching_session_response::EResponse::k_eInternalError,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: cmsg_client_to_gcaccept_private_coaching_session_response::EResponse) {
        self.result = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCAcceptPrivateCoachingSessionResponse {
    const NAME: &'static str = "CMsgClientToGCAcceptPrivateCoachingSessionResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.coaching_session)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.coaching_session.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.coaching_session.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCAcceptPrivateCoachingSessionResponse {
        CMsgClientToGCAcceptPrivateCoachingSessionResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.coaching_session.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCAcceptPrivateCoachingSessionResponse {
        static instance: CMsgClientToGCAcceptPrivateCoachingSessionResponse = CMsgClientToGCAcceptPrivateCoachingSessionResponse {
            result: ::std::option::Option::None,
            coaching_session: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientToGCAcceptPrivateCoachingSessionResponse`
pub mod cmsg_client_to_gcaccept_private_coaching_session_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgClientToGCAcceptPrivateCoachingSessionResponse.EResponse)
    pub enum EResponse {
        // @@protoc_insertion_point(enum_value:CMsgClientToGCAcceptPrivateCoachingSessionResponse.EResponse.k_eInternalError)
        k_eInternalError = 0,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCAcceptPrivateCoachingSessionResponse.EResponse.k_eSuccess)
        k_eSuccess = 1,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCAcceptPrivateCoachingSessionResponse.EResponse.k_eTooBusy)
        k_eTooBusy = 2,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCAcceptPrivateCoachingSessionResponse.EResponse.k_eDisabled)
        k_eDisabled = 3,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCAcceptPrivateCoachingSessionResponse.EResponse.k_eTimeout)
        k_eTimeout = 4,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCAcceptPrivateCoachingSessionResponse.EResponse.k_eUnknownSession)
        k_eUnknownSession = 5,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCAcceptPrivateCoachingSessionResponse.EResponse.k_eAlreadyHasCoach)
        k_eAlreadyHasCoach = 6,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCAcceptPrivateCoachingSessionResponse.EResponse.k_eAlreadyHasSession)
        k_eAlreadyHasSession = 7,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCAcceptPrivateCoachingSessionResponse.EResponse.k_eInvalidUser)
        k_eInvalidUser = 8,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCAcceptPrivateCoachingSessionResponse.EResponse.k_eAlreadyFinished)
        k_eAlreadyFinished = 9,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCAcceptPrivateCoachingSessionResponse.EResponse.k_eInvalidLobbyType)
        k_eInvalidLobbyType = 10,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCAcceptPrivateCoachingSessionResponse.EResponse.k_eAlreadyInLobby)
        k_eAlreadyInLobby = 11,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCAcceptPrivateCoachingSessionResponse.EResponse.k_eLobbyIsLan)
        k_eLobbyIsLan = 12,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCAcceptPrivateCoachingSessionResponse.EResponse.k_eLobbyIsLeague)
        k_eLobbyIsLeague = 13,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCAcceptPrivateCoachingSessionResponse.EResponse.k_eInvalidLobbyState)
        k_eInvalidLobbyState = 14,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCAcceptPrivateCoachingSessionResponse.EResponse.k_eRequesterIsNotPlayer)
        k_eRequesterIsNotPlayer = 15,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCAcceptPrivateCoachingSessionResponse.EResponse.k_eTooManyCoaches)
        k_eTooManyCoaches = 16,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCAcceptPrivateCoachingSessionResponse.EResponse.k_eCoachWasPlayer)
        k_eCoachWasPlayer = 17,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCAcceptPrivateCoachingSessionResponse.EResponse.k_eCoachBehaviorScoreTooLow)
        k_eCoachBehaviorScoreTooLow = 18,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCAcceptPrivateCoachingSessionResponse.EResponse.k_eCoachRankNotCalibrated)
        k_eCoachRankNotCalibrated = 19,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCAcceptPrivateCoachingSessionResponse.EResponse.k_eCoachRankNotEligible)
        k_eCoachRankNotEligible = 20,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCAcceptPrivateCoachingSessionResponse.EResponse.k_eCoachRankTooLow)
        k_eCoachRankTooLow = 21,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for EResponse {
        const NAME: &'static str = "EResponse";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EResponse> {
            match value {
                0 => ::std::option::Option::Some(EResponse::k_eInternalError),
                1 => ::std::option::Option::Some(EResponse::k_eSuccess),
                2 => ::std::option::Option::Some(EResponse::k_eTooBusy),
                3 => ::std::option::Option::Some(EResponse::k_eDisabled),
                4 => ::std::option::Option::Some(EResponse::k_eTimeout),
                5 => ::std::option::Option::Some(EResponse::k_eUnknownSession),
                6 => ::std::option::Option::Some(EResponse::k_eAlreadyHasCoach),
                7 => ::std::option::Option::Some(EResponse::k_eAlreadyHasSession),
                8 => ::std::option::Option::Some(EResponse::k_eInvalidUser),
                9 => ::std::option::Option::Some(EResponse::k_eAlreadyFinished),
                10 => ::std::option::Option::Some(EResponse::k_eInvalidLobbyType),
                11 => ::std::option::Option::Some(EResponse::k_eAlreadyInLobby),
                12 => ::std::option::Option::Some(EResponse::k_eLobbyIsLan),
                13 => ::std::option::Option::Some(EResponse::k_eLobbyIsLeague),
                14 => ::std::option::Option::Some(EResponse::k_eInvalidLobbyState),
                15 => ::std::option::Option::Some(EResponse::k_eRequesterIsNotPlayer),
                16 => ::std::option::Option::Some(EResponse::k_eTooManyCoaches),
                17 => ::std::option::Option::Some(EResponse::k_eCoachWasPlayer),
                18 => ::std::option::Option::Some(EResponse::k_eCoachBehaviorScoreTooLow),
                19 => ::std::option::Option::Some(EResponse::k_eCoachRankNotCalibrated),
                20 => ::std::option::Option::Some(EResponse::k_eCoachRankNotEligible),
                21 => ::std::option::Option::Some(EResponse::k_eCoachRankTooLow),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EResponse> {
            match str {
                "k_eInternalError" => ::std::option::Option::Some(EResponse::k_eInternalError),
                "k_eSuccess" => ::std::option::Option::Some(EResponse::k_eSuccess),
                "k_eTooBusy" => ::std::option::Option::Some(EResponse::k_eTooBusy),
                "k_eDisabled" => ::std::option::Option::Some(EResponse::k_eDisabled),
                "k_eTimeout" => ::std::option::Option::Some(EResponse::k_eTimeout),
                "k_eUnknownSession" => ::std::option::Option::Some(EResponse::k_eUnknownSession),
                "k_eAlreadyHasCoach" => ::std::option::Option::Some(EResponse::k_eAlreadyHasCoach),
                "k_eAlreadyHasSession" => ::std::option::Option::Some(EResponse::k_eAlreadyHasSession),
                "k_eInvalidUser" => ::std::option::Option::Some(EResponse::k_eInvalidUser),
                "k_eAlreadyFinished" => ::std::option::Option::Some(EResponse::k_eAlreadyFinished),
                "k_eInvalidLobbyType" => ::std::option::Option::Some(EResponse::k_eInvalidLobbyType),
                "k_eAlreadyInLobby" => ::std::option::Option::Some(EResponse::k_eAlreadyInLobby),
                "k_eLobbyIsLan" => ::std::option::Option::Some(EResponse::k_eLobbyIsLan),
                "k_eLobbyIsLeague" => ::std::option::Option::Some(EResponse::k_eLobbyIsLeague),
                "k_eInvalidLobbyState" => ::std::option::Option::Some(EResponse::k_eInvalidLobbyState),
                "k_eRequesterIsNotPlayer" => ::std::option::Option::Some(EResponse::k_eRequesterIsNotPlayer),
                "k_eTooManyCoaches" => ::std::option::Option::Some(EResponse::k_eTooManyCoaches),
                "k_eCoachWasPlayer" => ::std::option::Option::Some(EResponse::k_eCoachWasPlayer),
                "k_eCoachBehaviorScoreTooLow" => ::std::option::Option::Some(EResponse::k_eCoachBehaviorScoreTooLow),
                "k_eCoachRankNotCalibrated" => ::std::option::Option::Some(EResponse::k_eCoachRankNotCalibrated),
                "k_eCoachRankNotEligible" => ::std::option::Option::Some(EResponse::k_eCoachRankNotEligible),
                "k_eCoachRankTooLow" => ::std::option::Option::Some(EResponse::k_eCoachRankTooLow),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EResponse] = &[
            EResponse::k_eInternalError,
            EResponse::k_eSuccess,
            EResponse::k_eTooBusy,
            EResponse::k_eDisabled,
            EResponse::k_eTimeout,
            EResponse::k_eUnknownSession,
            EResponse::k_eAlreadyHasCoach,
            EResponse::k_eAlreadyHasSession,
            EResponse::k_eInvalidUser,
            EResponse::k_eAlreadyFinished,
            EResponse::k_eInvalidLobbyType,
            EResponse::k_eAlreadyInLobby,
            EResponse::k_eLobbyIsLan,
            EResponse::k_eLobbyIsLeague,
            EResponse::k_eInvalidLobbyState,
            EResponse::k_eRequesterIsNotPlayer,
            EResponse::k_eTooManyCoaches,
            EResponse::k_eCoachWasPlayer,
            EResponse::k_eCoachBehaviorScoreTooLow,
            EResponse::k_eCoachRankNotCalibrated,
            EResponse::k_eCoachRankNotEligible,
            EResponse::k_eCoachRankTooLow,
        ];
    }

    impl ::std::default::Default for EResponse {
        fn default() -> Self {
            EResponse::k_eInternalError
        }
    }

}

// @@protoc_insertion_point(message:CMsgClientToGCLeavePrivateCoachingSession)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCLeavePrivateCoachingSession {
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCLeavePrivateCoachingSession.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCLeavePrivateCoachingSession {
    fn default() -> &'a CMsgClientToGCLeavePrivateCoachingSession {
        <CMsgClientToGCLeavePrivateCoachingSession as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCLeavePrivateCoachingSession {
    pub fn new() -> CMsgClientToGCLeavePrivateCoachingSession {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCLeavePrivateCoachingSession {
    const NAME: &'static str = "CMsgClientToGCLeavePrivateCoachingSession";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCLeavePrivateCoachingSession {
        CMsgClientToGCLeavePrivateCoachingSession::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCLeavePrivateCoachingSession {
        static instance: CMsgClientToGCLeavePrivateCoachingSession = CMsgClientToGCLeavePrivateCoachingSession {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCLeavePrivateCoachingSessionResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCLeavePrivateCoachingSessionResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCLeavePrivateCoachingSessionResponse.result)
    pub result: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_client_to_gcleave_private_coaching_session_response::EResponse>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCLeavePrivateCoachingSessionResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCLeavePrivateCoachingSessionResponse {
    fn default() -> &'a CMsgClientToGCLeavePrivateCoachingSessionResponse {
        <CMsgClientToGCLeavePrivateCoachingSessionResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCLeavePrivateCoachingSessionResponse {
    pub fn new() -> CMsgClientToGCLeavePrivateCoachingSessionResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgClientToGCLeavePrivateCoachingSessionResponse.EResponse result = 1;

    pub fn result(&self) -> cmsg_client_to_gcleave_private_coaching_session_response::EResponse {
        match self.result {
            Some(e) => e.enum_value_or(cmsg_client_to_gcleave_private_coaching_session_response::EResponse::k_eInternalError),
            None => cmsg_client_to_gcleave_private_coaching_session_response::EResponse::k_eInternalError,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: cmsg_client_to_gcleave_private_coaching_session_response::EResponse) {
        self.result = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCLeavePrivateCoachingSessionResponse {
    const NAME: &'static str = "CMsgClientToGCLeavePrivateCoachingSessionResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCLeavePrivateCoachingSessionResponse {
        CMsgClientToGCLeavePrivateCoachingSessionResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCLeavePrivateCoachingSessionResponse {
        static instance: CMsgClientToGCLeavePrivateCoachingSessionResponse = CMsgClientToGCLeavePrivateCoachingSessionResponse {
            result: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientToGCLeavePrivateCoachingSessionResponse`
pub mod cmsg_client_to_gcleave_private_coaching_session_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgClientToGCLeavePrivateCoachingSessionResponse.EResponse)
    pub enum EResponse {
        // @@protoc_insertion_point(enum_value:CMsgClientToGCLeavePrivateCoachingSessionResponse.EResponse.k_eInternalError)
        k_eInternalError = 0,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCLeavePrivateCoachingSessionResponse.EResponse.k_eSuccess)
        k_eSuccess = 1,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCLeavePrivateCoachingSessionResponse.EResponse.k_eTooBusy)
        k_eTooBusy = 2,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCLeavePrivateCoachingSessionResponse.EResponse.k_eDisabled)
        k_eDisabled = 3,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCLeavePrivateCoachingSessionResponse.EResponse.k_eTimeout)
        k_eTimeout = 4,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCLeavePrivateCoachingSessionResponse.EResponse.k_eNoSession)
        k_eNoSession = 5,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCLeavePrivateCoachingSessionResponse.EResponse.k_eAlreadyLeft)
        k_eAlreadyLeft = 6,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for EResponse {
        const NAME: &'static str = "EResponse";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EResponse> {
            match value {
                0 => ::std::option::Option::Some(EResponse::k_eInternalError),
                1 => ::std::option::Option::Some(EResponse::k_eSuccess),
                2 => ::std::option::Option::Some(EResponse::k_eTooBusy),
                3 => ::std::option::Option::Some(EResponse::k_eDisabled),
                4 => ::std::option::Option::Some(EResponse::k_eTimeout),
                5 => ::std::option::Option::Some(EResponse::k_eNoSession),
                6 => ::std::option::Option::Some(EResponse::k_eAlreadyLeft),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EResponse> {
            match str {
                "k_eInternalError" => ::std::option::Option::Some(EResponse::k_eInternalError),
                "k_eSuccess" => ::std::option::Option::Some(EResponse::k_eSuccess),
                "k_eTooBusy" => ::std::option::Option::Some(EResponse::k_eTooBusy),
                "k_eDisabled" => ::std::option::Option::Some(EResponse::k_eDisabled),
                "k_eTimeout" => ::std::option::Option::Some(EResponse::k_eTimeout),
                "k_eNoSession" => ::std::option::Option::Some(EResponse::k_eNoSession),
                "k_eAlreadyLeft" => ::std::option::Option::Some(EResponse::k_eAlreadyLeft),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EResponse] = &[
            EResponse::k_eInternalError,
            EResponse::k_eSuccess,
            EResponse::k_eTooBusy,
            EResponse::k_eDisabled,
            EResponse::k_eTimeout,
            EResponse::k_eNoSession,
            EResponse::k_eAlreadyLeft,
        ];
    }

    impl ::std::default::Default for EResponse {
        fn default() -> Self {
            EResponse::k_eInternalError
        }
    }

}

// @@protoc_insertion_point(message:CMsgClientToGCGetCurrentPrivateCoachingSession)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCGetCurrentPrivateCoachingSession {
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCGetCurrentPrivateCoachingSession.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCGetCurrentPrivateCoachingSession {
    fn default() -> &'a CMsgClientToGCGetCurrentPrivateCoachingSession {
        <CMsgClientToGCGetCurrentPrivateCoachingSession as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCGetCurrentPrivateCoachingSession {
    pub fn new() -> CMsgClientToGCGetCurrentPrivateCoachingSession {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCGetCurrentPrivateCoachingSession {
    const NAME: &'static str = "CMsgClientToGCGetCurrentPrivateCoachingSession";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCGetCurrentPrivateCoachingSession {
        CMsgClientToGCGetCurrentPrivateCoachingSession::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCGetCurrentPrivateCoachingSession {
        static instance: CMsgClientToGCGetCurrentPrivateCoachingSession = CMsgClientToGCGetCurrentPrivateCoachingSession {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCGetCurrentPrivateCoachingSessionResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCGetCurrentPrivateCoachingSessionResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCGetCurrentPrivateCoachingSessionResponse.result)
    pub result: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_client_to_gcget_current_private_coaching_session_response::EResponse>>,
    // @@protoc_insertion_point(field:CMsgClientToGCGetCurrentPrivateCoachingSessionResponse.current_session)
    pub current_session: ::steam_vent_proto_common::protobuf::MessageField<CMsgPrivateCoachingSession>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCGetCurrentPrivateCoachingSessionResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCGetCurrentPrivateCoachingSessionResponse {
    fn default() -> &'a CMsgClientToGCGetCurrentPrivateCoachingSessionResponse {
        <CMsgClientToGCGetCurrentPrivateCoachingSessionResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCGetCurrentPrivateCoachingSessionResponse {
    pub fn new() -> CMsgClientToGCGetCurrentPrivateCoachingSessionResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgClientToGCGetCurrentPrivateCoachingSessionResponse.EResponse result = 1;

    pub fn result(&self) -> cmsg_client_to_gcget_current_private_coaching_session_response::EResponse {
        match self.result {
            Some(e) => e.enum_value_or(cmsg_client_to_gcget_current_private_coaching_session_response::EResponse::k_eInternalError),
            None => cmsg_client_to_gcget_current_private_coaching_session_response::EResponse::k_eInternalError,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: cmsg_client_to_gcget_current_private_coaching_session_response::EResponse) {
        self.result = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCGetCurrentPrivateCoachingSessionResponse {
    const NAME: &'static str = "CMsgClientToGCGetCurrentPrivateCoachingSessionResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.current_session)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.current_session.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.current_session.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCGetCurrentPrivateCoachingSessionResponse {
        CMsgClientToGCGetCurrentPrivateCoachingSessionResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.current_session.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCGetCurrentPrivateCoachingSessionResponse {
        static instance: CMsgClientToGCGetCurrentPrivateCoachingSessionResponse = CMsgClientToGCGetCurrentPrivateCoachingSessionResponse {
            result: ::std::option::Option::None,
            current_session: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientToGCGetCurrentPrivateCoachingSessionResponse`
pub mod cmsg_client_to_gcget_current_private_coaching_session_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgClientToGCGetCurrentPrivateCoachingSessionResponse.EResponse)
    pub enum EResponse {
        // @@protoc_insertion_point(enum_value:CMsgClientToGCGetCurrentPrivateCoachingSessionResponse.EResponse.k_eInternalError)
        k_eInternalError = 0,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCGetCurrentPrivateCoachingSessionResponse.EResponse.k_eSuccess)
        k_eSuccess = 1,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCGetCurrentPrivateCoachingSessionResponse.EResponse.k_eTooBusy)
        k_eTooBusy = 2,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCGetCurrentPrivateCoachingSessionResponse.EResponse.k_eDisabled)
        k_eDisabled = 3,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCGetCurrentPrivateCoachingSessionResponse.EResponse.k_eTimeout)
        k_eTimeout = 4,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for EResponse {
        const NAME: &'static str = "EResponse";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EResponse> {
            match value {
                0 => ::std::option::Option::Some(EResponse::k_eInternalError),
                1 => ::std::option::Option::Some(EResponse::k_eSuccess),
                2 => ::std::option::Option::Some(EResponse::k_eTooBusy),
                3 => ::std::option::Option::Some(EResponse::k_eDisabled),
                4 => ::std::option::Option::Some(EResponse::k_eTimeout),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EResponse> {
            match str {
                "k_eInternalError" => ::std::option::Option::Some(EResponse::k_eInternalError),
                "k_eSuccess" => ::std::option::Option::Some(EResponse::k_eSuccess),
                "k_eTooBusy" => ::std::option::Option::Some(EResponse::k_eTooBusy),
                "k_eDisabled" => ::std::option::Option::Some(EResponse::k_eDisabled),
                "k_eTimeout" => ::std::option::Option::Some(EResponse::k_eTimeout),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EResponse] = &[
            EResponse::k_eInternalError,
            EResponse::k_eSuccess,
            EResponse::k_eTooBusy,
            EResponse::k_eDisabled,
            EResponse::k_eTimeout,
        ];
    }

    impl ::std::default::Default for EResponse {
        fn default() -> Self {
            EResponse::k_eInternalError
        }
    }

}

// @@protoc_insertion_point(message:CMsgGCToClientPrivateCoachingSessionUpdated)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCToClientPrivateCoachingSessionUpdated {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCToClientPrivateCoachingSessionUpdated.coaching_session)
    pub coaching_session: ::steam_vent_proto_common::protobuf::MessageField<CMsgPrivateCoachingSession>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCToClientPrivateCoachingSessionUpdated.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCToClientPrivateCoachingSessionUpdated {
    fn default() -> &'a CMsgGCToClientPrivateCoachingSessionUpdated {
        <CMsgGCToClientPrivateCoachingSessionUpdated as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCToClientPrivateCoachingSessionUpdated {
    pub fn new() -> CMsgGCToClientPrivateCoachingSessionUpdated {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCToClientPrivateCoachingSessionUpdated {
    const NAME: &'static str = "CMsgGCToClientPrivateCoachingSessionUpdated";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.coaching_session)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.coaching_session.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.coaching_session.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCToClientPrivateCoachingSessionUpdated {
        CMsgGCToClientPrivateCoachingSessionUpdated::new()
    }

    fn clear(&mut self) {
        self.coaching_session.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCToClientPrivateCoachingSessionUpdated {
        static instance: CMsgGCToClientPrivateCoachingSessionUpdated = CMsgGCToClientPrivateCoachingSessionUpdated {
            coaching_session: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCSubmitPrivateCoachingSessionRating)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCSubmitPrivateCoachingSessionRating {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCSubmitPrivateCoachingSessionRating.coaching_session_id)
    pub coaching_session_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgClientToGCSubmitPrivateCoachingSessionRating.session_rating)
    pub session_rating: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<ECoachTeammateRating>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCSubmitPrivateCoachingSessionRating.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCSubmitPrivateCoachingSessionRating {
    fn default() -> &'a CMsgClientToGCSubmitPrivateCoachingSessionRating {
        <CMsgClientToGCSubmitPrivateCoachingSessionRating as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCSubmitPrivateCoachingSessionRating {
    pub fn new() -> CMsgClientToGCSubmitPrivateCoachingSessionRating {
        ::std::default::Default::default()
    }

    // optional uint64 coaching_session_id = 1;

    pub fn coaching_session_id(&self) -> u64 {
        self.coaching_session_id.unwrap_or(0)
    }

    pub fn clear_coaching_session_id(&mut self) {
        self.coaching_session_id = ::std::option::Option::None;
    }

    pub fn has_coaching_session_id(&self) -> bool {
        self.coaching_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_coaching_session_id(&mut self, v: u64) {
        self.coaching_session_id = ::std::option::Option::Some(v);
    }

    // optional .ECoachTeammateRating session_rating = 2;

    pub fn session_rating(&self) -> ECoachTeammateRating {
        match self.session_rating {
            Some(e) => e.enum_value_or(ECoachTeammateRating::k_ECoachTeammateRating_None),
            None => ECoachTeammateRating::k_ECoachTeammateRating_None,
        }
    }

    pub fn clear_session_rating(&mut self) {
        self.session_rating = ::std::option::Option::None;
    }

    pub fn has_session_rating(&self) -> bool {
        self.session_rating.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session_rating(&mut self, v: ECoachTeammateRating) {
        self.session_rating = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCSubmitPrivateCoachingSessionRating {
    const NAME: &'static str = "CMsgClientToGCSubmitPrivateCoachingSessionRating";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.coaching_session_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.session_rating = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.coaching_session_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.session_rating {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(2, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.coaching_session_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.session_rating {
            os.write_enum(2, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCSubmitPrivateCoachingSessionRating {
        CMsgClientToGCSubmitPrivateCoachingSessionRating::new()
    }

    fn clear(&mut self) {
        self.coaching_session_id = ::std::option::Option::None;
        self.session_rating = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCSubmitPrivateCoachingSessionRating {
        static instance: CMsgClientToGCSubmitPrivateCoachingSessionRating = CMsgClientToGCSubmitPrivateCoachingSessionRating {
            coaching_session_id: ::std::option::Option::None,
            session_rating: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCSubmitPrivateCoachingSessionRatingResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCSubmitPrivateCoachingSessionRatingResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCSubmitPrivateCoachingSessionRatingResponse.result)
    pub result: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_client_to_gcsubmit_private_coaching_session_rating_response::EResponse>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCSubmitPrivateCoachingSessionRatingResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCSubmitPrivateCoachingSessionRatingResponse {
    fn default() -> &'a CMsgClientToGCSubmitPrivateCoachingSessionRatingResponse {
        <CMsgClientToGCSubmitPrivateCoachingSessionRatingResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCSubmitPrivateCoachingSessionRatingResponse {
    pub fn new() -> CMsgClientToGCSubmitPrivateCoachingSessionRatingResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgClientToGCSubmitPrivateCoachingSessionRatingResponse.EResponse result = 1;

    pub fn result(&self) -> cmsg_client_to_gcsubmit_private_coaching_session_rating_response::EResponse {
        match self.result {
            Some(e) => e.enum_value_or(cmsg_client_to_gcsubmit_private_coaching_session_rating_response::EResponse::k_eInternalError),
            None => cmsg_client_to_gcsubmit_private_coaching_session_rating_response::EResponse::k_eInternalError,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: cmsg_client_to_gcsubmit_private_coaching_session_rating_response::EResponse) {
        self.result = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCSubmitPrivateCoachingSessionRatingResponse {
    const NAME: &'static str = "CMsgClientToGCSubmitPrivateCoachingSessionRatingResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCSubmitPrivateCoachingSessionRatingResponse {
        CMsgClientToGCSubmitPrivateCoachingSessionRatingResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCSubmitPrivateCoachingSessionRatingResponse {
        static instance: CMsgClientToGCSubmitPrivateCoachingSessionRatingResponse = CMsgClientToGCSubmitPrivateCoachingSessionRatingResponse {
            result: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientToGCSubmitPrivateCoachingSessionRatingResponse`
pub mod cmsg_client_to_gcsubmit_private_coaching_session_rating_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgClientToGCSubmitPrivateCoachingSessionRatingResponse.EResponse)
    pub enum EResponse {
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSubmitPrivateCoachingSessionRatingResponse.EResponse.k_eInternalError)
        k_eInternalError = 0,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSubmitPrivateCoachingSessionRatingResponse.EResponse.k_eSuccess)
        k_eSuccess = 1,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSubmitPrivateCoachingSessionRatingResponse.EResponse.k_eTooBusy)
        k_eTooBusy = 2,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSubmitPrivateCoachingSessionRatingResponse.EResponse.k_eDisabled)
        k_eDisabled = 3,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSubmitPrivateCoachingSessionRatingResponse.EResponse.k_eTimeout)
        k_eTimeout = 4,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSubmitPrivateCoachingSessionRatingResponse.EResponse.k_eUnknownSession)
        k_eUnknownSession = 5,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSubmitPrivateCoachingSessionRatingResponse.EResponse.k_eNotMember)
        k_eNotMember = 6,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSubmitPrivateCoachingSessionRatingResponse.EResponse.k_eAlreadySubmitted)
        k_eAlreadySubmitted = 7,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSubmitPrivateCoachingSessionRatingResponse.EResponse.k_eSessionActive)
        k_eSessionActive = 8,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSubmitPrivateCoachingSessionRatingResponse.EResponse.k_eSessionTooShort)
        k_eSessionTooShort = 9,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSubmitPrivateCoachingSessionRatingResponse.EResponse.k_eNoCoach)
        k_eNoCoach = 10,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCSubmitPrivateCoachingSessionRatingResponse.EResponse.k_eInvalidRating)
        k_eInvalidRating = 11,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for EResponse {
        const NAME: &'static str = "EResponse";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EResponse> {
            match value {
                0 => ::std::option::Option::Some(EResponse::k_eInternalError),
                1 => ::std::option::Option::Some(EResponse::k_eSuccess),
                2 => ::std::option::Option::Some(EResponse::k_eTooBusy),
                3 => ::std::option::Option::Some(EResponse::k_eDisabled),
                4 => ::std::option::Option::Some(EResponse::k_eTimeout),
                5 => ::std::option::Option::Some(EResponse::k_eUnknownSession),
                6 => ::std::option::Option::Some(EResponse::k_eNotMember),
                7 => ::std::option::Option::Some(EResponse::k_eAlreadySubmitted),
                8 => ::std::option::Option::Some(EResponse::k_eSessionActive),
                9 => ::std::option::Option::Some(EResponse::k_eSessionTooShort),
                10 => ::std::option::Option::Some(EResponse::k_eNoCoach),
                11 => ::std::option::Option::Some(EResponse::k_eInvalidRating),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EResponse> {
            match str {
                "k_eInternalError" => ::std::option::Option::Some(EResponse::k_eInternalError),
                "k_eSuccess" => ::std::option::Option::Some(EResponse::k_eSuccess),
                "k_eTooBusy" => ::std::option::Option::Some(EResponse::k_eTooBusy),
                "k_eDisabled" => ::std::option::Option::Some(EResponse::k_eDisabled),
                "k_eTimeout" => ::std::option::Option::Some(EResponse::k_eTimeout),
                "k_eUnknownSession" => ::std::option::Option::Some(EResponse::k_eUnknownSession),
                "k_eNotMember" => ::std::option::Option::Some(EResponse::k_eNotMember),
                "k_eAlreadySubmitted" => ::std::option::Option::Some(EResponse::k_eAlreadySubmitted),
                "k_eSessionActive" => ::std::option::Option::Some(EResponse::k_eSessionActive),
                "k_eSessionTooShort" => ::std::option::Option::Some(EResponse::k_eSessionTooShort),
                "k_eNoCoach" => ::std::option::Option::Some(EResponse::k_eNoCoach),
                "k_eInvalidRating" => ::std::option::Option::Some(EResponse::k_eInvalidRating),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EResponse] = &[
            EResponse::k_eInternalError,
            EResponse::k_eSuccess,
            EResponse::k_eTooBusy,
            EResponse::k_eDisabled,
            EResponse::k_eTimeout,
            EResponse::k_eUnknownSession,
            EResponse::k_eNotMember,
            EResponse::k_eAlreadySubmitted,
            EResponse::k_eSessionActive,
            EResponse::k_eSessionTooShort,
            EResponse::k_eNoCoach,
            EResponse::k_eInvalidRating,
        ];
    }

    impl ::std::default::Default for EResponse {
        fn default() -> Self {
            EResponse::k_eInternalError
        }
    }

}

// @@protoc_insertion_point(message:CMsgClientToGCGetAvailablePrivateCoachingSessions)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCGetAvailablePrivateCoachingSessions {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCGetAvailablePrivateCoachingSessions.language)
    pub language: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCGetAvailablePrivateCoachingSessions.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCGetAvailablePrivateCoachingSessions {
    fn default() -> &'a CMsgClientToGCGetAvailablePrivateCoachingSessions {
        <CMsgClientToGCGetAvailablePrivateCoachingSessions as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCGetAvailablePrivateCoachingSessions {
    pub fn new() -> CMsgClientToGCGetAvailablePrivateCoachingSessions {
        ::std::default::Default::default()
    }

    // optional uint32 language = 1;

    pub fn language(&self) -> u32 {
        self.language.unwrap_or(0)
    }

    pub fn clear_language(&mut self) {
        self.language = ::std::option::Option::None;
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: u32) {
        self.language = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCGetAvailablePrivateCoachingSessions {
    const NAME: &'static str = "CMsgClientToGCGetAvailablePrivateCoachingSessions";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.language = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.language {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.language {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCGetAvailablePrivateCoachingSessions {
        CMsgClientToGCGetAvailablePrivateCoachingSessions::new()
    }

    fn clear(&mut self) {
        self.language = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCGetAvailablePrivateCoachingSessions {
        static instance: CMsgClientToGCGetAvailablePrivateCoachingSessions = CMsgClientToGCGetAvailablePrivateCoachingSessions {
            language: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCGetAvailablePrivateCoachingSessionsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCGetAvailablePrivateCoachingSessionsResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCGetAvailablePrivateCoachingSessionsResponse.result)
    pub result: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_client_to_gcget_available_private_coaching_sessions_response::EResponse>>,
    // @@protoc_insertion_point(field:CMsgClientToGCGetAvailablePrivateCoachingSessionsResponse.available_sessions_list)
    pub available_sessions_list: ::steam_vent_proto_common::protobuf::MessageField<CMsgAvailablePrivateCoachingSessionList>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCGetAvailablePrivateCoachingSessionsResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCGetAvailablePrivateCoachingSessionsResponse {
    fn default() -> &'a CMsgClientToGCGetAvailablePrivateCoachingSessionsResponse {
        <CMsgClientToGCGetAvailablePrivateCoachingSessionsResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCGetAvailablePrivateCoachingSessionsResponse {
    pub fn new() -> CMsgClientToGCGetAvailablePrivateCoachingSessionsResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgClientToGCGetAvailablePrivateCoachingSessionsResponse.EResponse result = 1;

    pub fn result(&self) -> cmsg_client_to_gcget_available_private_coaching_sessions_response::EResponse {
        match self.result {
            Some(e) => e.enum_value_or(cmsg_client_to_gcget_available_private_coaching_sessions_response::EResponse::k_eInternalError),
            None => cmsg_client_to_gcget_available_private_coaching_sessions_response::EResponse::k_eInternalError,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: cmsg_client_to_gcget_available_private_coaching_sessions_response::EResponse) {
        self.result = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCGetAvailablePrivateCoachingSessionsResponse {
    const NAME: &'static str = "CMsgClientToGCGetAvailablePrivateCoachingSessionsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.available_sessions_list)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.available_sessions_list.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.available_sessions_list.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCGetAvailablePrivateCoachingSessionsResponse {
        CMsgClientToGCGetAvailablePrivateCoachingSessionsResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.available_sessions_list.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCGetAvailablePrivateCoachingSessionsResponse {
        static instance: CMsgClientToGCGetAvailablePrivateCoachingSessionsResponse = CMsgClientToGCGetAvailablePrivateCoachingSessionsResponse {
            result: ::std::option::Option::None,
            available_sessions_list: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientToGCGetAvailablePrivateCoachingSessionsResponse`
pub mod cmsg_client_to_gcget_available_private_coaching_sessions_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgClientToGCGetAvailablePrivateCoachingSessionsResponse.EResponse)
    pub enum EResponse {
        // @@protoc_insertion_point(enum_value:CMsgClientToGCGetAvailablePrivateCoachingSessionsResponse.EResponse.k_eInternalError)
        k_eInternalError = 0,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCGetAvailablePrivateCoachingSessionsResponse.EResponse.k_eSuccess)
        k_eSuccess = 1,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCGetAvailablePrivateCoachingSessionsResponse.EResponse.k_eTooBusy)
        k_eTooBusy = 2,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCGetAvailablePrivateCoachingSessionsResponse.EResponse.k_eDisabled)
        k_eDisabled = 3,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCGetAvailablePrivateCoachingSessionsResponse.EResponse.k_eTimeout)
        k_eTimeout = 4,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for EResponse {
        const NAME: &'static str = "EResponse";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EResponse> {
            match value {
                0 => ::std::option::Option::Some(EResponse::k_eInternalError),
                1 => ::std::option::Option::Some(EResponse::k_eSuccess),
                2 => ::std::option::Option::Some(EResponse::k_eTooBusy),
                3 => ::std::option::Option::Some(EResponse::k_eDisabled),
                4 => ::std::option::Option::Some(EResponse::k_eTimeout),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EResponse> {
            match str {
                "k_eInternalError" => ::std::option::Option::Some(EResponse::k_eInternalError),
                "k_eSuccess" => ::std::option::Option::Some(EResponse::k_eSuccess),
                "k_eTooBusy" => ::std::option::Option::Some(EResponse::k_eTooBusy),
                "k_eDisabled" => ::std::option::Option::Some(EResponse::k_eDisabled),
                "k_eTimeout" => ::std::option::Option::Some(EResponse::k_eTimeout),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EResponse] = &[
            EResponse::k_eInternalError,
            EResponse::k_eSuccess,
            EResponse::k_eTooBusy,
            EResponse::k_eDisabled,
            EResponse::k_eTimeout,
        ];
    }

    impl ::std::default::Default for EResponse {
        fn default() -> Self {
            EResponse::k_eInternalError
        }
    }

}

// @@protoc_insertion_point(message:CMsgClientToGCGetAvailablePrivateCoachingSessionsSummary)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCGetAvailablePrivateCoachingSessionsSummary {
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCGetAvailablePrivateCoachingSessionsSummary.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCGetAvailablePrivateCoachingSessionsSummary {
    fn default() -> &'a CMsgClientToGCGetAvailablePrivateCoachingSessionsSummary {
        <CMsgClientToGCGetAvailablePrivateCoachingSessionsSummary as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCGetAvailablePrivateCoachingSessionsSummary {
    pub fn new() -> CMsgClientToGCGetAvailablePrivateCoachingSessionsSummary {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCGetAvailablePrivateCoachingSessionsSummary {
    const NAME: &'static str = "CMsgClientToGCGetAvailablePrivateCoachingSessionsSummary";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCGetAvailablePrivateCoachingSessionsSummary {
        CMsgClientToGCGetAvailablePrivateCoachingSessionsSummary::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCGetAvailablePrivateCoachingSessionsSummary {
        static instance: CMsgClientToGCGetAvailablePrivateCoachingSessionsSummary = CMsgClientToGCGetAvailablePrivateCoachingSessionsSummary {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCGetAvailablePrivateCoachingSessionsSummaryResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCGetAvailablePrivateCoachingSessionsSummaryResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCGetAvailablePrivateCoachingSessionsSummaryResponse.result)
    pub result: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_client_to_gcget_available_private_coaching_sessions_summary_response::EResponse>>,
    // @@protoc_insertion_point(field:CMsgClientToGCGetAvailablePrivateCoachingSessionsSummaryResponse.coaching_session_summary)
    pub coaching_session_summary: ::steam_vent_proto_common::protobuf::MessageField<CMsgAvailablePrivateCoachingSessionSummary>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCGetAvailablePrivateCoachingSessionsSummaryResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCGetAvailablePrivateCoachingSessionsSummaryResponse {
    fn default() -> &'a CMsgClientToGCGetAvailablePrivateCoachingSessionsSummaryResponse {
        <CMsgClientToGCGetAvailablePrivateCoachingSessionsSummaryResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCGetAvailablePrivateCoachingSessionsSummaryResponse {
    pub fn new() -> CMsgClientToGCGetAvailablePrivateCoachingSessionsSummaryResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgClientToGCGetAvailablePrivateCoachingSessionsSummaryResponse.EResponse result = 1;

    pub fn result(&self) -> cmsg_client_to_gcget_available_private_coaching_sessions_summary_response::EResponse {
        match self.result {
            Some(e) => e.enum_value_or(cmsg_client_to_gcget_available_private_coaching_sessions_summary_response::EResponse::k_eInternalError),
            None => cmsg_client_to_gcget_available_private_coaching_sessions_summary_response::EResponse::k_eInternalError,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: cmsg_client_to_gcget_available_private_coaching_sessions_summary_response::EResponse) {
        self.result = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCGetAvailablePrivateCoachingSessionsSummaryResponse {
    const NAME: &'static str = "CMsgClientToGCGetAvailablePrivateCoachingSessionsSummaryResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.coaching_session_summary)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.coaching_session_summary.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.coaching_session_summary.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCGetAvailablePrivateCoachingSessionsSummaryResponse {
        CMsgClientToGCGetAvailablePrivateCoachingSessionsSummaryResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.coaching_session_summary.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCGetAvailablePrivateCoachingSessionsSummaryResponse {
        static instance: CMsgClientToGCGetAvailablePrivateCoachingSessionsSummaryResponse = CMsgClientToGCGetAvailablePrivateCoachingSessionsSummaryResponse {
            result: ::std::option::Option::None,
            coaching_session_summary: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientToGCGetAvailablePrivateCoachingSessionsSummaryResponse`
pub mod cmsg_client_to_gcget_available_private_coaching_sessions_summary_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgClientToGCGetAvailablePrivateCoachingSessionsSummaryResponse.EResponse)
    pub enum EResponse {
        // @@protoc_insertion_point(enum_value:CMsgClientToGCGetAvailablePrivateCoachingSessionsSummaryResponse.EResponse.k_eInternalError)
        k_eInternalError = 0,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCGetAvailablePrivateCoachingSessionsSummaryResponse.EResponse.k_eSuccess)
        k_eSuccess = 1,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCGetAvailablePrivateCoachingSessionsSummaryResponse.EResponse.k_eTooBusy)
        k_eTooBusy = 2,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCGetAvailablePrivateCoachingSessionsSummaryResponse.EResponse.k_eDisabled)
        k_eDisabled = 3,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCGetAvailablePrivateCoachingSessionsSummaryResponse.EResponse.k_eTimeout)
        k_eTimeout = 4,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for EResponse {
        const NAME: &'static str = "EResponse";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EResponse> {
            match value {
                0 => ::std::option::Option::Some(EResponse::k_eInternalError),
                1 => ::std::option::Option::Some(EResponse::k_eSuccess),
                2 => ::std::option::Option::Some(EResponse::k_eTooBusy),
                3 => ::std::option::Option::Some(EResponse::k_eDisabled),
                4 => ::std::option::Option::Some(EResponse::k_eTimeout),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EResponse> {
            match str {
                "k_eInternalError" => ::std::option::Option::Some(EResponse::k_eInternalError),
                "k_eSuccess" => ::std::option::Option::Some(EResponse::k_eSuccess),
                "k_eTooBusy" => ::std::option::Option::Some(EResponse::k_eTooBusy),
                "k_eDisabled" => ::std::option::Option::Some(EResponse::k_eDisabled),
                "k_eTimeout" => ::std::option::Option::Some(EResponse::k_eTimeout),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EResponse] = &[
            EResponse::k_eInternalError,
            EResponse::k_eSuccess,
            EResponse::k_eTooBusy,
            EResponse::k_eDisabled,
            EResponse::k_eTimeout,
        ];
    }

    impl ::std::default::Default for EResponse {
        fn default() -> Self {
            EResponse::k_eInternalError
        }
    }

}

// @@protoc_insertion_point(message:CMsgClientToGCJoinPrivateCoachingSessionLobby)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCJoinPrivateCoachingSessionLobby {
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCJoinPrivateCoachingSessionLobby.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCJoinPrivateCoachingSessionLobby {
    fn default() -> &'a CMsgClientToGCJoinPrivateCoachingSessionLobby {
        <CMsgClientToGCJoinPrivateCoachingSessionLobby as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCJoinPrivateCoachingSessionLobby {
    pub fn new() -> CMsgClientToGCJoinPrivateCoachingSessionLobby {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCJoinPrivateCoachingSessionLobby {
    const NAME: &'static str = "CMsgClientToGCJoinPrivateCoachingSessionLobby";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCJoinPrivateCoachingSessionLobby {
        CMsgClientToGCJoinPrivateCoachingSessionLobby::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCJoinPrivateCoachingSessionLobby {
        static instance: CMsgClientToGCJoinPrivateCoachingSessionLobby = CMsgClientToGCJoinPrivateCoachingSessionLobby {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse.result)
    pub result: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_client_to_gcjoin_private_coaching_session_lobby_response::EResponse>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse {
    fn default() -> &'a CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse {
        <CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse {
    pub fn new() -> CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse.EResponse result = 1;

    pub fn result(&self) -> cmsg_client_to_gcjoin_private_coaching_session_lobby_response::EResponse {
        match self.result {
            Some(e) => e.enum_value_or(cmsg_client_to_gcjoin_private_coaching_session_lobby_response::EResponse::k_eInternalError),
            None => cmsg_client_to_gcjoin_private_coaching_session_lobby_response::EResponse::k_eInternalError,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: cmsg_client_to_gcjoin_private_coaching_session_lobby_response::EResponse) {
        self.result = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse {
    const NAME: &'static str = "CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse {
        CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse {
        static instance: CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse = CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse {
            result: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse`
pub mod cmsg_client_to_gcjoin_private_coaching_session_lobby_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse.EResponse)
    pub enum EResponse {
        // @@protoc_insertion_point(enum_value:CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse.EResponse.k_eInternalError)
        k_eInternalError = 0,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse.EResponse.k_eSuccess)
        k_eSuccess = 1,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse.EResponse.k_eTooBusy)
        k_eTooBusy = 2,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse.EResponse.k_eDisabled)
        k_eDisabled = 3,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse.EResponse.k_eTimeout)
        k_eTimeout = 4,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse.EResponse.k_eNoSession)
        k_eNoSession = 5,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse.EResponse.k_eSessionFinished)
        k_eSessionFinished = 6,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse.EResponse.k_eAlreadyLeft)
        k_eAlreadyLeft = 7,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse.EResponse.k_eNotACoach)
        k_eNotACoach = 8,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse.EResponse.k_eNoLobby)
        k_eNoLobby = 9,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse.EResponse.k_eCoachInThisLobby)
        k_eCoachInThisLobby = 10,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse.EResponse.k_eCoachInALobby)
        k_eCoachInALobby = 11,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse.EResponse.k_eLobbyIsLan)
        k_eLobbyIsLan = 12,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse.EResponse.k_eLobbyIsLeague)
        k_eLobbyIsLeague = 13,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse.EResponse.k_eInvalidLobbyType)
        k_eInvalidLobbyType = 14,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse.EResponse.k_eInvalidLobbyState)
        k_eInvalidLobbyState = 15,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse.EResponse.k_eRequesterIsNotPlayer)
        k_eRequesterIsNotPlayer = 16,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse.EResponse.k_eTooManyCoaches)
        k_eTooManyCoaches = 17,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse.EResponse.k_eCoachWasPlayer)
        k_eCoachWasPlayer = 18,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse.EResponse.k_eJoinFailed)
        k_eJoinFailed = 19,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for EResponse {
        const NAME: &'static str = "EResponse";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EResponse> {
            match value {
                0 => ::std::option::Option::Some(EResponse::k_eInternalError),
                1 => ::std::option::Option::Some(EResponse::k_eSuccess),
                2 => ::std::option::Option::Some(EResponse::k_eTooBusy),
                3 => ::std::option::Option::Some(EResponse::k_eDisabled),
                4 => ::std::option::Option::Some(EResponse::k_eTimeout),
                5 => ::std::option::Option::Some(EResponse::k_eNoSession),
                6 => ::std::option::Option::Some(EResponse::k_eSessionFinished),
                7 => ::std::option::Option::Some(EResponse::k_eAlreadyLeft),
                8 => ::std::option::Option::Some(EResponse::k_eNotACoach),
                9 => ::std::option::Option::Some(EResponse::k_eNoLobby),
                10 => ::std::option::Option::Some(EResponse::k_eCoachInThisLobby),
                11 => ::std::option::Option::Some(EResponse::k_eCoachInALobby),
                12 => ::std::option::Option::Some(EResponse::k_eLobbyIsLan),
                13 => ::std::option::Option::Some(EResponse::k_eLobbyIsLeague),
                14 => ::std::option::Option::Some(EResponse::k_eInvalidLobbyType),
                15 => ::std::option::Option::Some(EResponse::k_eInvalidLobbyState),
                16 => ::std::option::Option::Some(EResponse::k_eRequesterIsNotPlayer),
                17 => ::std::option::Option::Some(EResponse::k_eTooManyCoaches),
                18 => ::std::option::Option::Some(EResponse::k_eCoachWasPlayer),
                19 => ::std::option::Option::Some(EResponse::k_eJoinFailed),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EResponse> {
            match str {
                "k_eInternalError" => ::std::option::Option::Some(EResponse::k_eInternalError),
                "k_eSuccess" => ::std::option::Option::Some(EResponse::k_eSuccess),
                "k_eTooBusy" => ::std::option::Option::Some(EResponse::k_eTooBusy),
                "k_eDisabled" => ::std::option::Option::Some(EResponse::k_eDisabled),
                "k_eTimeout" => ::std::option::Option::Some(EResponse::k_eTimeout),
                "k_eNoSession" => ::std::option::Option::Some(EResponse::k_eNoSession),
                "k_eSessionFinished" => ::std::option::Option::Some(EResponse::k_eSessionFinished),
                "k_eAlreadyLeft" => ::std::option::Option::Some(EResponse::k_eAlreadyLeft),
                "k_eNotACoach" => ::std::option::Option::Some(EResponse::k_eNotACoach),
                "k_eNoLobby" => ::std::option::Option::Some(EResponse::k_eNoLobby),
                "k_eCoachInThisLobby" => ::std::option::Option::Some(EResponse::k_eCoachInThisLobby),
                "k_eCoachInALobby" => ::std::option::Option::Some(EResponse::k_eCoachInALobby),
                "k_eLobbyIsLan" => ::std::option::Option::Some(EResponse::k_eLobbyIsLan),
                "k_eLobbyIsLeague" => ::std::option::Option::Some(EResponse::k_eLobbyIsLeague),
                "k_eInvalidLobbyType" => ::std::option::Option::Some(EResponse::k_eInvalidLobbyType),
                "k_eInvalidLobbyState" => ::std::option::Option::Some(EResponse::k_eInvalidLobbyState),
                "k_eRequesterIsNotPlayer" => ::std::option::Option::Some(EResponse::k_eRequesterIsNotPlayer),
                "k_eTooManyCoaches" => ::std::option::Option::Some(EResponse::k_eTooManyCoaches),
                "k_eCoachWasPlayer" => ::std::option::Option::Some(EResponse::k_eCoachWasPlayer),
                "k_eJoinFailed" => ::std::option::Option::Some(EResponse::k_eJoinFailed),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EResponse] = &[
            EResponse::k_eInternalError,
            EResponse::k_eSuccess,
            EResponse::k_eTooBusy,
            EResponse::k_eDisabled,
            EResponse::k_eTimeout,
            EResponse::k_eNoSession,
            EResponse::k_eSessionFinished,
            EResponse::k_eAlreadyLeft,
            EResponse::k_eNotACoach,
            EResponse::k_eNoLobby,
            EResponse::k_eCoachInThisLobby,
            EResponse::k_eCoachInALobby,
            EResponse::k_eLobbyIsLan,
            EResponse::k_eLobbyIsLeague,
            EResponse::k_eInvalidLobbyType,
            EResponse::k_eInvalidLobbyState,
            EResponse::k_eRequesterIsNotPlayer,
            EResponse::k_eTooManyCoaches,
            EResponse::k_eCoachWasPlayer,
            EResponse::k_eJoinFailed,
        ];
    }

    impl ::std::default::Default for EResponse {
        fn default() -> Self {
            EResponse::k_eInternalError
        }
    }

}

// @@protoc_insertion_point(message:CMsgClientToGCCoachFriend)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCCoachFriend {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCCoachFriend.target_account_id)
    pub target_account_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCCoachFriend.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCCoachFriend {
    fn default() -> &'a CMsgClientToGCCoachFriend {
        <CMsgClientToGCCoachFriend as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCCoachFriend {
    pub fn new() -> CMsgClientToGCCoachFriend {
        ::std::default::Default::default()
    }

    // optional uint32 target_account_id = 1;

    pub fn target_account_id(&self) -> u32 {
        self.target_account_id.unwrap_or(0)
    }

    pub fn clear_target_account_id(&mut self) {
        self.target_account_id = ::std::option::Option::None;
    }

    pub fn has_target_account_id(&self) -> bool {
        self.target_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_target_account_id(&mut self, v: u32) {
        self.target_account_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCCoachFriend {
    const NAME: &'static str = "CMsgClientToGCCoachFriend";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.target_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.target_account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.target_account_id {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCCoachFriend {
        CMsgClientToGCCoachFriend::new()
    }

    fn clear(&mut self) {
        self.target_account_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCCoachFriend {
        static instance: CMsgClientToGCCoachFriend = CMsgClientToGCCoachFriend {
            target_account_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCCoachFriendResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCCoachFriendResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCCoachFriendResponse.result)
    pub result: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_client_to_gccoach_friend_response::EResponse>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCCoachFriendResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCCoachFriendResponse {
    fn default() -> &'a CMsgClientToGCCoachFriendResponse {
        <CMsgClientToGCCoachFriendResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCCoachFriendResponse {
    pub fn new() -> CMsgClientToGCCoachFriendResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgClientToGCCoachFriendResponse.EResponse result = 1;

    pub fn result(&self) -> cmsg_client_to_gccoach_friend_response::EResponse {
        match self.result {
            Some(e) => e.enum_value_or(cmsg_client_to_gccoach_friend_response::EResponse::k_eInternalError),
            None => cmsg_client_to_gccoach_friend_response::EResponse::k_eInternalError,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: cmsg_client_to_gccoach_friend_response::EResponse) {
        self.result = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCCoachFriendResponse {
    const NAME: &'static str = "CMsgClientToGCCoachFriendResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCCoachFriendResponse {
        CMsgClientToGCCoachFriendResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCCoachFriendResponse {
        static instance: CMsgClientToGCCoachFriendResponse = CMsgClientToGCCoachFriendResponse {
            result: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientToGCCoachFriendResponse`
pub mod cmsg_client_to_gccoach_friend_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgClientToGCCoachFriendResponse.EResponse)
    pub enum EResponse {
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCoachFriendResponse.EResponse.k_eInternalError)
        k_eInternalError = 0,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCoachFriendResponse.EResponse.k_eSuccess)
        k_eSuccess = 1,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCoachFriendResponse.EResponse.k_eTooBusy)
        k_eTooBusy = 2,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCoachFriendResponse.EResponse.k_eDisabled)
        k_eDisabled = 3,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCoachFriendResponse.EResponse.k_eTimeout)
        k_eTimeout = 4,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCoachFriendResponse.EResponse.k_eCoachNotSubscriber)
        k_eCoachNotSubscriber = 5,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCoachFriendResponse.EResponse.k_eLobbyNotFound)
        k_eLobbyNotFound = 6,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCoachFriendResponse.EResponse.k_eFriendsOnBothSides)
        k_eFriendsOnBothSides = 7,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCoachFriendResponse.EResponse.k_eNotFriends)
        k_eNotFriends = 8,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCoachFriendResponse.EResponse.k_eCoachInThisLobby)
        k_eCoachInThisLobby = 9,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCoachFriendResponse.EResponse.k_eCoachInALobby)
        k_eCoachInALobby = 10,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCoachFriendResponse.EResponse.k_eLobbyIsLan)
        k_eLobbyIsLan = 11,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCoachFriendResponse.EResponse.k_eInvalidLobbyType)
        k_eInvalidLobbyType = 12,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCoachFriendResponse.EResponse.k_eInvalidLobbyState)
        k_eInvalidLobbyState = 13,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCoachFriendResponse.EResponse.k_eFriendIsNotAPlayer)
        k_eFriendIsNotAPlayer = 14,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCoachFriendResponse.EResponse.k_eTooManyCoaches)
        k_eTooManyCoaches = 15,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCoachFriendResponse.EResponse.k_eCoachSwitchedTeams)
        k_eCoachSwitchedTeams = 16,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCoachFriendResponse.EResponse.k_eLobbyIsLeague)
        k_eLobbyIsLeague = 17,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCoachFriendResponse.EResponse.k_eCoachWasPlayer)
        k_eCoachWasPlayer = 18,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCCoachFriendResponse.EResponse.k_eRequestRejected)
        k_eRequestRejected = 19,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for EResponse {
        const NAME: &'static str = "EResponse";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EResponse> {
            match value {
                0 => ::std::option::Option::Some(EResponse::k_eInternalError),
                1 => ::std::option::Option::Some(EResponse::k_eSuccess),
                2 => ::std::option::Option::Some(EResponse::k_eTooBusy),
                3 => ::std::option::Option::Some(EResponse::k_eDisabled),
                4 => ::std::option::Option::Some(EResponse::k_eTimeout),
                5 => ::std::option::Option::Some(EResponse::k_eCoachNotSubscriber),
                6 => ::std::option::Option::Some(EResponse::k_eLobbyNotFound),
                7 => ::std::option::Option::Some(EResponse::k_eFriendsOnBothSides),
                8 => ::std::option::Option::Some(EResponse::k_eNotFriends),
                9 => ::std::option::Option::Some(EResponse::k_eCoachInThisLobby),
                10 => ::std::option::Option::Some(EResponse::k_eCoachInALobby),
                11 => ::std::option::Option::Some(EResponse::k_eLobbyIsLan),
                12 => ::std::option::Option::Some(EResponse::k_eInvalidLobbyType),
                13 => ::std::option::Option::Some(EResponse::k_eInvalidLobbyState),
                14 => ::std::option::Option::Some(EResponse::k_eFriendIsNotAPlayer),
                15 => ::std::option::Option::Some(EResponse::k_eTooManyCoaches),
                16 => ::std::option::Option::Some(EResponse::k_eCoachSwitchedTeams),
                17 => ::std::option::Option::Some(EResponse::k_eLobbyIsLeague),
                18 => ::std::option::Option::Some(EResponse::k_eCoachWasPlayer),
                19 => ::std::option::Option::Some(EResponse::k_eRequestRejected),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EResponse> {
            match str {
                "k_eInternalError" => ::std::option::Option::Some(EResponse::k_eInternalError),
                "k_eSuccess" => ::std::option::Option::Some(EResponse::k_eSuccess),
                "k_eTooBusy" => ::std::option::Option::Some(EResponse::k_eTooBusy),
                "k_eDisabled" => ::std::option::Option::Some(EResponse::k_eDisabled),
                "k_eTimeout" => ::std::option::Option::Some(EResponse::k_eTimeout),
                "k_eCoachNotSubscriber" => ::std::option::Option::Some(EResponse::k_eCoachNotSubscriber),
                "k_eLobbyNotFound" => ::std::option::Option::Some(EResponse::k_eLobbyNotFound),
                "k_eFriendsOnBothSides" => ::std::option::Option::Some(EResponse::k_eFriendsOnBothSides),
                "k_eNotFriends" => ::std::option::Option::Some(EResponse::k_eNotFriends),
                "k_eCoachInThisLobby" => ::std::option::Option::Some(EResponse::k_eCoachInThisLobby),
                "k_eCoachInALobby" => ::std::option::Option::Some(EResponse::k_eCoachInALobby),
                "k_eLobbyIsLan" => ::std::option::Option::Some(EResponse::k_eLobbyIsLan),
                "k_eInvalidLobbyType" => ::std::option::Option::Some(EResponse::k_eInvalidLobbyType),
                "k_eInvalidLobbyState" => ::std::option::Option::Some(EResponse::k_eInvalidLobbyState),
                "k_eFriendIsNotAPlayer" => ::std::option::Option::Some(EResponse::k_eFriendIsNotAPlayer),
                "k_eTooManyCoaches" => ::std::option::Option::Some(EResponse::k_eTooManyCoaches),
                "k_eCoachSwitchedTeams" => ::std::option::Option::Some(EResponse::k_eCoachSwitchedTeams),
                "k_eLobbyIsLeague" => ::std::option::Option::Some(EResponse::k_eLobbyIsLeague),
                "k_eCoachWasPlayer" => ::std::option::Option::Some(EResponse::k_eCoachWasPlayer),
                "k_eRequestRejected" => ::std::option::Option::Some(EResponse::k_eRequestRejected),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EResponse] = &[
            EResponse::k_eInternalError,
            EResponse::k_eSuccess,
            EResponse::k_eTooBusy,
            EResponse::k_eDisabled,
            EResponse::k_eTimeout,
            EResponse::k_eCoachNotSubscriber,
            EResponse::k_eLobbyNotFound,
            EResponse::k_eFriendsOnBothSides,
            EResponse::k_eNotFriends,
            EResponse::k_eCoachInThisLobby,
            EResponse::k_eCoachInALobby,
            EResponse::k_eLobbyIsLan,
            EResponse::k_eInvalidLobbyType,
            EResponse::k_eInvalidLobbyState,
            EResponse::k_eFriendIsNotAPlayer,
            EResponse::k_eTooManyCoaches,
            EResponse::k_eCoachSwitchedTeams,
            EResponse::k_eLobbyIsLeague,
            EResponse::k_eCoachWasPlayer,
            EResponse::k_eRequestRejected,
        ];
    }

    impl ::std::default::Default for EResponse {
        fn default() -> Self {
            EResponse::k_eInternalError
        }
    }

}

// @@protoc_insertion_point(message:CMsgClientToGCRespondToCoachFriendRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCRespondToCoachFriendRequest {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCRespondToCoachFriendRequest.coach_account_id)
    pub coach_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientToGCRespondToCoachFriendRequest.response)
    pub response: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<super::dota_gcmessages_common_lobby::ELobbyMemberCoachRequestState>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCRespondToCoachFriendRequest.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCRespondToCoachFriendRequest {
    fn default() -> &'a CMsgClientToGCRespondToCoachFriendRequest {
        <CMsgClientToGCRespondToCoachFriendRequest as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCRespondToCoachFriendRequest {
    pub fn new() -> CMsgClientToGCRespondToCoachFriendRequest {
        ::std::default::Default::default()
    }

    // optional uint32 coach_account_id = 1;

    pub fn coach_account_id(&self) -> u32 {
        self.coach_account_id.unwrap_or(0)
    }

    pub fn clear_coach_account_id(&mut self) {
        self.coach_account_id = ::std::option::Option::None;
    }

    pub fn has_coach_account_id(&self) -> bool {
        self.coach_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_coach_account_id(&mut self, v: u32) {
        self.coach_account_id = ::std::option::Option::Some(v);
    }

    // optional .ELobbyMemberCoachRequestState response = 2;

    pub fn response(&self) -> super::dota_gcmessages_common_lobby::ELobbyMemberCoachRequestState {
        match self.response {
            Some(e) => e.enum_value_or(super::dota_gcmessages_common_lobby::ELobbyMemberCoachRequestState::k_eLobbyMemberCoachRequestState_None),
            None => super::dota_gcmessages_common_lobby::ELobbyMemberCoachRequestState::k_eLobbyMemberCoachRequestState_None,
        }
    }

    pub fn clear_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: super::dota_gcmessages_common_lobby::ELobbyMemberCoachRequestState) {
        self.response = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCRespondToCoachFriendRequest {
    const NAME: &'static str = "CMsgClientToGCRespondToCoachFriendRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.coach_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.response = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.coach_account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.response {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(2, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.coach_account_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.response {
            os.write_enum(2, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCRespondToCoachFriendRequest {
        CMsgClientToGCRespondToCoachFriendRequest::new()
    }

    fn clear(&mut self) {
        self.coach_account_id = ::std::option::Option::None;
        self.response = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCRespondToCoachFriendRequest {
        static instance: CMsgClientToGCRespondToCoachFriendRequest = CMsgClientToGCRespondToCoachFriendRequest {
            coach_account_id: ::std::option::Option::None,
            response: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCRespondToCoachFriendRequestResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCRespondToCoachFriendRequestResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCRespondToCoachFriendRequestResponse.result)
    pub result: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_client_to_gcrespond_to_coach_friend_request_response::EResponse>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCRespondToCoachFriendRequestResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCRespondToCoachFriendRequestResponse {
    fn default() -> &'a CMsgClientToGCRespondToCoachFriendRequestResponse {
        <CMsgClientToGCRespondToCoachFriendRequestResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCRespondToCoachFriendRequestResponse {
    pub fn new() -> CMsgClientToGCRespondToCoachFriendRequestResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgClientToGCRespondToCoachFriendRequestResponse.EResponse result = 1;

    pub fn result(&self) -> cmsg_client_to_gcrespond_to_coach_friend_request_response::EResponse {
        match self.result {
            Some(e) => e.enum_value_or(cmsg_client_to_gcrespond_to_coach_friend_request_response::EResponse::k_eInternalError),
            None => cmsg_client_to_gcrespond_to_coach_friend_request_response::EResponse::k_eInternalError,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: cmsg_client_to_gcrespond_to_coach_friend_request_response::EResponse) {
        self.result = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCRespondToCoachFriendRequestResponse {
    const NAME: &'static str = "CMsgClientToGCRespondToCoachFriendRequestResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCRespondToCoachFriendRequestResponse {
        CMsgClientToGCRespondToCoachFriendRequestResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCRespondToCoachFriendRequestResponse {
        static instance: CMsgClientToGCRespondToCoachFriendRequestResponse = CMsgClientToGCRespondToCoachFriendRequestResponse {
            result: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientToGCRespondToCoachFriendRequestResponse`
pub mod cmsg_client_to_gcrespond_to_coach_friend_request_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgClientToGCRespondToCoachFriendRequestResponse.EResponse)
    pub enum EResponse {
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRespondToCoachFriendRequestResponse.EResponse.k_eInternalError)
        k_eInternalError = 0,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRespondToCoachFriendRequestResponse.EResponse.k_eSuccess)
        k_eSuccess = 1,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRespondToCoachFriendRequestResponse.EResponse.k_eTooBusy)
        k_eTooBusy = 2,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRespondToCoachFriendRequestResponse.EResponse.k_eDisabled)
        k_eDisabled = 3,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRespondToCoachFriendRequestResponse.EResponse.k_eTimeout)
        k_eTimeout = 4,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRespondToCoachFriendRequestResponse.EResponse.k_eLobbyNotFound)
        k_eLobbyNotFound = 5,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRespondToCoachFriendRequestResponse.EResponse.k_eInvalidLobbyState)
        k_eInvalidLobbyState = 6,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRespondToCoachFriendRequestResponse.EResponse.k_eCoachNotInLobby)
        k_eCoachNotInLobby = 7,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRespondToCoachFriendRequestResponse.EResponse.k_ePlayerInvalidTeam)
        k_ePlayerInvalidTeam = 8,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRespondToCoachFriendRequestResponse.EResponse.k_eCoachInvalidTeam)
        k_eCoachInvalidTeam = 9,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRespondToCoachFriendRequestResponse.EResponse.k_eNoRequest)
        k_eNoRequest = 10,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRespondToCoachFriendRequestResponse.EResponse.k_eInvalidResponse)
        k_eInvalidResponse = 11,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCRespondToCoachFriendRequestResponse.EResponse.k_eAlreadyResponded)
        k_eAlreadyResponded = 12,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for EResponse {
        const NAME: &'static str = "EResponse";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EResponse> {
            match value {
                0 => ::std::option::Option::Some(EResponse::k_eInternalError),
                1 => ::std::option::Option::Some(EResponse::k_eSuccess),
                2 => ::std::option::Option::Some(EResponse::k_eTooBusy),
                3 => ::std::option::Option::Some(EResponse::k_eDisabled),
                4 => ::std::option::Option::Some(EResponse::k_eTimeout),
                5 => ::std::option::Option::Some(EResponse::k_eLobbyNotFound),
                6 => ::std::option::Option::Some(EResponse::k_eInvalidLobbyState),
                7 => ::std::option::Option::Some(EResponse::k_eCoachNotInLobby),
                8 => ::std::option::Option::Some(EResponse::k_ePlayerInvalidTeam),
                9 => ::std::option::Option::Some(EResponse::k_eCoachInvalidTeam),
                10 => ::std::option::Option::Some(EResponse::k_eNoRequest),
                11 => ::std::option::Option::Some(EResponse::k_eInvalidResponse),
                12 => ::std::option::Option::Some(EResponse::k_eAlreadyResponded),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EResponse> {
            match str {
                "k_eInternalError" => ::std::option::Option::Some(EResponse::k_eInternalError),
                "k_eSuccess" => ::std::option::Option::Some(EResponse::k_eSuccess),
                "k_eTooBusy" => ::std::option::Option::Some(EResponse::k_eTooBusy),
                "k_eDisabled" => ::std::option::Option::Some(EResponse::k_eDisabled),
                "k_eTimeout" => ::std::option::Option::Some(EResponse::k_eTimeout),
                "k_eLobbyNotFound" => ::std::option::Option::Some(EResponse::k_eLobbyNotFound),
                "k_eInvalidLobbyState" => ::std::option::Option::Some(EResponse::k_eInvalidLobbyState),
                "k_eCoachNotInLobby" => ::std::option::Option::Some(EResponse::k_eCoachNotInLobby),
                "k_ePlayerInvalidTeam" => ::std::option::Option::Some(EResponse::k_ePlayerInvalidTeam),
                "k_eCoachInvalidTeam" => ::std::option::Option::Some(EResponse::k_eCoachInvalidTeam),
                "k_eNoRequest" => ::std::option::Option::Some(EResponse::k_eNoRequest),
                "k_eInvalidResponse" => ::std::option::Option::Some(EResponse::k_eInvalidResponse),
                "k_eAlreadyResponded" => ::std::option::Option::Some(EResponse::k_eAlreadyResponded),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EResponse] = &[
            EResponse::k_eInternalError,
            EResponse::k_eSuccess,
            EResponse::k_eTooBusy,
            EResponse::k_eDisabled,
            EResponse::k_eTimeout,
            EResponse::k_eLobbyNotFound,
            EResponse::k_eInvalidLobbyState,
            EResponse::k_eCoachNotInLobby,
            EResponse::k_ePlayerInvalidTeam,
            EResponse::k_eCoachInvalidTeam,
            EResponse::k_eNoRequest,
            EResponse::k_eInvalidResponse,
            EResponse::k_eAlreadyResponded,
        ];
    }

    impl ::std::default::Default for EResponse {
        fn default() -> Self {
            EResponse::k_eInternalError
        }
    }

}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ECoachTeammateRating)
pub enum ECoachTeammateRating {
    // @@protoc_insertion_point(enum_value:ECoachTeammateRating.k_ECoachTeammateRating_None)
    k_ECoachTeammateRating_None = 0,
    // @@protoc_insertion_point(enum_value:ECoachTeammateRating.k_ECoachTeammateRating_Positive)
    k_ECoachTeammateRating_Positive = 1,
    // @@protoc_insertion_point(enum_value:ECoachTeammateRating.k_ECoachTeammateRating_Negative)
    k_ECoachTeammateRating_Negative = 2,
    // @@protoc_insertion_point(enum_value:ECoachTeammateRating.k_ECoachTeammateRating_Abusive)
    k_ECoachTeammateRating_Abusive = 3,
}

impl ::steam_vent_proto_common::protobuf::Enum for ECoachTeammateRating {
    const NAME: &'static str = "ECoachTeammateRating";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ECoachTeammateRating> {
        match value {
            0 => ::std::option::Option::Some(ECoachTeammateRating::k_ECoachTeammateRating_None),
            1 => ::std::option::Option::Some(ECoachTeammateRating::k_ECoachTeammateRating_Positive),
            2 => ::std::option::Option::Some(ECoachTeammateRating::k_ECoachTeammateRating_Negative),
            3 => ::std::option::Option::Some(ECoachTeammateRating::k_ECoachTeammateRating_Abusive),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ECoachTeammateRating> {
        match str {
            "k_ECoachTeammateRating_None" => ::std::option::Option::Some(ECoachTeammateRating::k_ECoachTeammateRating_None),
            "k_ECoachTeammateRating_Positive" => ::std::option::Option::Some(ECoachTeammateRating::k_ECoachTeammateRating_Positive),
            "k_ECoachTeammateRating_Negative" => ::std::option::Option::Some(ECoachTeammateRating::k_ECoachTeammateRating_Negative),
            "k_ECoachTeammateRating_Abusive" => ::std::option::Option::Some(ECoachTeammateRating::k_ECoachTeammateRating_Abusive),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ECoachTeammateRating] = &[
        ECoachTeammateRating::k_ECoachTeammateRating_None,
        ECoachTeammateRating::k_ECoachTeammateRating_Positive,
        ECoachTeammateRating::k_ECoachTeammateRating_Negative,
        ECoachTeammateRating::k_ECoachTeammateRating_Abusive,
    ];
}

impl ::std::default::Default for ECoachTeammateRating {
    fn default() -> Self {
        ECoachTeammateRating::k_ECoachTeammateRating_None
    }
}


#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EPrivateCoachingSessionState)
pub enum EPrivateCoachingSessionState {
    // @@protoc_insertion_point(enum_value:EPrivateCoachingSessionState.k_ePrivateCoachingSessionState_Invalid)
    k_ePrivateCoachingSessionState_Invalid = 0,
    // @@protoc_insertion_point(enum_value:EPrivateCoachingSessionState.k_ePrivateCoachingSessionState_SearchingForCoach)
    k_ePrivateCoachingSessionState_SearchingForCoach = 1,
    // @@protoc_insertion_point(enum_value:EPrivateCoachingSessionState.k_ePrivateCoachingSessionState_CoachAssigned)
    k_ePrivateCoachingSessionState_CoachAssigned = 2,
    // @@protoc_insertion_point(enum_value:EPrivateCoachingSessionState.k_ePrivateCoachingSessionState_Finished)
    k_ePrivateCoachingSessionState_Finished = 3,
    // @@protoc_insertion_point(enum_value:EPrivateCoachingSessionState.k_ePrivateCoachingSessionState_Expired)
    k_ePrivateCoachingSessionState_Expired = 4,
    // @@protoc_insertion_point(enum_value:EPrivateCoachingSessionState.k_ePrivateCoachingSessionState_Abandoned)
    k_ePrivateCoachingSessionState_Abandoned = 5,
}

impl ::steam_vent_proto_common::protobuf::Enum for EPrivateCoachingSessionState {
    const NAME: &'static str = "EPrivateCoachingSessionState";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EPrivateCoachingSessionState> {
        match value {
            0 => ::std::option::Option::Some(EPrivateCoachingSessionState::k_ePrivateCoachingSessionState_Invalid),
            1 => ::std::option::Option::Some(EPrivateCoachingSessionState::k_ePrivateCoachingSessionState_SearchingForCoach),
            2 => ::std::option::Option::Some(EPrivateCoachingSessionState::k_ePrivateCoachingSessionState_CoachAssigned),
            3 => ::std::option::Option::Some(EPrivateCoachingSessionState::k_ePrivateCoachingSessionState_Finished),
            4 => ::std::option::Option::Some(EPrivateCoachingSessionState::k_ePrivateCoachingSessionState_Expired),
            5 => ::std::option::Option::Some(EPrivateCoachingSessionState::k_ePrivateCoachingSessionState_Abandoned),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EPrivateCoachingSessionState> {
        match str {
            "k_ePrivateCoachingSessionState_Invalid" => ::std::option::Option::Some(EPrivateCoachingSessionState::k_ePrivateCoachingSessionState_Invalid),
            "k_ePrivateCoachingSessionState_SearchingForCoach" => ::std::option::Option::Some(EPrivateCoachingSessionState::k_ePrivateCoachingSessionState_SearchingForCoach),
            "k_ePrivateCoachingSessionState_CoachAssigned" => ::std::option::Option::Some(EPrivateCoachingSessionState::k_ePrivateCoachingSessionState_CoachAssigned),
            "k_ePrivateCoachingSessionState_Finished" => ::std::option::Option::Some(EPrivateCoachingSessionState::k_ePrivateCoachingSessionState_Finished),
            "k_ePrivateCoachingSessionState_Expired" => ::std::option::Option::Some(EPrivateCoachingSessionState::k_ePrivateCoachingSessionState_Expired),
            "k_ePrivateCoachingSessionState_Abandoned" => ::std::option::Option::Some(EPrivateCoachingSessionState::k_ePrivateCoachingSessionState_Abandoned),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EPrivateCoachingSessionState] = &[
        EPrivateCoachingSessionState::k_ePrivateCoachingSessionState_Invalid,
        EPrivateCoachingSessionState::k_ePrivateCoachingSessionState_SearchingForCoach,
        EPrivateCoachingSessionState::k_ePrivateCoachingSessionState_CoachAssigned,
        EPrivateCoachingSessionState::k_ePrivateCoachingSessionState_Finished,
        EPrivateCoachingSessionState::k_ePrivateCoachingSessionState_Expired,
        EPrivateCoachingSessionState::k_ePrivateCoachingSessionState_Abandoned,
    ];
}

impl ::std::default::Default for EPrivateCoachingSessionState {
    fn default() -> Self {
        EPrivateCoachingSessionState::k_ePrivateCoachingSessionState_Invalid
    }
}


#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EPrivateCoachingSessionMemberFlag)
pub enum EPrivateCoachingSessionMemberFlag {
    // @@protoc_insertion_point(enum_value:EPrivateCoachingSessionMemberFlag.k_EPrivateCoachingSessionMemberFlag_Requester)
    k_EPrivateCoachingSessionMemberFlag_Requester = 1,
    // @@protoc_insertion_point(enum_value:EPrivateCoachingSessionMemberFlag.k_EPrivateCoachingSessionMemberFlag_Coach)
    k_EPrivateCoachingSessionMemberFlag_Coach = 2,
    // @@protoc_insertion_point(enum_value:EPrivateCoachingSessionMemberFlag.k_EPrivateCoachingSessionMemberFlag_LeftSession)
    k_EPrivateCoachingSessionMemberFlag_LeftSession = 4,
}

impl ::steam_vent_proto_common::protobuf::Enum for EPrivateCoachingSessionMemberFlag {
    const NAME: &'static str = "EPrivateCoachingSessionMemberFlag";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EPrivateCoachingSessionMemberFlag> {
        match value {
            1 => ::std::option::Option::Some(EPrivateCoachingSessionMemberFlag::k_EPrivateCoachingSessionMemberFlag_Requester),
            2 => ::std::option::Option::Some(EPrivateCoachingSessionMemberFlag::k_EPrivateCoachingSessionMemberFlag_Coach),
            4 => ::std::option::Option::Some(EPrivateCoachingSessionMemberFlag::k_EPrivateCoachingSessionMemberFlag_LeftSession),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EPrivateCoachingSessionMemberFlag> {
        match str {
            "k_EPrivateCoachingSessionMemberFlag_Requester" => ::std::option::Option::Some(EPrivateCoachingSessionMemberFlag::k_EPrivateCoachingSessionMemberFlag_Requester),
            "k_EPrivateCoachingSessionMemberFlag_Coach" => ::std::option::Option::Some(EPrivateCoachingSessionMemberFlag::k_EPrivateCoachingSessionMemberFlag_Coach),
            "k_EPrivateCoachingSessionMemberFlag_LeftSession" => ::std::option::Option::Some(EPrivateCoachingSessionMemberFlag::k_EPrivateCoachingSessionMemberFlag_LeftSession),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EPrivateCoachingSessionMemberFlag] = &[
        EPrivateCoachingSessionMemberFlag::k_EPrivateCoachingSessionMemberFlag_Requester,
        EPrivateCoachingSessionMemberFlag::k_EPrivateCoachingSessionMemberFlag_Coach,
        EPrivateCoachingSessionMemberFlag::k_EPrivateCoachingSessionMemberFlag_LeftSession,
    ];
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for EPrivateCoachingSessionMemberFlag {
    fn default() -> Self {
        EPrivateCoachingSessionMemberFlag::k_EPrivateCoachingSessionMemberFlag_Requester
    }
}


#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EPlayerCoachMatchFlag)
pub enum EPlayerCoachMatchFlag {
    // @@protoc_insertion_point(enum_value:EPlayerCoachMatchFlag.k_EPlayerCoachMatchFlag_EligibleForRewards)
    k_EPlayerCoachMatchFlag_EligibleForRewards = 1,
    // @@protoc_insertion_point(enum_value:EPlayerCoachMatchFlag.k_EPlayerCoachMatchFlag_PrivateCoach)
    k_EPlayerCoachMatchFlag_PrivateCoach = 2,
}

impl ::steam_vent_proto_common::protobuf::Enum for EPlayerCoachMatchFlag {
    const NAME: &'static str = "EPlayerCoachMatchFlag";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EPlayerCoachMatchFlag> {
        match value {
            1 => ::std::option::Option::Some(EPlayerCoachMatchFlag::k_EPlayerCoachMatchFlag_EligibleForRewards),
            2 => ::std::option::Option::Some(EPlayerCoachMatchFlag::k_EPlayerCoachMatchFlag_PrivateCoach),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EPlayerCoachMatchFlag> {
        match str {
            "k_EPlayerCoachMatchFlag_EligibleForRewards" => ::std::option::Option::Some(EPlayerCoachMatchFlag::k_EPlayerCoachMatchFlag_EligibleForRewards),
            "k_EPlayerCoachMatchFlag_PrivateCoach" => ::std::option::Option::Some(EPlayerCoachMatchFlag::k_EPlayerCoachMatchFlag_PrivateCoach),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EPlayerCoachMatchFlag] = &[
        EPlayerCoachMatchFlag::k_EPlayerCoachMatchFlag_EligibleForRewards,
        EPlayerCoachMatchFlag::k_EPlayerCoachMatchFlag_PrivateCoach,
    ];
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for EPlayerCoachMatchFlag {
    fn default() -> Self {
        EPlayerCoachMatchFlag::k_EPlayerCoachMatchFlag_EligibleForRewards
    }
}



const _VENT_PROTO_VERSION_CHECK: () = ::steam_vent_proto_common::VERSION_0_5_0;

#[allow(unused_imports)]
use crate::dota_shared_enums::*;
#[allow(unused_imports)]
use crate::dota_gcmessages_common_lobby::*;
impl ::steam_vent_proto_common::RpcMessage for CMsgPlayerCoachMatch {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgPrivateCoachingSessionMember {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgPrivateCoachingSession {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgPrivateCoachingSessionStatus {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgAvailablePrivateCoachingSession {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgAvailablePrivateCoachingSessionList {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgAvailablePrivateCoachingSessionSummary {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgClientToGCRequestPlayerCoachMatches {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCRequestPlayerCoachMatches {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCRequestPlayerCoachMatches;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCRequestPlayerCoachMatchesResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCRequestPlayerCoachMatchesResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCRequestPlayerCoachMatchesResponse;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgClientToGCRequestPlayerCoachMatch {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCRequestPlayerCoachMatch {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCRequestPlayerCoachMatch;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCRequestPlayerCoachMatchResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCRequestPlayerCoachMatchResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCRequestPlayerCoachMatchResponse;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgClientToGCSubmitCoachTeammateRating {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCSubmitCoachTeammateRating {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCSubmitCoachTeammateRating;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCSubmitCoachTeammateRatingResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCSubmitCoachTeammateRatingResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCSubmitCoachTeammateRatingResponse;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgGCToClientCoachTeammateRatingsChanged {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgGCToClientCoachTeammateRatingsChanged {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgGCToClientCoachTeammateRatingsChanged;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCRequestPrivateCoachingSession {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCRequestPrivateCoachingSession {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCRequestPrivateCoachingSession;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCRequestPrivateCoachingSessionResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCRequestPrivateCoachingSessionResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCRequestPrivateCoachingSessionResponse;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCAcceptPrivateCoachingSession {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCAcceptPrivateCoachingSession {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCAcceptPrivateCoachingSession;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCAcceptPrivateCoachingSessionResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCAcceptPrivateCoachingSessionResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCAcceptPrivateCoachingSessionResponse;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCLeavePrivateCoachingSession {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCLeavePrivateCoachingSession {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCLeavePrivateCoachingSession;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCLeavePrivateCoachingSessionResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCLeavePrivateCoachingSessionResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCLeavePrivateCoachingSessionResponse;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCGetCurrentPrivateCoachingSession {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCGetCurrentPrivateCoachingSession {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCGetCurrentPrivateCoachingSession;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCGetCurrentPrivateCoachingSessionResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCGetCurrentPrivateCoachingSessionResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCGetCurrentPrivateCoachingSessionResponse;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgGCToClientPrivateCoachingSessionUpdated {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgGCToClientPrivateCoachingSessionUpdated {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgGCToClientPrivateCoachingSessionUpdated;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCSubmitPrivateCoachingSessionRating {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCSubmitPrivateCoachingSessionRating {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCSubmitPrivateCoachingSessionRating;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCSubmitPrivateCoachingSessionRatingResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCSubmitPrivateCoachingSessionRatingResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCSubmitPrivateCoachingSessionRatingResponse;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCGetAvailablePrivateCoachingSessions {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCGetAvailablePrivateCoachingSessions {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCGetAvailablePrivateCoachingSessions;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCGetAvailablePrivateCoachingSessionsResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCGetAvailablePrivateCoachingSessionsResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCGetAvailablePrivateCoachingSessionsResponse;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCGetAvailablePrivateCoachingSessionsSummary {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCGetAvailablePrivateCoachingSessionsSummary {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCGetAvailablePrivateCoachingSessionsSummary;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCGetAvailablePrivateCoachingSessionsSummaryResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCGetAvailablePrivateCoachingSessionsSummaryResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCGetAvailablePrivateCoachingSessionsSummaryResponse;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCJoinPrivateCoachingSessionLobby {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCJoinPrivateCoachingSessionLobby {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCJoinPrivateCoachingSessionLobby;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCJoinPrivateCoachingSessionLobbyResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCJoinPrivateCoachingSessionLobbyResponse;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgClientToGCCoachFriend {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgClientToGCCoachFriend {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCCoachFriend;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgClientToGCCoachFriendResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCCoachFriendResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCCoachFriendResponse;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCRespondToCoachFriendRequest {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCRespondToCoachFriendRequest {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCRespondToCoachFriendRequest;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCRespondToCoachFriendRequestResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCRespondToCoachFriendRequestResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCRespondToCoachFriendRequestResponse;
}

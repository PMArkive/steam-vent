// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `dota_broadcastmessages.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::steam_vent_proto_common::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:CDOTABroadcastMsg)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDOTABroadcastMsg {
    // message fields
    // @@protoc_insertion_point(field:CDOTABroadcastMsg.type)
    pub type_: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<EDotaBroadcastMessages>>,
    // @@protoc_insertion_point(field:CDOTABroadcastMsg.msg)
    pub msg: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:CDOTABroadcastMsg.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDOTABroadcastMsg {
    fn default() -> &'a CDOTABroadcastMsg {
        <CDOTABroadcastMsg as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CDOTABroadcastMsg {
    pub fn new() -> CDOTABroadcastMsg {
        ::std::default::Default::default()
    }

    // required .EDotaBroadcastMessages type = 1;

    pub fn type_(&self) -> EDotaBroadcastMessages {
        match self.type_ {
            Some(e) => e.enum_value_or(EDotaBroadcastMessages::DOTA_BM_LANLobbyRequest),
            None => EDotaBroadcastMessages::DOTA_BM_LANLobbyRequest,
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: EDotaBroadcastMessages) {
        self.type_ = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional bytes msg = 2;

    pub fn msg(&self) -> &[u8] {
        match self.msg.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_msg(&mut self) {
        self.msg = ::std::option::Option::None;
    }

    pub fn has_msg(&self) -> bool {
        self.msg.is_some()
    }

    // Param is passed by value, moved
    pub fn set_msg(&mut self, v: ::std::vec::Vec<u8>) {
        self.msg = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_msg(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.msg.is_none() {
            self.msg = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.msg.as_mut().unwrap()
    }

    // Take field
    pub fn take_msg(&mut self) -> ::std::vec::Vec<u8> {
        self.msg.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CDOTABroadcastMsg {
    const NAME: &'static str = "CDOTABroadcastMsg";

    fn is_initialized(&self) -> bool {
        if self.type_.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    self.msg = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_ {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.msg.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.type_ {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.msg.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDOTABroadcastMsg {
        CDOTABroadcastMsg::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.msg = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDOTABroadcastMsg {
        static instance: CDOTABroadcastMsg = CDOTABroadcastMsg {
            type_: ::std::option::Option::None,
            msg: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CDOTABroadcastMsg_LANLobbyRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDOTABroadcastMsg_LANLobbyRequest {
    // special fields
    // @@protoc_insertion_point(special_field:CDOTABroadcastMsg_LANLobbyRequest.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDOTABroadcastMsg_LANLobbyRequest {
    fn default() -> &'a CDOTABroadcastMsg_LANLobbyRequest {
        <CDOTABroadcastMsg_LANLobbyRequest as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CDOTABroadcastMsg_LANLobbyRequest {
    pub fn new() -> CDOTABroadcastMsg_LANLobbyRequest {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CDOTABroadcastMsg_LANLobbyRequest {
    const NAME: &'static str = "CDOTABroadcastMsg_LANLobbyRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDOTABroadcastMsg_LANLobbyRequest {
        CDOTABroadcastMsg_LANLobbyRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDOTABroadcastMsg_LANLobbyRequest {
        static instance: CDOTABroadcastMsg_LANLobbyRequest = CDOTABroadcastMsg_LANLobbyRequest {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CDOTABroadcastMsg_LANLobbyReply)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDOTABroadcastMsg_LANLobbyReply {
    // message fields
    // @@protoc_insertion_point(field:CDOTABroadcastMsg_LANLobbyReply.id)
    pub id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CDOTABroadcastMsg_LANLobbyReply.tournament_id)
    pub tournament_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CDOTABroadcastMsg_LANLobbyReply.tournament_game_id)
    pub tournament_game_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CDOTABroadcastMsg_LANLobbyReply.members)
    pub members: ::std::vec::Vec<cdotabroadcast_msg_lanlobby_reply::CLobbyMember>,
    // @@protoc_insertion_point(field:CDOTABroadcastMsg_LANLobbyReply.requires_pass_key)
    pub requires_pass_key: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CDOTABroadcastMsg_LANLobbyReply.leader_account_id)
    pub leader_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CDOTABroadcastMsg_LANLobbyReply.game_mode)
    pub game_mode: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CDOTABroadcastMsg_LANLobbyReply.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CDOTABroadcastMsg_LANLobbyReply.players)
    pub players: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CDOTABroadcastMsg_LANLobbyReply.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDOTABroadcastMsg_LANLobbyReply {
    fn default() -> &'a CDOTABroadcastMsg_LANLobbyReply {
        <CDOTABroadcastMsg_LANLobbyReply as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CDOTABroadcastMsg_LANLobbyReply {
    pub fn new() -> CDOTABroadcastMsg_LANLobbyReply {
        ::std::default::Default::default()
    }

    // optional uint64 id = 1;

    pub fn id(&self) -> u64 {
        self.id.unwrap_or(0)
    }

    pub fn clear_id(&mut self) {
        self.id = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = ::std::option::Option::Some(v);
    }

    // optional uint32 tournament_id = 2;

    pub fn tournament_id(&self) -> u32 {
        self.tournament_id.unwrap_or(0)
    }

    pub fn clear_tournament_id(&mut self) {
        self.tournament_id = ::std::option::Option::None;
    }

    pub fn has_tournament_id(&self) -> bool {
        self.tournament_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tournament_id(&mut self, v: u32) {
        self.tournament_id = ::std::option::Option::Some(v);
    }

    // optional uint32 tournament_game_id = 3;

    pub fn tournament_game_id(&self) -> u32 {
        self.tournament_game_id.unwrap_or(0)
    }

    pub fn clear_tournament_game_id(&mut self) {
        self.tournament_game_id = ::std::option::Option::None;
    }

    pub fn has_tournament_game_id(&self) -> bool {
        self.tournament_game_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tournament_game_id(&mut self, v: u32) {
        self.tournament_game_id = ::std::option::Option::Some(v);
    }

    // optional bool requires_pass_key = 5;

    pub fn requires_pass_key(&self) -> bool {
        self.requires_pass_key.unwrap_or(false)
    }

    pub fn clear_requires_pass_key(&mut self) {
        self.requires_pass_key = ::std::option::Option::None;
    }

    pub fn has_requires_pass_key(&self) -> bool {
        self.requires_pass_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_requires_pass_key(&mut self, v: bool) {
        self.requires_pass_key = ::std::option::Option::Some(v);
    }

    // optional uint32 leader_account_id = 6;

    pub fn leader_account_id(&self) -> u32 {
        self.leader_account_id.unwrap_or(0)
    }

    pub fn clear_leader_account_id(&mut self) {
        self.leader_account_id = ::std::option::Option::None;
    }

    pub fn has_leader_account_id(&self) -> bool {
        self.leader_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_leader_account_id(&mut self, v: u32) {
        self.leader_account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 game_mode = 7;

    pub fn game_mode(&self) -> u32 {
        self.game_mode.unwrap_or(0)
    }

    pub fn clear_game_mode(&mut self) {
        self.game_mode = ::std::option::Option::None;
    }

    pub fn has_game_mode(&self) -> bool {
        self.game_mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_mode(&mut self, v: u32) {
        self.game_mode = ::std::option::Option::Some(v);
    }

    // optional string name = 8;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 players = 9;

    pub fn players(&self) -> u32 {
        self.players.unwrap_or(0)
    }

    pub fn clear_players(&mut self) {
        self.players = ::std::option::Option::None;
    }

    pub fn has_players(&self) -> bool {
        self.players.is_some()
    }

    // Param is passed by value, moved
    pub fn set_players(&mut self, v: u32) {
        self.players = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CDOTABroadcastMsg_LANLobbyReply {
    const NAME: &'static str = "CDOTABroadcastMsg_LANLobbyReply";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.tournament_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.tournament_game_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                34 => {
                    self.members.push(is.read_message()?);
                },
                40 => {
                    self.requires_pass_key = ::std::option::Option::Some(is.read_bool()?);
                },
                48 => {
                    self.leader_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.game_mode = ::std::option::Option::Some(is.read_uint32()?);
                },
                66 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                72 => {
                    self.players = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.tournament_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.tournament_game_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        for value in &self.members {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.requires_pass_key {
            my_size += 1 + 1;
        }
        if let Some(v) = self.leader_account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.game_mode {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(7, v);
        }
        if let Some(v) = self.name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(8, &v);
        }
        if let Some(v) = self.players {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(9, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.tournament_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.tournament_game_id {
            os.write_uint32(3, v)?;
        }
        for v in &self.members {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if let Some(v) = self.requires_pass_key {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.leader_account_id {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.game_mode {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.name.as_ref() {
            os.write_string(8, v)?;
        }
        if let Some(v) = self.players {
            os.write_uint32(9, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDOTABroadcastMsg_LANLobbyReply {
        CDOTABroadcastMsg_LANLobbyReply::new()
    }

    fn clear(&mut self) {
        self.id = ::std::option::Option::None;
        self.tournament_id = ::std::option::Option::None;
        self.tournament_game_id = ::std::option::Option::None;
        self.members.clear();
        self.requires_pass_key = ::std::option::Option::None;
        self.leader_account_id = ::std::option::Option::None;
        self.game_mode = ::std::option::Option::None;
        self.name = ::std::option::Option::None;
        self.players = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDOTABroadcastMsg_LANLobbyReply {
        static instance: CDOTABroadcastMsg_LANLobbyReply = CDOTABroadcastMsg_LANLobbyReply {
            id: ::std::option::Option::None,
            tournament_id: ::std::option::Option::None,
            tournament_game_id: ::std::option::Option::None,
            members: ::std::vec::Vec::new(),
            requires_pass_key: ::std::option::Option::None,
            leader_account_id: ::std::option::Option::None,
            game_mode: ::std::option::Option::None,
            name: ::std::option::Option::None,
            players: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CDOTABroadcastMsg_LANLobbyReply`
pub mod cdotabroadcast_msg_lanlobby_reply {
    // @@protoc_insertion_point(message:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct CLobbyMember {
        // message fields
        // @@protoc_insertion_point(field:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.account_id)
        pub account_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name)
        pub player_name: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a CLobbyMember {
        fn default() -> &'a CLobbyMember {
            <CLobbyMember as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl CLobbyMember {
        pub fn new() -> CLobbyMember {
            ::std::default::Default::default()
        }

        // optional uint32 account_id = 1;

        pub fn account_id(&self) -> u32 {
            self.account_id.unwrap_or(0)
        }

        pub fn clear_account_id(&mut self) {
            self.account_id = ::std::option::Option::None;
        }

        pub fn has_account_id(&self) -> bool {
            self.account_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_account_id(&mut self, v: u32) {
            self.account_id = ::std::option::Option::Some(v);
        }

        // optional string player_name = 2;

        pub fn player_name(&self) -> &str {
            match self.player_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_player_name(&mut self) {
            self.player_name = ::std::option::Option::None;
        }

        pub fn has_player_name(&self) -> bool {
            self.player_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_player_name(&mut self, v: ::std::string::String) {
            self.player_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_player_name(&mut self) -> &mut ::std::string::String {
            if self.player_name.is_none() {
                self.player_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.player_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_player_name(&mut self) -> ::std::string::String {
            self.player_name.take().unwrap_or_else(|| ::std::string::String::new())
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for CLobbyMember {
        const NAME: &'static str = "CLobbyMember";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.account_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        self.player_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.account_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.player_name.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.account_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.player_name.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> CLobbyMember {
            CLobbyMember::new()
        }

        fn clear(&mut self) {
            self.account_id = ::std::option::Option::None;
            self.player_name = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static CLobbyMember {
            static instance: CLobbyMember = CLobbyMember {
                account_id: ::std::option::Option::None,
                player_name: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EDotaBroadcastMessages)
pub enum EDotaBroadcastMessages {
    // @@protoc_insertion_point(enum_value:EDotaBroadcastMessages.DOTA_BM_LANLobbyRequest)
    DOTA_BM_LANLobbyRequest = 1,
    // @@protoc_insertion_point(enum_value:EDotaBroadcastMessages.DOTA_BM_LANLobbyReply)
    DOTA_BM_LANLobbyReply = 2,
}

impl ::steam_vent_proto_common::protobuf::Enum for EDotaBroadcastMessages {
    const NAME: &'static str = "EDotaBroadcastMessages";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EDotaBroadcastMessages> {
        match value {
            1 => ::std::option::Option::Some(EDotaBroadcastMessages::DOTA_BM_LANLobbyRequest),
            2 => ::std::option::Option::Some(EDotaBroadcastMessages::DOTA_BM_LANLobbyReply),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EDotaBroadcastMessages> {
        match str {
            "DOTA_BM_LANLobbyRequest" => ::std::option::Option::Some(EDotaBroadcastMessages::DOTA_BM_LANLobbyRequest),
            "DOTA_BM_LANLobbyReply" => ::std::option::Option::Some(EDotaBroadcastMessages::DOTA_BM_LANLobbyReply),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EDotaBroadcastMessages] = &[
        EDotaBroadcastMessages::DOTA_BM_LANLobbyRequest,
        EDotaBroadcastMessages::DOTA_BM_LANLobbyReply,
    ];
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for EDotaBroadcastMessages {
    fn default() -> Self {
        EDotaBroadcastMessages::DOTA_BM_LANLobbyRequest
    }
}



const _VENT_PROTO_VERSION_CHECK: () = ::steam_vent_proto_common::VERSION_0_5_0;

impl ::steam_vent_proto_common::RpcMessage for CDOTABroadcastMsg {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CDOTABroadcastMsg_LANLobbyRequest {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CDOTABroadcastMsg_LANLobbyReply {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::MsgKindEnum for EDotaBroadcastMessages {}

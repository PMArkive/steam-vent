// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `dota_gcmessages_common_fighting_game.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::steam_vent_proto_common::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:CMsgClientToGCFightingGameChallengeFriend)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCFightingGameChallengeFriend {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCFightingGameChallengeFriend.friend_account_id)
    pub friend_account_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCFightingGameChallengeFriend.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCFightingGameChallengeFriend {
    fn default() -> &'a CMsgClientToGCFightingGameChallengeFriend {
        <CMsgClientToGCFightingGameChallengeFriend as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCFightingGameChallengeFriend {
    pub fn new() -> CMsgClientToGCFightingGameChallengeFriend {
        ::std::default::Default::default()
    }

    // optional uint32 friend_account_id = 1;

    pub fn friend_account_id(&self) -> u32 {
        self.friend_account_id.unwrap_or(0)
    }

    pub fn clear_friend_account_id(&mut self) {
        self.friend_account_id = ::std::option::Option::None;
    }

    pub fn has_friend_account_id(&self) -> bool {
        self.friend_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_friend_account_id(&mut self, v: u32) {
        self.friend_account_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCFightingGameChallengeFriend {
    const NAME: &'static str = "CMsgClientToGCFightingGameChallengeFriend";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.friend_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.friend_account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.friend_account_id {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCFightingGameChallengeFriend {
        CMsgClientToGCFightingGameChallengeFriend::new()
    }

    fn clear(&mut self) {
        self.friend_account_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCFightingGameChallengeFriend {
        static instance: CMsgClientToGCFightingGameChallengeFriend = CMsgClientToGCFightingGameChallengeFriend {
            friend_account_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCFightingGameChallengeFriendResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCFightingGameChallengeFriendResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCFightingGameChallengeFriendResponse.response)
    pub response: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_client_to_gcfighting_game_challenge_friend_response::EResponse>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCFightingGameChallengeFriendResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCFightingGameChallengeFriendResponse {
    fn default() -> &'a CMsgClientToGCFightingGameChallengeFriendResponse {
        <CMsgClientToGCFightingGameChallengeFriendResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCFightingGameChallengeFriendResponse {
    pub fn new() -> CMsgClientToGCFightingGameChallengeFriendResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgClientToGCFightingGameChallengeFriendResponse.EResponse response = 1;

    pub fn response(&self) -> cmsg_client_to_gcfighting_game_challenge_friend_response::EResponse {
        match self.response {
            Some(e) => e.enum_value_or(cmsg_client_to_gcfighting_game_challenge_friend_response::EResponse::k_eInternalError),
            None => cmsg_client_to_gcfighting_game_challenge_friend_response::EResponse::k_eInternalError,
        }
    }

    pub fn clear_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: cmsg_client_to_gcfighting_game_challenge_friend_response::EResponse) {
        self.response = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCFightingGameChallengeFriendResponse {
    const NAME: &'static str = "CMsgClientToGCFightingGameChallengeFriendResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.response = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.response {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.response {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCFightingGameChallengeFriendResponse {
        CMsgClientToGCFightingGameChallengeFriendResponse::new()
    }

    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCFightingGameChallengeFriendResponse {
        static instance: CMsgClientToGCFightingGameChallengeFriendResponse = CMsgClientToGCFightingGameChallengeFriendResponse {
            response: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientToGCFightingGameChallengeFriendResponse`
pub mod cmsg_client_to_gcfighting_game_challenge_friend_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgClientToGCFightingGameChallengeFriendResponse.EResponse)
    pub enum EResponse {
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFightingGameChallengeFriendResponse.EResponse.k_eInternalError)
        k_eInternalError = 0,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFightingGameChallengeFriendResponse.EResponse.k_eSuccess)
        k_eSuccess = 1,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFightingGameChallengeFriendResponse.EResponse.k_eTooBusy)
        k_eTooBusy = 2,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFightingGameChallengeFriendResponse.EResponse.k_eDisabled)
        k_eDisabled = 3,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFightingGameChallengeFriendResponse.EResponse.k_eTimeout)
        k_eTimeout = 4,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFightingGameChallengeFriendResponse.EResponse.k_eInvalidAccountID)
        k_eInvalidAccountID = 5,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFightingGameChallengeFriendResponse.EResponse.k_eStillWaitingOnAnotherChallenge)
        k_eStillWaitingOnAnotherChallenge = 6,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for EResponse {
        const NAME: &'static str = "EResponse";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EResponse> {
            match value {
                0 => ::std::option::Option::Some(EResponse::k_eInternalError),
                1 => ::std::option::Option::Some(EResponse::k_eSuccess),
                2 => ::std::option::Option::Some(EResponse::k_eTooBusy),
                3 => ::std::option::Option::Some(EResponse::k_eDisabled),
                4 => ::std::option::Option::Some(EResponse::k_eTimeout),
                5 => ::std::option::Option::Some(EResponse::k_eInvalidAccountID),
                6 => ::std::option::Option::Some(EResponse::k_eStillWaitingOnAnotherChallenge),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EResponse> {
            match str {
                "k_eInternalError" => ::std::option::Option::Some(EResponse::k_eInternalError),
                "k_eSuccess" => ::std::option::Option::Some(EResponse::k_eSuccess),
                "k_eTooBusy" => ::std::option::Option::Some(EResponse::k_eTooBusy),
                "k_eDisabled" => ::std::option::Option::Some(EResponse::k_eDisabled),
                "k_eTimeout" => ::std::option::Option::Some(EResponse::k_eTimeout),
                "k_eInvalidAccountID" => ::std::option::Option::Some(EResponse::k_eInvalidAccountID),
                "k_eStillWaitingOnAnotherChallenge" => ::std::option::Option::Some(EResponse::k_eStillWaitingOnAnotherChallenge),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EResponse] = &[
            EResponse::k_eInternalError,
            EResponse::k_eSuccess,
            EResponse::k_eTooBusy,
            EResponse::k_eDisabled,
            EResponse::k_eTimeout,
            EResponse::k_eInvalidAccountID,
            EResponse::k_eStillWaitingOnAnotherChallenge,
        ];
    }

    impl ::std::default::Default for EResponse {
        fn default() -> Self {
            EResponse::k_eInternalError
        }
    }

}

// @@protoc_insertion_point(message:CMsgClientToGCFightingGameCancelChallengeFriend)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCFightingGameCancelChallengeFriend {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCFightingGameCancelChallengeFriend.friend_account_id)
    pub friend_account_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCFightingGameCancelChallengeFriend.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCFightingGameCancelChallengeFriend {
    fn default() -> &'a CMsgClientToGCFightingGameCancelChallengeFriend {
        <CMsgClientToGCFightingGameCancelChallengeFriend as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCFightingGameCancelChallengeFriend {
    pub fn new() -> CMsgClientToGCFightingGameCancelChallengeFriend {
        ::std::default::Default::default()
    }

    // optional uint32 friend_account_id = 1;

    pub fn friend_account_id(&self) -> u32 {
        self.friend_account_id.unwrap_or(0)
    }

    pub fn clear_friend_account_id(&mut self) {
        self.friend_account_id = ::std::option::Option::None;
    }

    pub fn has_friend_account_id(&self) -> bool {
        self.friend_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_friend_account_id(&mut self, v: u32) {
        self.friend_account_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCFightingGameCancelChallengeFriend {
    const NAME: &'static str = "CMsgClientToGCFightingGameCancelChallengeFriend";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.friend_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.friend_account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.friend_account_id {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCFightingGameCancelChallengeFriend {
        CMsgClientToGCFightingGameCancelChallengeFriend::new()
    }

    fn clear(&mut self) {
        self.friend_account_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCFightingGameCancelChallengeFriend {
        static instance: CMsgClientToGCFightingGameCancelChallengeFriend = CMsgClientToGCFightingGameCancelChallengeFriend {
            friend_account_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCFightingGameAnswerChallenge)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCFightingGameAnswerChallenge {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCFightingGameAnswerChallenge.challenger_account_id)
    pub challenger_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientToGCFightingGameAnswerChallenge.accept)
    pub accept: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCFightingGameAnswerChallenge.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCFightingGameAnswerChallenge {
    fn default() -> &'a CMsgClientToGCFightingGameAnswerChallenge {
        <CMsgClientToGCFightingGameAnswerChallenge as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCFightingGameAnswerChallenge {
    pub fn new() -> CMsgClientToGCFightingGameAnswerChallenge {
        ::std::default::Default::default()
    }

    // optional uint32 challenger_account_id = 1;

    pub fn challenger_account_id(&self) -> u32 {
        self.challenger_account_id.unwrap_or(0)
    }

    pub fn clear_challenger_account_id(&mut self) {
        self.challenger_account_id = ::std::option::Option::None;
    }

    pub fn has_challenger_account_id(&self) -> bool {
        self.challenger_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_challenger_account_id(&mut self, v: u32) {
        self.challenger_account_id = ::std::option::Option::Some(v);
    }

    // optional bool accept = 2;

    pub fn accept(&self) -> bool {
        self.accept.unwrap_or(false)
    }

    pub fn clear_accept(&mut self) {
        self.accept = ::std::option::Option::None;
    }

    pub fn has_accept(&self) -> bool {
        self.accept.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accept(&mut self, v: bool) {
        self.accept = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCFightingGameAnswerChallenge {
    const NAME: &'static str = "CMsgClientToGCFightingGameAnswerChallenge";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.challenger_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.accept = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.challenger_account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.accept {
            my_size += 1 + 1;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.challenger_account_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.accept {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCFightingGameAnswerChallenge {
        CMsgClientToGCFightingGameAnswerChallenge::new()
    }

    fn clear(&mut self) {
        self.challenger_account_id = ::std::option::Option::None;
        self.accept = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCFightingGameAnswerChallenge {
        static instance: CMsgClientToGCFightingGameAnswerChallenge = CMsgClientToGCFightingGameAnswerChallenge {
            challenger_account_id: ::std::option::Option::None,
            accept: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientToGCFightingGameAnswerChallengeResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientToGCFightingGameAnswerChallengeResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientToGCFightingGameAnswerChallengeResponse.response)
    pub response: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<cmsg_client_to_gcfighting_game_answer_challenge_response::EResponse>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientToGCFightingGameAnswerChallengeResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientToGCFightingGameAnswerChallengeResponse {
    fn default() -> &'a CMsgClientToGCFightingGameAnswerChallengeResponse {
        <CMsgClientToGCFightingGameAnswerChallengeResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientToGCFightingGameAnswerChallengeResponse {
    pub fn new() -> CMsgClientToGCFightingGameAnswerChallengeResponse {
        ::std::default::Default::default()
    }

    // optional .CMsgClientToGCFightingGameAnswerChallengeResponse.EResponse response = 1;

    pub fn response(&self) -> cmsg_client_to_gcfighting_game_answer_challenge_response::EResponse {
        match self.response {
            Some(e) => e.enum_value_or(cmsg_client_to_gcfighting_game_answer_challenge_response::EResponse::k_eInternalError),
            None => cmsg_client_to_gcfighting_game_answer_challenge_response::EResponse::k_eInternalError,
        }
    }

    pub fn clear_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: cmsg_client_to_gcfighting_game_answer_challenge_response::EResponse) {
        self.response = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientToGCFightingGameAnswerChallengeResponse {
    const NAME: &'static str = "CMsgClientToGCFightingGameAnswerChallengeResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.response = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.response {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.response {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientToGCFightingGameAnswerChallengeResponse {
        CMsgClientToGCFightingGameAnswerChallengeResponse::new()
    }

    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientToGCFightingGameAnswerChallengeResponse {
        static instance: CMsgClientToGCFightingGameAnswerChallengeResponse = CMsgClientToGCFightingGameAnswerChallengeResponse {
            response: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientToGCFightingGameAnswerChallengeResponse`
pub mod cmsg_client_to_gcfighting_game_answer_challenge_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgClientToGCFightingGameAnswerChallengeResponse.EResponse)
    pub enum EResponse {
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFightingGameAnswerChallengeResponse.EResponse.k_eInternalError)
        k_eInternalError = 0,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFightingGameAnswerChallengeResponse.EResponse.k_eSuccess)
        k_eSuccess = 1,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFightingGameAnswerChallengeResponse.EResponse.k_eTooBusy)
        k_eTooBusy = 2,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFightingGameAnswerChallengeResponse.EResponse.k_eDisabled)
        k_eDisabled = 3,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFightingGameAnswerChallengeResponse.EResponse.k_eTimeout)
        k_eTimeout = 4,
        // @@protoc_insertion_point(enum_value:CMsgClientToGCFightingGameAnswerChallengeResponse.EResponse.k_eInvalidChallenge)
        k_eInvalidChallenge = 5,
    }

    impl ::steam_vent_proto_common::protobuf::Enum for EResponse {
        const NAME: &'static str = "EResponse";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EResponse> {
            match value {
                0 => ::std::option::Option::Some(EResponse::k_eInternalError),
                1 => ::std::option::Option::Some(EResponse::k_eSuccess),
                2 => ::std::option::Option::Some(EResponse::k_eTooBusy),
                3 => ::std::option::Option::Some(EResponse::k_eDisabled),
                4 => ::std::option::Option::Some(EResponse::k_eTimeout),
                5 => ::std::option::Option::Some(EResponse::k_eInvalidChallenge),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EResponse> {
            match str {
                "k_eInternalError" => ::std::option::Option::Some(EResponse::k_eInternalError),
                "k_eSuccess" => ::std::option::Option::Some(EResponse::k_eSuccess),
                "k_eTooBusy" => ::std::option::Option::Some(EResponse::k_eTooBusy),
                "k_eDisabled" => ::std::option::Option::Some(EResponse::k_eDisabled),
                "k_eTimeout" => ::std::option::Option::Some(EResponse::k_eTimeout),
                "k_eInvalidChallenge" => ::std::option::Option::Some(EResponse::k_eInvalidChallenge),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EResponse] = &[
            EResponse::k_eInternalError,
            EResponse::k_eSuccess,
            EResponse::k_eTooBusy,
            EResponse::k_eDisabled,
            EResponse::k_eTimeout,
            EResponse::k_eInvalidChallenge,
        ];
    }

    impl ::std::default::Default for EResponse {
        fn default() -> Self {
            EResponse::k_eInternalError
        }
    }

}

// @@protoc_insertion_point(message:CMsgGCToClientFightingGameChallenge)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCToClientFightingGameChallenge {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCToClientFightingGameChallenge.challenger_account_id)
    pub challenger_account_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCToClientFightingGameChallenge.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCToClientFightingGameChallenge {
    fn default() -> &'a CMsgGCToClientFightingGameChallenge {
        <CMsgGCToClientFightingGameChallenge as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCToClientFightingGameChallenge {
    pub fn new() -> CMsgGCToClientFightingGameChallenge {
        ::std::default::Default::default()
    }

    // optional uint32 challenger_account_id = 1;

    pub fn challenger_account_id(&self) -> u32 {
        self.challenger_account_id.unwrap_or(0)
    }

    pub fn clear_challenger_account_id(&mut self) {
        self.challenger_account_id = ::std::option::Option::None;
    }

    pub fn has_challenger_account_id(&self) -> bool {
        self.challenger_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_challenger_account_id(&mut self, v: u32) {
        self.challenger_account_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCToClientFightingGameChallenge {
    const NAME: &'static str = "CMsgGCToClientFightingGameChallenge";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.challenger_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.challenger_account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.challenger_account_id {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCToClientFightingGameChallenge {
        CMsgGCToClientFightingGameChallenge::new()
    }

    fn clear(&mut self) {
        self.challenger_account_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCToClientFightingGameChallenge {
        static instance: CMsgGCToClientFightingGameChallenge = CMsgGCToClientFightingGameChallenge {
            challenger_account_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgGCToClientFightingGameChallengeCanceled)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCToClientFightingGameChallengeCanceled {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCToClientFightingGameChallengeCanceled.challenger_account_id)
    pub challenger_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCToClientFightingGameChallengeCanceled.responder_account_id)
    pub responder_account_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCToClientFightingGameChallengeCanceled.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCToClientFightingGameChallengeCanceled {
    fn default() -> &'a CMsgGCToClientFightingGameChallengeCanceled {
        <CMsgGCToClientFightingGameChallengeCanceled as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCToClientFightingGameChallengeCanceled {
    pub fn new() -> CMsgGCToClientFightingGameChallengeCanceled {
        ::std::default::Default::default()
    }

    // optional uint32 challenger_account_id = 1;

    pub fn challenger_account_id(&self) -> u32 {
        self.challenger_account_id.unwrap_or(0)
    }

    pub fn clear_challenger_account_id(&mut self) {
        self.challenger_account_id = ::std::option::Option::None;
    }

    pub fn has_challenger_account_id(&self) -> bool {
        self.challenger_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_challenger_account_id(&mut self, v: u32) {
        self.challenger_account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 responder_account_id = 2;

    pub fn responder_account_id(&self) -> u32 {
        self.responder_account_id.unwrap_or(0)
    }

    pub fn clear_responder_account_id(&mut self) {
        self.responder_account_id = ::std::option::Option::None;
    }

    pub fn has_responder_account_id(&self) -> bool {
        self.responder_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_responder_account_id(&mut self, v: u32) {
        self.responder_account_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCToClientFightingGameChallengeCanceled {
    const NAME: &'static str = "CMsgGCToClientFightingGameChallengeCanceled";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.challenger_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.responder_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.challenger_account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.responder_account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.challenger_account_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.responder_account_id {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCToClientFightingGameChallengeCanceled {
        CMsgGCToClientFightingGameChallengeCanceled::new()
    }

    fn clear(&mut self) {
        self.challenger_account_id = ::std::option::Option::None;
        self.responder_account_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCToClientFightingGameChallengeCanceled {
        static instance: CMsgGCToClientFightingGameChallengeCanceled = CMsgGCToClientFightingGameChallengeCanceled {
            challenger_account_id: ::std::option::Option::None,
            responder_account_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgGCToClientFightingGameStartMatch)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCToClientFightingGameStartMatch {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCToClientFightingGameStartMatch.challenger_account_id)
    pub challenger_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCToClientFightingGameStartMatch.responder_account_id)
    pub responder_account_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCToClientFightingGameStartMatch.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCToClientFightingGameStartMatch {
    fn default() -> &'a CMsgGCToClientFightingGameStartMatch {
        <CMsgGCToClientFightingGameStartMatch as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGCToClientFightingGameStartMatch {
    pub fn new() -> CMsgGCToClientFightingGameStartMatch {
        ::std::default::Default::default()
    }

    // optional uint32 challenger_account_id = 1;

    pub fn challenger_account_id(&self) -> u32 {
        self.challenger_account_id.unwrap_or(0)
    }

    pub fn clear_challenger_account_id(&mut self) {
        self.challenger_account_id = ::std::option::Option::None;
    }

    pub fn has_challenger_account_id(&self) -> bool {
        self.challenger_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_challenger_account_id(&mut self, v: u32) {
        self.challenger_account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 responder_account_id = 2;

    pub fn responder_account_id(&self) -> u32 {
        self.responder_account_id.unwrap_or(0)
    }

    pub fn clear_responder_account_id(&mut self) {
        self.responder_account_id = ::std::option::Option::None;
    }

    pub fn has_responder_account_id(&self) -> bool {
        self.responder_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_responder_account_id(&mut self, v: u32) {
        self.responder_account_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGCToClientFightingGameStartMatch {
    const NAME: &'static str = "CMsgGCToClientFightingGameStartMatch";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.challenger_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.responder_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.challenger_account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.responder_account_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.challenger_account_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.responder_account_id {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCToClientFightingGameStartMatch {
        CMsgGCToClientFightingGameStartMatch::new()
    }

    fn clear(&mut self) {
        self.challenger_account_id = ::std::option::Option::None;
        self.responder_account_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCToClientFightingGameStartMatch {
        static instance: CMsgGCToClientFightingGameStartMatch = CMsgGCToClientFightingGameStartMatch {
            challenger_account_id: ::std::option::Option::None,
            responder_account_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}


const _VENT_PROTO_VERSION_CHECK: () = ::steam_vent_proto_common::VERSION_0_5_0;

#[allow(unused_imports)]
use crate::steammessages::*;
#[allow(unused_imports)]
use crate::dota_shared_enums::*;
#[allow(unused_imports)]
use crate::dota_gcmessages_common::*;
#[allow(unused_imports)]
use crate::gcsdk_gcmessages::*;
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCFightingGameChallengeFriend {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCFightingGameChallengeFriend {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCFightingGameChallengeFriend;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCFightingGameChallengeFriendResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCFightingGameChallengeFriendResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCFightingGameChallengeFriendResponse;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCFightingGameCancelChallengeFriend {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCFightingGameCancelChallengeFriend {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCFightingGameCancelChallengeFriend;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCFightingGameAnswerChallenge {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCFightingGameAnswerChallenge {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCFightingGameAnswerChallenge;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgClientToGCFightingGameAnswerChallengeResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgClientToGCFightingGameAnswerChallengeResponse {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgClientToGCFightingGameAnswerChallengeResponse;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCToClientFightingGameChallenge {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgGCToClientFightingGameChallenge {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgGCToClientFightingGameChallenge;
}
impl ::steam_vent_proto_common::RpcMessage
for CMsgGCToClientFightingGameChallengeCanceled {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgGCToClientFightingGameChallengeCanceled {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgGCToClientFightingGameChallengeCanceled;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGCToClientFightingGameStartMatch {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind
for CMsgGCToClientFightingGameStartMatch {
    type KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg;
    const KIND: Self::KindEnum = crate::dota_gcmessages_msgid::EDOTAGCMsg::k_EMsgGCToClientFightingGameStartMatch;
}
